[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Juergen Wilbert. Maintainer, author. Timo Lueke. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wilbert, J. & Lüke, T. (2025). Scan: Single-Case Data Analyses Single Multiple Baseline Designs. (0.64.0) [English]. CRAN. https://CRAN.R-project.org/package=scan.","code":"@Misc{,   title = {Scan: Single-Case Data Analyses for Single and Multiple Baseline Designs},   shorttitle = {scan},   publisher = {CRAN},   author = {Jürgen Wilbert and Timo Lüke},   year = {2025},   url = {https://CRAN.R-project.org/package=scan}, }"},{"path":"/index.html","id":"scan---single-case-data-analyses-for-single-and-multiple-baseline-designs","dir":"","previous_headings":"","what":"Single-Case Data Analyses for Single and Multiple Baseline Designs","title":"Single-Case Data Analyses for Single and Multiple Baseline Designs","text":"collection procedures analysing, visualising, managing single-case data. include piecewise linear regression models, multilevel models, overlap indices (‘PND’, ‘PEM’, ‘PAND’, ‘PET’, ‘tau-u’, ‘baseline corrected tau’, ‘CDC’), randomization tests. Data preparation functions support outlier detection, handling missing values, scaling, truncation, rank transformation, smoothing. export function helps generate html latex tables publication friendly style. details can found https://jazznbass.github.io/scan-Book/.","code":""},{"path":"/reference/Subsetting.html","id":null,"dir":"Reference","previous_headings":"","what":"Select an scdf — $.scdf","title":"Select an scdf — $.scdf","text":"Select scdf","code":""},{"path":"/reference/Subsetting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select an scdf — $.scdf","text":"","code":"# S3 method for class 'scdf' x$i  # S3 method for class 'scdf' x[i]"},{"path":"/reference/Subsetting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select an scdf — $.scdf","text":"x scdf object case name x","code":""},{"path":"/reference/Subsetting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select an scdf — $.scdf","text":"scdf","code":""},{"path":"/reference/add_dummy_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Dummy Variables for Piecewise Linear Models — add_dummy_variables","title":"Add Dummy Variables for Piecewise Linear Models — add_dummy_variables","text":"Adds dummy variables scdf calculating piecewise linear models.","code":""},{"path":"/reference/add_dummy_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Dummy Variables for Piecewise Linear Models — add_dummy_variables","text":"","code":"add_dummy_variables(   scdf,   model = c(\"W\", \"H-M\", \"B&L-B\"),   contrast_level = c(\"first\", \"preceding\"),   contrast_slope = c(\"first\", \"preceding\") )"},{"path":"/reference/add_dummy_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Dummy Variables for Piecewise Linear Models — add_dummy_variables","text":"scdf single-case data frame. See scdf() learn format. model Model used calculating dummy parameters (see Huitema & McKean, 2000). Default model = \"W\". Possible values : \"B&L-B\", \"H-M\", \"W\", deprecated \"JW\". contrast_level Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. contrast_slope Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast.","code":""},{"path":"/reference/add_dummy_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Dummy Variables for Piecewise Linear Models — add_dummy_variables","text":"","code":"add_dummy_variables(  scdf = exampleABC,   model = \"W\",   contrast_level = \"first\",   contrast_slope = \"first\" ) #> #A single-case data frame with three cases #>  #>  Marie: values mt phase phaseB phaseC interB interC #>             58  0     A      0      0      0      0 #>             56  1     A      0      0      0      0 #>             60  2     A      0      0      0      0 #>             63  3     A      0      0      0      0 #>             51  4     A      0      0      0      0 #>             45  5     A      0      0      0      0 #>             44  6     A      0      0      0      0 #>             59  7     A      0      0      0      0 #>             45  8     A      0      0      0      0 #>             39  9     A      0      0      0      0 #>             83 10     B      1      0      0      0 #>             65 11     B      1      0      1      0 #>             70 12     B      1      0      2      0 #>             83 13     B      1      0      3      0 #>             70 14     B      1      0      4      0 #> # ... up to 15 more rows #> #  two more cases"},{"path":"/reference/add_l2.html","id":null,"dir":"Reference","previous_headings":"","what":"Add level-2 data — add_l2","title":"Add level-2 data — add_l2","text":"Merges variables corresponding case names data.frame scdf file","code":""},{"path":"/reference/add_l2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add level-2 data — add_l2","text":"","code":"add_l2(scdf, data_l2, cvar = \"case\")"},{"path":"/reference/add_l2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add level-2 data — add_l2","text":"scdf single-case data frame. See scdf() learn format. data_l2 level 2 dataset. cvar Character string name \"case\" variable L2 dataset (default 'case').","code":""},{"path":"/reference/add_l2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add level-2 data — add_l2","text":"scdf","code":""},{"path":"/reference/add_l2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add level-2 data — add_l2","text":"function mostly used combination hplm() function.","code":""},{"path":[]},{"path":"/reference/add_l2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add level-2 data — add_l2","text":"","code":"Leidig2018 |> add_l2(Leidig2018_l2) #> #A single-case data frame with 35 cases #>  #>  1a1: academic_engagement mt classID weekday disruptive_behavior phase class #>                         4  1      1a       3                   1     A    1a #>                         1  2      1a       4                   1     A    1a #>                         2  3      1a       5                   1     A    1a #>                      <NA>  4      1a       1                <NA>     A    1a #>                         2  5      1a       2                   1     A    1a #>                         3  6      1a       3                   1     A    1a #>                         1  7      1a       4                   1     A    1a #>                         1  8      1a       5                   2     A    1a #>                         3  9      1a       1                   0     B    1a #>                         4 10      1a       2                   0     B    1a #>                         3 11      1a       3                   0     B    1a #>                         4 12      1a       4                   1     B    1a #>                         4 13      1a       5                   0     B    1a #>                         4 14      1a       1                   0     B    1a #>                         4 15      1a       2                   0     B    1a #>  gender migration first_language_german SDQ_TOTAL SDQ_EXTERNALIZING #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>       0         0                     1        10                 9 #>  SDQ_INTERNALIZING ITRF_TOTAL ITRF_ACADEMIC ITRF_BEHAVIOR #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #>                  1         11             7             4 #> # ... up to 93 more rows #> #  34 more cases"},{"path":"/reference/anova.sc_plm.html","id":null,"dir":"Reference","previous_headings":"","what":"ANOVA Table for Piecewise Linear Models — anova.sc_plm","title":"ANOVA Table for Piecewise Linear Models — anova.sc_plm","text":"Model comparison piecewise regression models","code":""},{"path":"/reference/anova.sc_plm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ANOVA Table for Piecewise Linear Models — anova.sc_plm","text":"","code":"# S3 method for class 'sc_plm' anova(object, ...)  # S3 method for class 'sc_hplm' anova(object, ...)  # S3 method for class 'sc_mplm' anova(object, ...)"},{"path":"/reference/anova.sc_plm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ANOVA Table for Piecewise Linear Models — anova.sc_plm","text":"object object containing results returned plm(). ... additional plm objects.","code":""},{"path":"/reference/anova.sc_plm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ANOVA Table for Piecewise Linear Models — anova.sc_plm","text":"","code":"## For glm models with family = \"gaussian\" mod1 <- plm(exampleAB$Johanna, level = FALSE, slope = FALSE) mod2 <- plm(exampleAB$Johanna) anova(mod1, mod2) #> Analysis of Deviance Table #>  #> Model 1: values ~ 1 + mt #> Model 2: values ~ 1 + mt + phaseB + interB #>   Resid. Df Resid. Dev Df Deviance      F Pr(>F) #> 1        18     449.64                           #> 2        16     403.46  2   46.183 0.9157 0.4202 ## For glm models with family = \"poisson\" mod0 <- plm(example_A24, formula = injuries ~ 1, family = \"poisson\") mod1 <- plm(example_A24, trend = FALSE, family = \"poisson\") anova(mod0, mod1, mod2) #> Warning: models with response ‘\"values\"’ removed because response differs from model 1 #> Analysis of Deviance Table #>  #> Model 1: injuries ~ 1 #> Model 2: injuries ~ 1 + phaseB + interB #>   Resid. Df Resid. Dev Df Deviance  Pr(>Chi)     #> 1        22     643.09                           #> 2        20      95.78  2   547.31 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 ## For glm with family = \"binomial\" mod0 <- plm(   exampleAB_score$Christiano,    formula = values ~ 1,    family = \"binomial\",    var_trials = \"trials\" ) mod1 <- plm(   exampleAB_score$Christiano,    trend = FALSE,    family = \"binomial\",    var_trials = \"trials\" ) anova(mod0, mod1) #> Analysis of Deviance Table #>  #> Model 1: values ~ 1 #> Model 2: values ~ 1 + phaseB + interB #>   Resid. Df Resid. Dev Df Deviance  Pr(>Chi)     #> 1        29    267.683                           #> 2        27     27.124  2   240.56 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 ## For multilevel models: mod0 <- hplm(Leidig2018, trend = FALSE, slope = FALSE, level = FALSE) mod1 <- hplm(Leidig2018, trend = FALSE) mod2 <- hplm(Leidig2018) anova(mod0, mod1, mod2) #>   Model df      AIC      BIC    logLik   Test  L.Ratio p-value #> 1     1  3 6255.509 6272.876 -3124.754                         #> 2     2  5 5826.509 5855.454 -2908.254 1 vs 2 433.0002  <.0001 #> 3     3  6 5827.604 5862.339 -2907.802 2 vs 3   0.9044  0.3416 ## For mplm mod0 <- mplm(   Leidig2018$`1a1`,    update = . ~  1, dvar = c(\"academic_engagement\", \"disruptive_behavior\") ) mod1 <- mplm(   Leidig2018$`1a1`,    trend = FALSE,    dvar = c(\"academic_engagement\", \"disruptive_behavior\") ) mod2 <- mplm(   Leidig2018$`1a1`,    dvar = c(\"academic_engagement\", \"disruptive_behavior\") )  anova(mod0, mod1, mod2) #> Analysis of Variance Table #>  #> Model 1: y ~ 1 #> Model 2: y ~ 1 + phaseB + interB #> Model 3: y ~ 1 + mt + phaseB + interB #>   Res.Df Df Gen.var.  Pillai approx F num Df den Df    Pr(>F)     #> 1     82     0.52962                                              #> 2     80 -2  0.44785 0.33250   7.8764      4    158 8.167e-06 *** #> 3     79 -1  0.44628 0.03166   1.2750      2     78    0.2852     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"/reference/as.data.frame.scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating a long format data frame from several single-case data frames (scdf). — as.data.frame.scdf","title":"Creating a long format data frame from several single-case data frames (scdf). — as.data.frame.scdf","text":".data.frame function transposes scdf one long data frame. Additionally, data frame can merged includes level 2 data subjects. might helpful prepare data used packages scan.","code":""},{"path":"/reference/as.data.frame.scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating a long format data frame from several single-case data frames (scdf). — as.data.frame.scdf","text":"","code":"# S3 method for class 'scdf' as.data.frame(x, ..., l2 = NULL, id = \"case\")"},{"path":"/reference/as.data.frame.scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating a long format data frame from several single-case data frames (scdf). — as.data.frame.scdf","text":"x scdf object ... implemented l2 data frame providing additional variables Level 2. scdf names cases Level 2 data frame column corresponding case names. id Variable name Level 2 data frame contains case names.","code":""},{"path":"/reference/as.data.frame.scdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating a long format data frame from several single-case data frames (scdf). — as.data.frame.scdf","text":"Returns one data frame data single-cases structured case variable.","code":""},{"path":[]},{"path":"/reference/as.data.frame.scdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating a long format data frame from several single-case data frames (scdf). — as.data.frame.scdf","text":"Juergen Wilbert","code":""},{"path":"/reference/as.data.frame.scdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating a long format data frame from several single-case data frames (scdf). — as.data.frame.scdf","text":"","code":"## Convert the list of three single-case data frames from Grosche (2011) ### into one long data frame Grosche2011 #> #A single-case data frame with three cases #>  #>  Eva: values mt phase │ Georg: values mt phase │ Olaf: values mt phase │ #>         3.39  0     A │            13  0     A │         7.69  0     A │ #>         2.09  1     A │          17.4  1     A │         7.27  1     A │ #>         1.46  7     A │            13  6     A │         7.02  7     A │ #>         3.23  8     A │          7.74 10     A │         5.37  8     A │ #>         3.06 13     A │          8.82 13     A │         4.57 14     A │ #>         2.83 15     A │           7.5 15     A │         3.02 15     A │ #>         2.44 38     B │          5.82 36     A │         4.68 38     A │ #>         1.86 42     B │          6.26 38     B │         4.97 42     A │ #>         2.17 45     B │           5.6 41     B │         5.73 43     A │ #>         2.59 49     B │         12.79 43     B │         7.63 49     A │ #>         3.92 50     B │          9.17 48     B │         6.98 50     A │ #>         4.14 56     B │         10.59 50     B │          7.5 56     A │ #>         3.31 63     B │          9.23 55     B │         6.91 59     B │ #>         2.69 64     B │         10.71 59     B │         4.86 63     B │ #>         4.27 70     B │          7.61 62     B │         6.71 64     B │ #> # ... up to nine more rows Grosche2011_long <- as.data.frame(Grosche2011) Grosche2011_long #>     case values  mt phase #> 1    Eva   3.39   0     A #> 2    Eva   2.09   1     A #> 3    Eva   1.46   7     A #> 4    Eva   3.23   8     A #> 5    Eva   3.06  13     A #> 6    Eva   2.83  15     A #> 7    Eva   2.44  38     B #> 8    Eva   1.86  42     B #> 9    Eva   2.17  45     B #> 10   Eva   2.59  49     B #> 11   Eva   3.92  50     B #> 12   Eva   4.14  56     B #> 13   Eva   3.31  63     B #> 14   Eva   2.69  64     B #> 15   Eva   4.27  70     B #> 16   Eva   4.66  77     B #> 17   Eva   3.20  78     B #> 18   Eva   4.98  91     B #> 19   Eva   4.42  92     B #> 20 Georg  13.00   0     A #> 21 Georg  17.40   1     A #> 22 Georg  13.00   6     A #> 23 Georg   7.74  10     A #> 24 Georg   8.82  13     A #> 25 Georg   7.50  15     A #> 26 Georg   5.82  36     A #> 27 Georg   6.26  38     B #> 28 Georg   5.60  41     B #> 29 Georg  12.79  43     B #> 30 Georg   9.17  48     B #> 31 Georg  10.59  50     B #> 32 Georg   9.23  55     B #> 33 Georg  10.71  59     B #> 34 Georg   7.61  62     B #> 35 Georg   9.78  64     B #> 36 Georg   8.33  69     B #> 37 Georg  12.00  71     B #> 38 Georg  12.19  77     B #> 39 Georg  10.70  78     B #> 40 Georg  11.36  85     B #> 41 Georg   7.89  91     B #> 42 Georg  10.82  94     B #> 43 Georg  11.56 101     B #> 44  Olaf   7.69   0     A #> 45  Olaf   7.27   1     A #> 46  Olaf   7.02   7     A #> 47  Olaf   5.37   8     A #> 48  Olaf   4.57  14     A #> 49  Olaf   3.02  15     A #> 50  Olaf   4.68  38     A #> 51  Olaf   4.97  42     A #> 52  Olaf   5.73  43     A #> 53  Olaf   7.63  49     A #> 54  Olaf   6.98  50     A #> 55  Olaf   7.50  56     A #> 56  Olaf   6.91  59     B #> 57  Olaf   4.86  63     B #> 58  Olaf   6.71  64     B #> 59  Olaf   5.67  70     B #> 60  Olaf   5.00  71     B #> 61  Olaf   6.14  80     B #> 62  Olaf   8.14  91     B #> 63  Olaf   4.53  97     B  ## Combine an scdf with data for l2 Leidig2018_long <- as.data.frame(Leidig2018, l2 = Leidig2018_l2) names(Leidig2018_long) #>  [1] \"case\"                  \"academic_engagement\"   \"mt\"                    #>  [4] \"classID\"               \"weekday\"               \"disruptive_behavior\"   #>  [7] \"phase\"                 \"class\"                 \"gender\"                #> [10] \"migration\"             \"first_language_german\" \"SDQ_TOTAL\"             #> [13] \"SDQ_EXTERNALIZING\"     \"SDQ_INTERNALIZING\"     \"ITRF_TOTAL\"            #> [16] \"ITRF_ACADEMIC\"         \"ITRF_BEHAVIOR\"         summary(Leidig2018_long) #>       case      academic_engagement       mt           classID          #>  1a1    : 108   Min.   :0.0         Min.   :  1.00   Length:3780        #>  1a2    : 108   1st Qu.:3.0         1st Qu.: 27.75   Class :character   #>  1a3    : 108   Median :4.0         Median : 54.50   Mode  :character   #>  1a4    : 108   Mean   :3.7         Mean   : 54.50                      #>  1a5    : 108   3rd Qu.:5.0         3rd Qu.: 81.25                      #>  2a1    : 108   Max.   :5.0         Max.   :108.00                      #>  (Other):3132   NA's   :1366                                            #>     weekday      disruptive_behavior phase       class           #>  Min.   :1.000   Min.   :0.0000      A: 730   Length:3780        #>  1st Qu.:2.000   1st Qu.:0.0000      B:3050   Class :character   #>  Median :3.000   Median :0.0000               Mode  :character   #>  Mean   :3.028   Mean   :0.6192                                  #>  3rd Qu.:4.000   3rd Qu.:1.0000                                  #>  Max.   :5.000   Max.   :4.0000                                  #>                  NA's   :1393                                    #>      gender         migration      first_language_german   SDQ_TOTAL     #>  Min.   :0.0000   Min.   :0.0000   Min.   :0.0000        Min.   : 4.00   #>  1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000        1st Qu.: 8.00   #>  Median :0.0000   Median :1.0000   Median :1.0000        Median :11.00   #>  Mean   :0.1429   Mean   :0.5429   Mean   :0.7429        Mean   :11.46   #>  3rd Qu.:0.0000   3rd Qu.:1.0000   3rd Qu.:1.0000        3rd Qu.:14.00   #>  Max.   :1.0000   Max.   :1.0000   Max.   :1.0000        Max.   :22.00   #>                                                                          #>  SDQ_EXTERNALIZING SDQ_INTERNALIZING   ITRF_TOTAL   ITRF_ACADEMIC    #>  Min.   : 3.000    Min.   : 0.0      Min.   : 3.0   Min.   : 0.000   #>  1st Qu.: 6.000    1st Qu.: 1.0      1st Qu.:12.0   1st Qu.: 2.000   #>  Median : 9.000    Median : 2.0      Median :16.0   Median : 9.000   #>  Mean   : 8.857    Mean   : 2.6      Mean   :17.4   Mean   : 9.286   #>  3rd Qu.:11.000    3rd Qu.: 3.0      3rd Qu.:23.0   3rd Qu.:16.000   #>  Max.   :18.000    Max.   :10.0      Max.   :35.0   Max.   :24.000   #>                                                                      #>  ITRF_BEHAVIOR    #>  Min.   : 0.000   #>  1st Qu.: 4.000   #>  Median : 7.000   #>  Mean   : 8.114   #>  3rd Qu.:11.000   #>  Max.   :20.000   #>"},{"path":"/reference/as_scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"as_scdf — as_scdf","title":"as_scdf — as_scdf","text":"Converts data frame scdf object.","code":""},{"path":"/reference/as_scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as_scdf — as_scdf","text":"","code":"as_scdf(   object,   cvar = \"case\",   pvar = \"phase\",   dvar = \"values\",   mvar = \"mt\",   phase_names = NULL,   sort_cases = FALSE )"},{"path":"/reference/as_scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as_scdf — as_scdf","text":"object data.frame cvar Sets \"case\" variable. Defaults case. pvar Sets \"phase\" variable. Defaults phase. dvar Sets \"values\" variable. Defaults values. mvar Sets variable name \"mt\" variable. Defaults mt. phase_names character vector phase names. Defaults phase names provided phase variable. sort_cases set TRUE, resulting list sorted label names (alphabetically increasing).","code":""},{"path":"/reference/as_scdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as_scdf — as_scdf","text":"scdf.","code":""},{"path":[]},{"path":"/reference/autocorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Autocorrelation for single-case data — autocorr","title":"Autocorrelation for single-case data — autocorr","text":"autocorr function calculates autocorrelations within phase across phases.","code":""},{"path":"/reference/autocorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autocorrelation for single-case data — autocorr","text":"","code":"autocorr(data, dvar, pvar, mvar, lag_max = 3, lag.max, ...)"},{"path":"/reference/autocorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autocorrelation for single-case data — autocorr","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. lag_max, lag.max lag autocorrelations computed. ... arguments passed acf() function","code":""},{"path":"/reference/autocorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autocorrelation for single-case data — autocorr","text":"data frame containing separate autocorrelations phase phases (single-case). lag_max exceeds length phase minus one, NA returned cell.","code":""},{"path":[]},{"path":"/reference/autocorr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Autocorrelation for single-case data — autocorr","text":"Juergen Wilbert","code":""},{"path":"/reference/autocorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autocorrelation for single-case data — autocorr","text":"","code":"## Compute autocorrelations for a list of four single-cases up to lag 2. autocorr(Huber2014, lag_max = 2) #> Autocorrelations #>  #> Adam  #>  Phase Lag 1 Lag 2 #>      A  0.18 -0.40 #>      B  0.00 -0.16 #>    all  0.26 -0.02 #>  #> Berta  #>  Phase Lag 1 Lag 2 #>      A  0.08 -0.52 #>      B  0.07 -0.36 #>    all  0.30 -0.01 #>  #> Christian  #>  Phase Lag 1 Lag 2 #>      A -0.07 -0.24 #>      B  0.53  0.40 #>    all  0.64  0.55 #>  #> David  #>  Phase Lag 1 Lag 2 #>      A -0.40 -0.25 #>      B  0.27  0.35 #>    all  0.45  0.47 #>"},{"path":"/reference/batch_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to each element in an scdf. — batch_apply","title":"Apply a function to each element in an scdf. — batch_apply","text":"function applies given function case multiple case scdf, returning list output function call.","code":""},{"path":"/reference/batch_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to each element in an scdf. — batch_apply","text":"","code":"batch_apply(scdf, fn, simplify = FALSE)"},{"path":"/reference/batch_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to each element in an scdf. — batch_apply","text":"scdf list inputs apply function . fn function apply element. Use . placeholder scdf (e.g. describe(.)). simplify simplify TRUE fn returns vector values, batch_apply return data frame case names.","code":""},{"path":"/reference/batch_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to each element in an scdf. — batch_apply","text":"list output function call.","code":""},{"path":"/reference/batch_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to each element in an scdf. — batch_apply","text":"","code":"batch_apply(exampleAB, coef(plm(.))) #> $Johanna #>              Estimate Std. Error     t value     Pr(>|t|) #> (Intercept) 54.400000   3.889690 13.98569074 2.173001e-10 #> mt           0.100000   1.587959  0.06297391 9.505673e-01 #> phaseB       7.858333   5.816499  1.35104178 1.954791e-01 #> interB       1.525000   1.616067  0.94364905 3.593813e-01 #>  #> $Karolina #>               Estimate Std. Error    t value     Pr(>|t|) #> (Intercept) 49.0000000   4.098328 11.9560945 2.169640e-09 #> mt           1.4000000   1.673136  0.8367523 4.150550e-01 #> phaseB       3.8916667   6.128489  0.6350124 5.343967e-01 #> interB       0.5392857   1.702751  0.3167144 7.555551e-01 #>  #> $Anja #>             Estimate Std. Error    t value     Pr(>|t|) #> (Intercept) 56.40000   4.250294 13.2696700 4.729808e-10 #> mt          -1.40000   1.735175 -0.8068349 4.315923e-01 #> phaseB      16.96667   6.355733  2.6695057 1.678721e-02 #> interB       2.50000   1.765889  1.4157177 1.760295e-01 #>"},{"path":"/reference/between_smd.html","id":null,"dir":"Reference","previous_headings":"","what":"Between-Case Standardized Mean Difference — between_smd","title":"Between-Case Standardized Mean Difference — between_smd","text":"Calculates standardized mean difference multilevel model described Pustejovsky et al. (2014)","code":""},{"path":"/reference/between_smd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Between-Case Standardized Mean Difference — between_smd","text":"","code":"between_smd(   data,   method = c(\"REML\", \"MCMCglmm\"),   ci = 0.95,   include_residuals = TRUE,   ... )  # S3 method for class 'sc_bcsmd' print(x, digits = 2, ...)  # S3 method for class 'sc_bcsmd' export(   object,   caption = NA,   footnote = NA,   filename = NA,   digits = 2,   round = 2,   ... )"},{"path":"/reference/between_smd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Between-Case Standardized Mean Difference — between_smd","text":"data Either scdf object returned hplm() bplm() function. method Either \"REML\" \"MCMglmm\". indicated statistical method applied calculate model. ci numeric 0 1 setting width confidence interval (method REML) credible interval (method MCMCglmm). default 0.95 95-percent interval. include_residuals Logical. See details. ... arguments passed hplm() bplm()function. x object returned baseline_smd(). digits minimum number significant digits use. set \"auto\" (default), values predefined. object scdf object exported scan function. caption Character string table caption. left NA (default) caption created based exported object. footnote Character string table footnote. left NA (default) footnote created based exported object. filename String containing file name. filename given output written file. round Integer passed digits argument used round values.","code":""},{"path":"/reference/between_smd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Between-Case Standardized Mean Difference — between_smd","text":"object class sc_bcsmd.","code":""},{"path":"/reference/between_smd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Between-Case Standardized Mean Difference — between_smd","text":"BC-SMD calculate BC-SMD = Phase difference / sqrt(residual + random_intercept). closely related Cohen's d. want exact estimation based case variance, exclude residual variance setting argument include_residuals = FALSE get BC-SMD = Phase difference / sqrt(random_intercept). 'base' model includes phase level predictor like originally proposed Hedges et al. Whereas 'Full plm' model includes trend phase slope additional predictors.","code":""},{"path":"/reference/between_smd.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Between-Case Standardized Mean Difference — between_smd","text":"print(sc_bcsmd): Print results export(sc_bcsmd): export results","code":""},{"path":"/reference/between_smd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Between-Case Standardized Mean Difference — between_smd","text":"Pustejovsky, J. E., Hedges, L. V., & Shadish, W. R. (2014). Design-Comparable Effect Sizes Multiple Baseline Designs: General Modeling Framework. Journal Educational Behavioral Statistics, 39(5), 368–393. https://doi.org/10.3102/1076998614547577","code":""},{"path":"/reference/between_smd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Between-Case Standardized Mean Difference — between_smd","text":"","code":"## Create a example scdf: des <- design(   n = 150,   phase_design = list(A1 = 10, B1 = 10, A2 = 10, B2 = 10, C = 10),   level = list(B1 = 1, A2 = 0, B2 = 1, C = 1),   rtt = 0.7,   random_start_value = TRUE ) study <- random_scdf(des)  ## Standard BC-SMD return: between_smd(study) #> Between-Case Standardized Mean Difference #>  #> Method: REML #> Base model #>  #>   Effect BC-SMD   se LL-CI95% UL-CI95% #>  phaseB1   0.85 0.02     0.81     0.89 #>  phaseA2   0.86 0.02     0.82     0.90 #>  phaseB2   1.67 0.02     1.63     1.71 #>   phaseC   2.55 0.02     2.51     2.58 #>  #> Full plm model #>  #>   Effect BC-SMD   se LL-CI95% UL-CI95% #>  phaseB1   0.87 0.04     0.79     0.95 #>  phaseA2   0.95 0.08     0.79     1.11 #>  phaseB2   1.89 0.13     1.64     2.15 #>   phaseC   2.90 0.18     2.55     3.24  ## Specify the model and provide an hplm object: model <- hplm(study, contrast_level = \"preceding\", slope = FALSE,  trend = FALSE) between_smd(model) #> Between-Case Standardized Mean Difference #>  #> Method: REML #> Provided #>  #>   Effect BC-SMD   se LL-CI95% UL-CI95% #>  phaseB1   0.85 0.02     0.81     0.89 #>  phaseA2   0.01 0.02    -0.03     0.05 #>  phaseB2   0.82 0.02     0.78     0.86 #>   phaseC   0.87 0.02     0.84     0.91  ## excluding the residuals gives a more accurate estimation: between_smd(model, include_residuals = FALSE) #> Between-Case Standardized Mean Difference #>  #> Method: REML #> Provided #>  #>   Effect BC-SMD   se LL-CI95% UL-CI95% #>  phaseB1   1.02 0.02     0.97     1.07 #>  phaseA2   0.01 0.02    -0.04     0.06 #>  phaseB2   0.98 0.02     0.93     1.02 #>   phaseC   1.05 0.02     1.00     1.09"},{"path":"/reference/bplm.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Piecewise Linear Model — bplm","title":"Bayesian Piecewise Linear Model — bplm","text":"Computes bayesian (hierarchical) piecewise linear model based Markov chain Monte Carlo sampler.","code":""},{"path":"/reference/bplm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Piecewise Linear Model — bplm","text":"","code":"bplm(   data,   dvar,   pvar,   mvar,   model = c(\"W\", \"H-M\", \"B&L-B\"),   contrast_level = c(\"first\", \"preceding\"),   contrast_slope = c(\"first\", \"preceding\"),   trend = TRUE,   level = TRUE,   slope = TRUE,   random_trend = FALSE,   random_level = FALSE,   random_slope = FALSE,   fixed = NULL,   random = NULL,   update_fixed = NULL,   ... )  # S3 method for class 'sc_bplm' print(x, digits = 3, ...)  # S3 method for class 'sc_bplm' export(   object,   caption = NA,   footnote = NA,   filename = NA,   round = 2,   nice = TRUE,   ... )"},{"path":"/reference/bplm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Piecewise Linear Model — bplm","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. model Model used calculating dummy parameters (see Huitema & McKean, 2000). Default model = \"W\". Possible values : \"B&L-B\", \"H-M\", \"W\", deprecated \"JW\". contrast_level Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. contrast_slope Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. trend logical indicating trend parameters included model. level logical indicating level parameters included model. slope logical indicating slope parameters included model. random_trend TRUE, includes random trend effect. random_level TRUE, includes random level effect. random_slope TRUE, includes random slope effect. fixed formula overwrites automatically created fixed part regression model defaults standard piecewise regression model. parameter phase followed phase name (e.g., phaseB) indicates level effect corresponding phase. parameter 'inter' followed phase name (e.g., interB) adresses slope effect based method provide model argument (e.g., \"B&L-B\"). formula can changed example include L1 L2 variables regression model. random formula overwrites automatically created random part regression model. update_fixed easier way change fixed model part (e.g., . ~ . + newvariable). ... arguments passed mcmcglmm function. x object returned bplm() digits minimum number significant digits use. set \"auto\" (default), values predefined. object scdf object exported scan function. caption Character string table caption. left NA (default) caption created based exported object. footnote Character string table footnote. left NA (default) footnote created based exported object. filename String containing file name. filename given output written file. round Integer passed digits argument used round values. nice set TRUE (default) output values rounded optimized publication tables.","code":""},{"path":"/reference/bplm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Piecewise Linear Model — bplm","text":"object class sc_bplm.","code":""},{"path":"/reference/bplm.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Bayesian Piecewise Linear Model — bplm","text":"print(sc_bplm): Print results export(sc_bplm): Export results html table (see export())","code":""},{"path":[]},{"path":"/reference/bplm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian Piecewise Linear Model — bplm","text":"Juergen Wilbert","code":""},{"path":"/reference/bplm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Piecewise Linear Model — bplm","text":"","code":"# plm regression bplm(example_A24) #> Bayesian Piecewise Linear Regression #>  #> Contrast model: W (level: first, slope: first) #> Deviance Information Criterion: 221.87  #>  #> B-structure - Fixed effects (injuries ~ 1 + year + phaseB + interB) #>  #>                               B lower 95% CI upper 95% CI sample size     p #> Intercept               258.493      225.124      300.038    1192.152 0.001 #> Trend (year)              2.032       -7.538       12.150    1000.000 0.666 #> Level phase B (phaseB) -150.934     -206.970     -104.339    1107.750 0.001 #> Slope phase B (interB)   -1.965      -11.167        9.533    1000.000 0.704 #>  #> R-Structure - Residuals #>  #>           SD lower 95% CI upper 95% CI  #>       28.059       19.024       37.313   # Multilevel plm regression with random intercept bplm(exampleAB_50, nitt = 5000) #> Bayesian Piecewise Linear Regression #>  #> Contrast model: W (level: first, slope: first) #> 50 Cases #>  #> Deviance Information Criterion: 8574.425  #>  #> B-structure - Fixed effects (values ~ 1 + mt + phaseB + interB) #>  #>                             B lower 95% CI upper 95% CI sample size     p #> Intercept              48.444       45.747       51.379     200.000 0.005 #> Trend (mt)              0.586        0.365        0.799     200.000 0.005 #> Level phase B (phaseB) 14.004       12.886       15.080     198.408 0.005 #> Slope phase B (interB)  0.896        0.668        1.101     200.000 0.005 #>  #> G-Structure - Random effects (~case) #>  #>  Parameter     SD lower 95% CI upper 95% CI #>  Intercept 10.312        8.365       12.532 #>  #> R-Structure - Residuals #>  #>           SD lower 95% CI upper 95% CI  #>        5.293        5.069        5.488   # Adding a random slope bplm(exampleAB_50, random_level = TRUE, nitt = 5000) #> Bayesian Piecewise Linear Regression #>  #> Contrast model: W (level: first, slope: first) #> 50 Cases #>  #> Deviance Information Criterion: 8459.847  #>  #> B-structure - Fixed effects (values ~ 1 + mt + phaseB + interB) #>  #>                             B lower 95% CI upper 95% CI sample size     p #> Intercept              48.249       45.233       50.582         200 0.005 #> Trend (mt)              0.635        0.441        0.899         200 0.005 #> Level phase B (phaseB) 13.813       11.856       15.178         200 0.005 #> Slope phase B (interB)  0.852        0.592        1.035         200 0.005 #>  #> G-Structure - Random effects (~us(1 + phaseB):case) #>  #>               Parameter    SD lower 95% CI upper 95% CI #>               Intercept 9.778        8.105       11.397 #>  Level phase B (phaseB) 3.985        2.900        5.059 #>  #> Correlation #>                         Parameter Correlation lower 95% CI upper 95% CI #>  Intercept:Level phase B (phaseB)       0.086       -0.203        0.498 #>  #> R-Structure - Residuals #>  #>           SD lower 95% CI upper 95% CI  #>        5.017        4.811        5.177"},{"path":"/reference/cdc.html","id":null,"dir":"Reference","previous_headings":"","what":"Conservative Dual-Criterion Method — cdc","title":"Conservative Dual-Criterion Method — cdc","text":"cdc() function applies Conservative Dual-Criterion Method (Fisher, Kelley, & Lomas, 2003) scdf objects. compares phase B data points phase mean trend (OLS, bi-split, tri-split) additional increase/decrease .25 SD. binomial test 50/50 distribution computed p-values .05 labeled \"systematic change\".","code":""},{"path":"/reference/cdc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conservative Dual-Criterion Method — cdc","text":"","code":"cdc(   data,   dvar,   pvar,   mvar,   decreasing = FALSE,   trend_method = c(\"OLS\", \"bisplit\", \"trisplit\"),   conservative = 0.25,   phases = c(1, 2) )"},{"path":"/reference/cdc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conservative Dual-Criterion Method — cdc","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. decreasing expect data lower B phase, set decreasing = TRUE. Default decreasing = FALSE. trend_method Method used calculate trend line. Default trend_method = \"OLS\". Possible values : \"OLS\", \"bisplit\", \"trisplit\". \"bisplit\", \"trisplit\" used cases least five data-points relevant phases. conservative CDC method adjusts original mean trend lines adding (expected increase) subtracting (expected decrease) additional .25 SD evaluating phase B data. Default CDC method conservative = .25. apply Dual-Criterion (DC) method, set conservative = 0. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2).","code":""},{"path":[]},{"path":"/reference/cdc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conservative Dual-Criterion Method — cdc","text":"Fisher, W. W., Kelley, M. E., & Lomas, J. E. (2003). Visual Aids Structured Criteria Improving Visual Inspection Interpretation Single-Case Designs. Journal Applied Behavior Analysis, 36, 387-406. https://doi.org/10.1901/jaba.2003.36-387","code":""},{"path":[]},{"path":"/reference/cdc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conservative Dual-Criterion Method — cdc","text":"Timo Lueke","code":""},{"path":"/reference/cdc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conservative Dual-Criterion Method — cdc","text":"","code":"## Apply the CDC method (standard OLS line) design <- design(n = 1, slope = 0.2) dat <- random_scdf(design, seed = 42) cdc(dat) #> Conservative Dual Criterion #>  #> N cases =  1  #>  #>       Case nB improve nB binom p    CDC Evaluation #>  [case #1]         14 15   <.001 systematic change #>  #> Assuming an expected increase in phase B. #> Alternative hypothesis (Binomial test): true probability > 50%  ## Apply the CDC with Koenig's bi-split and an expected decrease in phase B. cdc(exampleAB_decreasing, decreasing = TRUE, trend_method = \"bisplit\") #> Conservative Dual Criterion #>  #> N cases =  3  #>  #>   Case nB improve nB binom p    CDC Evaluation #>  Peter          7 13     .50         no change #>   Tony         11 12    <.01 systematic change #>  Bruce         14 14   <.001 systematic change #>  #> Assuming an expected decrease in phase B. #> Alternative hypothesis (Binomial test): true probability < 50% #> Overall evaluation of all MBD instances:   no change   ## Apply the CDC with Tukey's tri-split, comparing the first and fourth phase cdc(exampleABAB, trend_method = \"trisplit\", phases = c(1,4)) #> Conservative Dual Criterion #>  #> N cases =  3  #>  #>     Case nB improve nB binom p    CDC Evaluation #>   Howard         10 10   <.001 systematic change #>  Sheldon          4 10     .82         no change #>  Leonard          7  7    <.01 systematic change #>  #> Assuming an expected increase in phase B. #> Alternative hypothesis (Binomial test): true probability > 50% #> Overall evaluation of all MBD instances:   no change   ## Apply the Dual-Criterion (DC) method (i.e., mean and trend without ##shifting). cdc(  exampleAB_decreasing,  decreasing = TRUE,  trend_method = \"bisplit\",  conservative = 0 ) #> Conservative Dual Criterion #>  #> N cases =  3  #>  #>   Case nB improve nB binom p    CDC Evaluation #>  Peter          7 13     .50         no change #>   Tony         12 12   <.001 systematic change #>  Bruce         14 14   <.001 systematic change #>  #> Assuming an expected decrease in phase B. #> Alternative hypothesis (Binomial test): true probability < 50% #> Overall evaluation of all MBD instances:   no change"},{"path":"/reference/coef.sc_plm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract coefficients from plm/hplm objects — coef.sc_plm","title":"Extract coefficients from plm/hplm objects — coef.sc_plm","text":"Extract coefficients plm/hplm objects","code":""},{"path":"/reference/coef.sc_plm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract coefficients from plm/hplm objects — coef.sc_plm","text":"","code":"# S3 method for class 'sc_plm' coef(object, ...)"},{"path":"/reference/coef.sc_plm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract coefficients from plm/hplm objects — coef.sc_plm","text":"object plm hplm object ... implemented","code":""},{"path":"/reference/coef.sc_plm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract coefficients from plm/hplm objects — coef.sc_plm","text":"data frame coefficient table","code":""},{"path":"/reference/coef.sc_plm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract coefficients from plm/hplm objects — coef.sc_plm","text":"","code":"coefficients(plm(exampleAB$Johanna)) #>              Estimate Std. Error     t value     Pr(>|t|) #> (Intercept) 54.400000   3.889690 13.98569074 2.173001e-10 #> mt           0.100000   1.587959  0.06297391 9.505673e-01 #> phaseB       7.858333   5.816499  1.35104178 1.954791e-01 #> interB       1.525000   1.616067  0.94364905 3.593813e-01"},{"path":"/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine single-case data frames — combine","title":"Combine single-case data frames — combine","text":"Combine single-case data frames","code":""},{"path":"/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine single-case data frames — combine","text":"","code":"combine(..., dvar = NULL, pvar = NULL, mvar = NULL, info = NULL, author = NULL)  # S3 method for class 'scdf' c(...)"},{"path":"/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine single-case data frames — combine","text":"... scdf objects dvar Character string. Name dependent variable. Defaults dependent variable first case provided. pvar Character string. Name phase variable. Defaults phase variable first case provided. mvar Character string. Name measurement-time variable. Defaults measurement-time variable first case provided. info additional information scdf file. author author data.","code":""},{"path":"/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine single-case data frames — combine","text":"scdf. set differently, attributes scdf copied first scdf provided (.e first argument function).","code":""},{"path":"/reference/convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert — convert","title":"Convert — convert","text":"Converts scdf object R code","code":""},{"path":"/reference/convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert — convert","text":"","code":"convert(   scdf,   file = \"\",   study_name = \"study\",   case_name = \"case\",   inline = FALSE,   indent = 2,   silent = FALSE )"},{"path":"/reference/convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert — convert","text":"scdf single-case data frame. See scdf() learn format. file filename exporting syntax. study_name Character string. Name study object. case_name Character string. Name scdf objects. inline TRUE, phase definition online version. indent Integer. Indentation. silent TRUE, syntax printed console","code":""},{"path":"/reference/convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert — convert","text":"Returns string (invisible).","code":""},{"path":[]},{"path":"/reference/convert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert — convert","text":"","code":"filename <- tempfile() convert(exampleABC, file = filename) #> case1 <- scdf( #>   values = c( #>     58, 56, 60, 63, 51, 45, 44, 59, 45, 39, 83, 65, 70, 83, 70, 85, 47, 66, #>     77, 75, 51, 87, 80, 68, 70, 56, 52, 70, 83, 63 #>   ), #>   phase_design = c(A = 10, B = 10, C = 10), #>   name = \"Marie\" #> ) #>  #> case2 <- scdf( #>   values = c( #>     47, 41, 47, 52, 54, 65, 55, 37, 51, 60, 60, 65, 55, 46, 49, 54, 77, 73, #>     97, 64, 84, 71, 66, 74, 78, 68, 52, 76, 63, 54 #>   ), #>   phase_design = c(A = 15, B = 8, C = 7), #>   name = \"Rosalind\" #> ) #>  #> case3 <- scdf( #>   values = c( #>     50, 45, 63, 53, 66, 57, 35, 45, 74, 63, 47, 45, 47, 36, 51, 55, 35, 66, #>     59, 55, 73, 60, 85, 62, 79, 69, 87, 76, 90, 48 #>   ), #>   phase_design = c(A = 20, B = 7, C = 3), #>   name = \"Lise\" #> ) #>  #> study <- c( #>   case1, case2, case3 #> )  source(filename) all.equal(study, exampleABC) #> [1] TRUE unlink(filename)"},{"path":"/reference/corrected_tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Baseline corrected tau — corrected_tau","title":"Baseline corrected tau — corrected_tau","text":"Kendall's tau correlation dependent variable phase variable calculated correcting baseline trend.","code":""},{"path":"/reference/corrected_tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Baseline corrected tau — corrected_tau","text":"","code":"corrected_tau(   data,   dvar,   pvar,   mvar,   phases = c(1, 2),   alpha = 0.05,   continuity = FALSE,   repeated = FALSE,   tau_method = c(\"b\", \"a\") )"},{"path":"/reference/corrected_tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Baseline corrected tau — corrected_tau","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2). alpha Sets p-value baseline correction applied. continuity TRUE applies continuity correction calculating p repeated TRUE applies repeated median method calculating slope intercept. tau_method Character values \"\" \"b\" (default) indicating whether Kendall Tau Kendall Tau B applied.","code":""},{"path":"/reference/corrected_tau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Baseline corrected tau — corrected_tau","text":"method proposed Tarlow (2016). baseline data checked significant autocorrelation (based Kendall's Tau). , non-parametric Theil-Sen regression applied baseline data dependent values regressed measurement time. resulting slope information used predict data B-phase. dependent variable now corrected baseline trend residuals Theil-Sen regression taken calculations. Finally, Kendall's tau calculated dependent variable dichotomous phase variable. function provides two extensions procedure: accurate Siegel repeated median regression applied repeated = TRUE continuity correction applied continuity = TRUE.","code":""},{"path":"/reference/corrected_tau.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Baseline corrected tau — corrected_tau","text":"Tarlow, K. R. (2016). Improved Rank Correlation Effect Size Statistic Single-Case Designs: Baseline Corrected Tau. Behavior Modification, 41(4), 427–467. https://doi.org/10.1177/0145445516676750","code":""},{"path":[]},{"path":"/reference/corrected_tau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Baseline corrected tau — corrected_tau","text":"","code":"dat <- scdf(c(A = 33,25,17,25,14,13,15, B = 15,16,16,5,7,9,6,5,3,3,8,11,7)) corrected_tau(dat) #> Baseline corrected tau #>  #> Method: Theil-Sen regression #> Kendall's tau b applied. #> Continuity correction not applied. #>  #> [case #1] : #>                            tau     z     p #> Baseline autocorrelation -0.68 -2.13  <.05 #> Uncorrected tau          -0.57 -2.94  <.01 #> Baseline corrected tau    0.70  3.61 <.001 #>  #> Baseline correction should be applied. #>  #>"},{"path":"/reference/deprecated-functions.html","id":null,"dir":"Reference","previous_headings":"","what":"List of old deprecated function names — deprecated-functions","title":"List of old deprecated function names — deprecated-functions","text":"list functions names replaced new names line R syntax guidelines. old function names still work. wrappers call new function.","code":""},{"path":"/reference/deprecated-functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of old deprecated function names — deprecated-functions","text":"","code":"tauUSC(...)  power_testSC(...)  fillmissingSC(...)  overlapSC(...)  randSC(...)  rand.test(...)  rciSC(...)  rSC(...)  readSC.excel(...)  readSC(...)  writeSC(...)"},{"path":"/reference/deprecated-functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of old deprecated function names — deprecated-functions","text":"... Arguments passed new function.","code":""},{"path":"/reference/describe.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptive statistics for single-case data — describe","title":"Descriptive statistics for single-case data — describe","text":"describe() function provides common descriptive statistics single-case data.","code":""},{"path":"/reference/describe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptive statistics for single-case data — describe","text":"","code":"describe(data, dvar, pvar, mvar)"},{"path":"/reference/describe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptive statistics for single-case data — describe","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file.","code":""},{"path":"/reference/describe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Descriptive statistics for single-case data — describe","text":"list containing data frame descriptive statistics (descriptives); cse design (design); number cases (N)","code":""},{"path":"/reference/describe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Descriptive statistics for single-case data — describe","text":"n = number measurements; mis = number missing vaues; m = mean; md = median; sd = standard deviation; mad = median average deviation; min = minimum; max = maximum; trend = weight depended variable regressed time (values ~ mt).","code":""},{"path":[]},{"path":"/reference/describe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Descriptive statistics for single-case data — describe","text":"Juergen Wilbert","code":""},{"path":"/reference/describe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descriptive statistics for single-case data — describe","text":"","code":"## Descriptive statistics for a study of three single-cases describe(Grosche2011) #> Describe Single-Case Data #>  #>        Eva Georg Olaf #> Design A-B   A-B  A-B #> n.A      6     7   12 #> n.B     13    17    8 #> mis.A    0     0    0 #> mis.B    0     0    0 #>  #>            Eva  Georg   Olaf #> m.A      2.677 10.469  6.036 #> m.B      3.435  9.799  5.995 #> md.A     2.945  8.820  6.355 #> md.B     3.310 10.590  5.905 #> sd.A     0.750  4.112  1.524 #> sd.B     1.029  2.089  1.225 #> mad.A    0.541  4.448  1.794 #> mad.B    1.290  2.090  1.416 #> min.A     1.46   5.82   3.02 #> min.B     1.86   5.60   4.53 #> max.A     3.39  17.40   7.69 #> max.B     4.98  12.79   8.14 #> trend.A  0.014 -0.268  0.007 #> trend.B  0.044  0.043  0.000  ## Descriptives of a three phase design describe(exampleABC) #> Describe Single-Case Data #>  #>        Marie Rosalind  Lise #> Design A-B-C    A-B-C A-B-C #> n.A       10       15    20 #> n.B       10        8     7 #> n.C       10        7     3 #> mis.A      0        0     0 #> mis.B      0        0     0 #> mis.C      0        0     0 #>  #>           Marie Rosalind    Lise #> m.A      52.000   52.267  52.350 #> m.B      72.100   73.250  73.571 #> m.C      68.000   66.429  71.333 #> md.A       53.5     52.0    52.0 #> md.B       72.5     72.0    73.0 #> md.C         69       68      76 #> sd.A      8.287    8.146  10.869 #> sd.B     11.367   13.134  10.644 #> sd.C     12.702   10.486  21.385 #> mad.A    11.119    7.413  10.378 #> mad.B    10.378   10.378  16.309 #> mad.C    17.791   11.861  20.756 #> min.A        39       37      35 #> min.B        47       54      60 #> min.C        51       52      48 #> max.A        63       65      74 #> max.B        85       97      87 #> max.C        87       78      90 #> trend.A  -1.915    0.500  -0.088 #> trend.B  -0.612    0.643   1.929 #> trend.C  -0.194   -2.929 -14.000  ## Write descriptive statistics to .csv-file study <- describe(Waddell2011) write.csv(study$descriptives, file = tempfile())"},{"path":"/reference/design.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a single-case design matrix — design","title":"Generate a single-case design matrix — design","text":"Generates parameter list used generating multiple random single-cases. used within random_scdf function power_test function Monte-Carlo tasks.","code":""},{"path":"/reference/design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a single-case design matrix — design","text":"","code":"design(   n = 1,   phase_design = list(A = 5, B = 15),   trend = 0,   level = list(0),   slope = list(0),   start_value = 50,   s = 10,   rtt = 0.8,   extreme_prop = list(0),   extreme_range = c(-4, -3),   missing_prop = 0,   distribution = c(\"normal\", \"gaussian\", \"poisson\", \"binomial\"),   random_start_value = FALSE,   n_trials = NULL,   mt = NULL,   B_start = NULL,   m,   phase.design,   MT,   B.start,   extreme.p,   extreme.d,   missing.p )"},{"path":"/reference/design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a single-case design matrix — design","text":"n Number cases designed (Default n = 1). phase_design, phase.design list defining length label phase. E.g., phase.length = list(A1 = 10, B1 = 10, A2 = 10, B2 = 10). Use vectors want define different values case phase.length = list(= c(10, 15), B = c(10, 15). trend Defines effect size trend added incrementally measurement across whole data-set. assign different trends several single-cases, use vector values (e.g. trend = c(.1, .3, .5)). number cases exceeds length vector, values recycled. using 'gaussian' distribution, trend parameters indicate effect size d changes.  using binomial poisson distribution, trend indicates increase points / counts per measurement. level list defines level increase (effect size d) beginning phase relative previous phase (e.g. list(= 0, B = 1)). first element must zero first phase single-case level effect (one less list element number phases, scan add leading element 0 values). Use vectors define variable level effects case (e.g. list(= c(0, 0), B = c(1, 2))). using 'gaussian' distribution, level parameters indicate effect size d changes. using binomial poisson distribution, level indicates increase points / counts onset phase. slope list defines increase per measurement phase compared previous phase. slope = list(= 0, B = .1) generates incremental increase 0.1 per measurement starting B phase. first list element must zero first phase single-case slope effect (one less list element number phases, scan add leading element 0 values). Use vectors define variable slope effects case (e.g. list(= c(0, 0), B = c(0.1, 0.2))). number cases exceeds length vector, values recycled. using 'gaussian' distribution, slope parameters indicate effect size d changes per measurement. using binomial poisson distribution, slope indicates increase points / counts per measurement. start_value, m Starting value first measurement. Default 50. distribution = \"poission\" start_value represents frequency. distribution = \"binomial\" start_value must range 0 1 represent probability event. assign different start values several single-cases, use vector values (e.g. c(50, 42, 56)). number cases exceeds length vector, values recycled. m argument deprecated. s Standard deviation used calculate absolute values level, slope, trend effects calculate error distribution rtt values. Set 10 default. assign different variances several single-cases, use vector values (e.g. s = c(5, 10, 15)). number cases exceeds length vector, values recycled. distribution 'poisson' 'binomial' s applied. rtt Reliability underlying simulated measurements. Set rtt = .8 default. assign different reliabilities several single-cases, use vector values (e.g. rtt = c(.6, .7, .8)). number cases exceeds length vector, values repeated. rtt effect using binomial poisson distributions. extreme_prop, extreme.p Probability extreme values. extreme.p = .05 gives five percent probability extreme value. vector values assigns different probabilities multiple cases. number cases exceeds length vector, values recycled. extreme_range, extreme.d Range extreme values. extreme_range = c(-7,-6) uses extreme values within range -7 -6 . case binomial poisson distribution, extreme_range indicates frequencies. case gaussian (normal) distribution indicates effect size d. Caution: first value must smaller second, otherwise procedure fail. missing_prop, missing.p Portion missing values. missing_prop = 0.1 creates 10\\ different probabilities multiple cases. number cases exceeds length vector, values repeated. distribution Distribution criteria varible. Default \"normal\". Possible values \"normal\", \"binomial\", \"poisson\". random_start_value TRUE, start_values randomized based distribution. n_trials distribution (see ) \"binomial\", n_trials number trials/observations/items. mt, MT Number measurements (study). Default mt = 20. B_start, B.start Phase B starting point. default setting B_start = 6 assign first five scores (case) phase , following scores phase B. assign different starting points set multiple single-cases, use vector starting values (e.g., B_start = c(6, 7, 8)). number cases exceeds length vector, values recycled.","code":""},{"path":"/reference/design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a single-case design matrix — design","text":"object class sc_design.","code":""},{"path":"/reference/design.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a single-case design matrix — design","text":"Juergen Wibert","code":""},{"path":"/reference/design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a single-case design matrix — design","text":"","code":"## Create random single-case data and inspect it  design <- design(    n = 3, rtt = 0.75, slope = 0.1, extreme_prop = 0.1,    missing_prop = 0.1  )  dat <- random_scdf(design, round = 1, random.names = TRUE, seed = 123)  describe(dat) #> Describe Single-Case Data #>  #>        [case #1] [case #2] [case #3] #> Design       A-B       A-B       A-B #> n.A            5         5         5 #> n.B           15        15        15 #> mis.A          0         1         0 #> mis.B          2         1         2 #>  #>         [case #1] [case #2] [case #3] #> m.A         51.12     50.00     54.36 #> m.B        57.115    52.793    56.892 #> md.A         50.4      49.2      52.6 #> md.B        59.60     55.75     59.20 #> sd.A        4.672     3.631     4.538 #> sd.B       10.403    12.893     8.003 #> mad.A       2.520     2.076     3.410 #> mad.B       7.858    10.601     6.672 #> min.A        46.8      46.5      50.3 #> min.B        29.7      19.7      38.7 #> max.A        59.0      55.1      61.8 #> max.B        71.3      65.2      67.7 #> trend.A      0.95      1.36      2.27 #> trend.B     0.935     1.693     1.358   ## And now have a look at poisson-distributed data  design <- design(    n = 3, B_start = c(6, 10, 14), mt = c(12, 20, 22), start_value = 10,    distribution = \"poisson\", level = -5, missing_prop = 0.1  )  dat <- random_scdf(design, seed = 1234)  pand(dat, decreasing = TRUE) #> Percentage of all non-overlapping data #>  #> Method: sort  #>  #> PAND = 91.8% #> Φ =  0.836  ; Φ² =  0.699  #>  #> 49 measurements (23 Phase A, 26 Phase B) in 3 cases #> Overlapping data: n = 4 ; percentage = 8.2  #>  #> 2 x 2 Matrix of percentages #>          A    B total #> A     42.9  4.1  46.9 #> B      4.1 49.0  53.1 #> total 46.9 53.1 100.0 #>  #> 2 x 2 Matrix of counts #>        A  B total #> A     21  2    23 #> B      2 24    26 #> total 23 26    49 #>  #>  #> Chi-Squared test: #> X² = 34.256, df = 1, p = 0.000  #>  #> Fisher exact test: #> Odds ratio = 99.881, p = 0.000"},{"path":"/reference/dot-inheritParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy function to inherit global descriptions of parameters — .inheritParams","title":"Dummy function to inherit global descriptions of parameters — .inheritParams","text":"Dummy function inherit global descriptions parameters","code":""},{"path":"/reference/dot-inheritParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dummy function to inherit global descriptions of parameters — .inheritParams","text":"","code":".inheritParams(   data,   scdf,   dvar,   mvar,   pvar,   decreasing,   phases,   model,   contrast,   contrast_level,   contrast_slope,   trend,   level,   slope,   nice,   ... )"},{"path":"/reference/dot-inheritParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dummy function to inherit global descriptions of parameters — .inheritParams","text":"data single-case data frame. See scdf() learn format. scdf single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. decreasing expect data lower B phase, set decreasing = TRUE. Default decreasing = FALSE. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2). model Model used calculating dummy parameters (see Huitema & McKean, 2000). Default model = \"W\". Possible values : \"B&L-B\", \"H-M\", \"W\", deprecated \"JW\". contrast Sets contrast_level contrast_slope. Either \"first\", \"preceding\" contrast matrix. contrast_level Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. contrast_slope Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. trend logical indicating trend parameters included model. level logical indicating level parameters included model. slope logical indicating slope parameters included model. nice set TRUE (default) output values rounded optimized publication tables. ... arguments passed function.","code":""},{"path":"/reference/estimate_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate single-case design — estimate_design","title":"Estimate single-case design — estimate_design","text":"functions takes scdf extracts design parameters. resulting object can used randomly create new scdf files underlying parameters. useful Monte-Carlo studies bootstrapping procedures.","code":""},{"path":"/reference/estimate_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate single-case design — estimate_design","text":"","code":"estimate_design(   data,   dvar,   pvar,   mvar,   s = NULL,   rtt = NULL,   overall_effects = FALSE,   overall_rtt = TRUE,   model = \"JW\",   ... )"},{"path":"/reference/estimate_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate single-case design — estimate_design","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. s standard deviation depicting case variance overall performance. two single-cases included scdf, variance estimated s set NULL. rtt reliability measurements. reliability estimated rtt = NULL. overall_effects TRUE, trend, level, slope effect estimations identical case. FALSE, effects estimated case separately. overall_rtt Ignored rtt set. TRUE, rtt estimations based cases identical case. FALSE rtt estimated case separately. model Model used calculating dummy parameters (see Huitema & McKean, 2000). Default model = \"W\". Possible values : \"B&L-B\", \"H-M\", \"W\", deprecated \"JW\". ... arguments passed plm function used parameter estimation.","code":""},{"path":"/reference/estimate_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate single-case design — estimate_design","text":"list parameters single-case. Parameters include name, length, starting measurement time phase, trend, level, slope effects phase, start value, standard deviation, reliability case.","code":""},{"path":"/reference/estimate_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate single-case design — estimate_design","text":"","code":"# create a random scdf with predefined parameters set.seed(1234) design <- design(   n = 10, trend = -0.02,   level = list(0, 1), rtt = 0.8,   s = 1 ) scdf<- random_scdf(design)  # Estimate the parameters based on the scdf and create a new random scdf # based on these estimations design_est <- estimate_design(scdf, rtt = 0.8) scdf_est <- random_scdf(design_est)  # Analyze both datasets with an hplm model. See how similar the estimations # are: hplm(scdf, slope = FALSE) #> Hierarchical Piecewise Linear Regression #>  #> Estimation method ML  #> Contrast model: W / level: first, slope: first #> 10 Cases #>  #> AIC = 305.8896, BIC = 322.3812 #> ICC = 0.004; L = 0.0; p = 0.870  #>  #> Fixed effects (values ~ 1 + mt + phaseB) #>  #>                             B    SE  df       t     p #> Intercept              50.004 0.079 188 633.489 0.000 #> Trend (mt)             -0.024 0.009 188  -2.579 0.011 #> Level phase B (phaseB)  1.010 0.125 188   8.088 0.000 #>  #> Random effects (~1 | case) #>  #>              SD #> Intercept 0.088 #> Residual  0.501 hplm(scdf_est, slope = FALSE) #> Hierarchical Piecewise Linear Regression #>  #> Estimation method ML  #> Contrast model: W / level: first, slope: first #> 10 Cases #>  #> AIC = 424.4159, BIC = 440.9075 #> ICC = 0.071; L = 5.4; p = 0.020  #>  #> Fixed effects (values ~ 1 + mt + phaseB) #>  #>                             B    SE  df       t     p #> Intercept              50.068 0.120 188 416.805 0.000 #> Trend (mt)             -0.028 0.012 188  -2.254 0.025 #> Level phase B (phaseB)  1.011 0.165 188   6.125 0.000 #>  #> Random effects (~1 | case) #>  #>              SD #> Intercept 0.220 #> Residual  0.662  # Also similar results for pand and randomization tests: pand(scdf) #> Percentage of all non-overlapping data #>  #> Method: sort  #>  #> PAND = 84% #> Φ =  0.573  ; Φ² =  0.329  #>  #> 200 measurements (50 Phase A, 150 Phase B) in 10 cases #> Overlapping data: n = 32 ; percentage = 16  #>  #> 2 x 2 Matrix of percentages #>        A  B total #> A     17  8    25 #> B      8 67    75 #> total 25 75   100 #>  #> 2 x 2 Matrix of counts #>        A   B total #> A     34  16    50 #> B     16 134   150 #> total 50 150   200 #>  #>  #> Chi-Squared test: #> X² = 65.742, df = 1, p = 0.000  #>  #> Fisher exact test: #> Odds ratio = 17.393, p = 0.000  pand(scdf_est) #> Percentage of all non-overlapping data #>  #> Method: sort  #>  #> PAND = 79% #> Φ =  0.44  ; Φ² =  0.194  #>  #> 200 measurements (50 Phase A, 150 Phase B) in 10 cases #> Overlapping data: n = 42 ; percentage = 21  #>  #> 2 x 2 Matrix of percentages #>          A    B total #> A     14.5 10.5    25 #> B     10.5 64.5    75 #> total 25.0 75.0   100 #>  #> 2 x 2 Matrix of counts #>        A   B total #> A     29  21    50 #> B     21 129   150 #> total 50 150   200 #>  #>  #> Chi-Squared test: #> X² = 38.720, df = 1, p = 0.000  #>  #> Fisher exact test: #> Odds ratio = 8.360, p = 0.000  rand_test(scdf) #> Randomization Test #>  #> Combined test for 10 cases. #>  #> Comparing phase 1 against phase 2  #> Statistic:  Mean B-A  #>  #> Minimal length of each phase: A = 5 , B = 5  #> Observed statistic =  0.7679039  #>  #> Distribution based on a random sample of all 25937424601 possible combinations. #> n   =  500  #> M   =  0.3085513  #> SD  =  0.06906004  #> Min =  0.1427584  #> Max =  0.5118563  #>  #> Probability of an equal or higher value than the observed statistic: #> p   <  0.002  #>  #> Shapiro-Wilk Normality Test: W = 0.994; p = 0.037  (Hypothesis of normality rejected) #>  #> Probabilty of observed statistic based on the assumption of normality: #> z = 6.6515, p = 0.0000 (single sided) rand_test(scdf_est) #> Randomization Test #>  #> Combined test for 10 cases. #>  #> Comparing phase 1 against phase 2  #> Statistic:  Mean B-A  #>  #> Minimal length of each phase: A = 5 , B = 5  #> Observed statistic =  0.7314301  #>  #> Distribution based on a random sample of all 25937424601 possible combinations. #> n   =  500  #> M   =  0.269875  #> SD  =  0.07922479  #> Min =  0.08001321  #> Max =  0.5456197  #>  #> Probability of an equal or higher value than the observed statistic: #> p   <  0.002  #>  #> Shapiro-Wilk Normality Test: W = 0.992; p = 0.013  (Hypothesis of normality rejected) #>  #> Probabilty of observed statistic based on the assumption of normality: #> z = 5.8259, p = 0.0000 (single sided)"},{"path":"/reference/example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Single-case example data — example_data","title":"Single-case example data — example_data","text":"scan package comes set fictitious authentic single-case study data, courtesy particular authors.","code":""},{"path":"/reference/example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single-case example data — example_data","text":"Beretvas2008 Fictitious single-case intervention study. Reference: Beretvas, S., & Chung, H. (2008). evaluation modified R2-change effect size indices single-subject experimental designs. Evidence-Based Communication Assessment Intervention, 2, 120-128. Borckardt2014 Fictitious daily pain ratings evaluating psychological treatment. Reference: Borckardt, J. J., & Nash, M. R. (2014). Simulation modelling analysis small sets single-subject data collected time. Neuropsychological Rehabilitation, 24, 492-506. Huitema2000 Fictitious single-case intervention study. Reference: Huitema, B. E., & McKean, J. W. (2000). Design specification issues time-series intervention models. Educational Psychological Measurement, 60, 38-58. Waddell2011 Fictitious single-case intervention study. Reference: Waddell, D. E., Nassar, S. L., & Gustafson, S. . (2011). Single-Case Design Psychophysiological Research: Part II: Statistical Analytic Approaches. Journal Neurotherapy, 15, 160-169. byHeart2011 Multiple-baseline (11 cases) intervention study flash card vocabulary learning Juergen Wilbert. Grosche2011 Multiple-baseline (3 cases) intervention study direct-instructive reading intervention. Reference: Grosche, M. (2011). Effekte einer direkt-instruktiven Foerderung der Lesegenauigkeit. Empirische Sonderpaedagogik, 3, 147-161. Grosche2014 Multiple-baseline (3 cases x 3 materials) intervention study reading intervention. Reference: Grosche, M., Lueke, T., & Wilbert, J. (prep.). GruenkeWilbert2014 Multiple-baseline (6 cases) intervention study story mapping. Reference: Gruenke, M., Wilbert, J., & Stegemann-Calder, K. (2013). Analyzing effects story mapping reading comprehension children low intellectual abilities. Learning Disabilities: Contemporary Journal, 11, 51-64. Huber2014 Multiple-baseline (4 cases) intervention study behavioral compliance. Scores refer compliant behavior percent. Reference: Huber, C. (prep.). Lenz2013 Fictious example paper Lenz, . S. (2013). Calculating Effect Size Single-Case Research: Comparison Nonoverlap Methods. Measurement Evaluation Counseling Development, 46(1), 64–73. Leidig2018  Leidig2018_l2  SSDforR2017 Example R package SSDforR. Parker2011 Example Parker, R. ., Vannest, K. J., Davis, J. L., & Sauber, S. B. (2011). Combining Nonoverlap Trend Single-Case Research: Tau-U. Behavior Therapy, 42(2), 284–299. https://doi.org/10.1016/j.beth.2010.08.006","code":""},{"path":"/reference/example_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Single-case example data — example_data","text":"Juergen Wilbert","code":""},{"path":"/reference/export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export scan objects to html or latex — export","title":"Export scan objects to html or latex — export","text":"Export creates html files tables displays directly viewer pane rstudio. applied rmarkdown/quarto, tables can also created pdf/latex output.","code":""},{"path":"/reference/export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export scan objects to html or latex — export","text":"","code":"export(object, ...)  # S3 method for class 'sc_desc' export(   object,   caption = NA,   footnote = NA,   filename = NA,   flip = FALSE,   round = 2,   ... )  # S3 method for class 'sc_nap' export(   object,   caption = NA,   footnote = NA,   filename = NA,   select = c(\"Case\", \"NAP\", \"NAP Rescaled\", \"w\", \"p\", \"d\", \"R²\"),   round = 2,   ... )  # S3 method for class 'sc_overlap' export(   object,   caption = NA,   footnote = NULL,   filename = NA,   round = 2,   decimals = 2,   flip = FALSE,   ... )  # S3 method for class 'sc_pem' export(object, caption = NA, footnote = NA, filename = NA, round = 2, ...)  # S3 method for class 'sc_pet' export(object, caption = NA, footnote = NA, filename = NA, round = 1, ...)  # S3 method for class 'sc_pnd' export(   object,   caption = NA,   footnote = NA,   filename = NA,   select = c(\"Case\", \"PND\", \"Total\", \"Exceeds\"),   round = 2,   ... )  # S3 method for class 'sc_power' export(object, caption = NA, footnote = NA, filename = NA, round = 3, ...)  # S3 method for class 'sc_smd' export(   object,   caption = NA,   footnote = NA,   filename = NA,   select = c(\"Case\", `Mean A` = \"mA\", `Mean B` = \"mB\", `SD A` = \"sdA\", `SD B` = \"sdB\",     `SD Cohen` = \"sd cohen\", `SD Hedges` = \"sd hedges\", \"Glass' delta\", \"Hedges' g\",     \"Hedges' g correction\", \"Hedges' g durlak correction\", \"Cohen's d\"),   round = 2,   decimals = 2,   flip = FALSE,   ... )  # S3 method for class 'sc_trend' export(   object,   caption = NA,   footnote = NA,   filename = NA,   round = 3,   decimals = NULL,   ... )  # S3 method for class 'scdf' export(   object,   summary = FALSE,   caption = NA,   footnote = NA,   filename = NA,   cols,   round = 2,   ... )  # S3 method for class 'scdf_summary' export(object, caption = NA, footnote = NA, filename = NA, round = 2, ...)"},{"path":"/reference/export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export scan objects to html or latex — export","text":"object scdf object exported scan function. ... Arguments passed internal functions. caption Character string table caption. left NA (default) caption created based exported object. footnote Character string table footnote. left NA (default) footnote created based exported object. filename String containing file name. filename given output written file. flip TRUE, objects exported rows columns flipped. round Integer passed digits argument used round values. select character vector containing names variables included. vector named, variables renamed accordingly. decimals Decimal places reported. summary TRUE, exports summary scdf. cols Defines columns included exporting scdf. either vector variable names string \"main\" select central variables.","code":""},{"path":"/reference/export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export scan objects to html or latex — export","text":"Returns displays specially formatted html (latex) file.","code":""},{"path":"/reference/fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches elements from scan objects Getter function for scan objects — fetch","title":"Fetches elements from scan objects Getter function for scan objects — fetch","text":"Fetches elements scan objects Getter function scan objects","code":""},{"path":"/reference/fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches elements from scan objects Getter function for scan objects — fetch","text":"","code":"fetch(object, what, ...)"},{"path":"/reference/fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches elements from scan objects Getter function for scan objects — fetch","text":"object Object returned scan function. Element/part extracted. ... parameters passed function.","code":""},{"path":"/reference/fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches elements from scan objects Getter function for scan objects — fetch","text":"object respective regression model class.","code":""},{"path":"/reference/fill_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacing missing measurement times in single-case data — fill_missing","title":"Replacing missing measurement times in single-case data — fill_missing","text":"fillmissing() function replaces missing measurements single-case data.","code":""},{"path":"/reference/fill_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacing missing measurement times in single-case data — fill_missing","text":"","code":"fill_missing(data, dvar, mvar, na.rm = TRUE)"},{"path":"/reference/fill_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacing missing measurement times in single-case data — fill_missing","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. na.rm set TRUE, NA values also interpolated. Default na.rm = TRUE.","code":""},{"path":"/reference/fill_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacing missing measurement times in single-case data — fill_missing","text":"single-case data frame interpolated missing data points.  See scdf() learn SCDF Format.","code":""},{"path":"/reference/fill_missing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replacing missing measurement times in single-case data — fill_missing","text":"procedure recommended gaps measurement times (e.g. MT: 1, 2, 3, 4, 5, ... 8, 9) explicitly missing values single-case data want calculate overlap indices (overlap()) randomization test (rand_test()).","code":""},{"path":[]},{"path":"/reference/fill_missing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replacing missing measurement times in single-case data — fill_missing","text":"Juergen Wilbert","code":""},{"path":"/reference/fill_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replacing missing measurement times in single-case data — fill_missing","text":"","code":"## In his study, Grosche (2011) could not realize measurements each ## single week for all participants. During the course of 100 weeks, ## about 20 measurements per person at different times were administered.  ## Fill missing values in a single-case dataset with discontinuous ## measurement times Grosche2011filled <- fill_missing(Grosche2011) study <- c(Grosche2011[2], Grosche2011filled[2]) names(study) <- c(\"Original\", \"Filled\") plot(study) #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'plot'. #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'style_plot'.   ## Fill missing values in a single-case dataset that are NA Maggie <- random_scdf(design(level = list(0,1)), seed = 123) Maggie_n <- Maggie replace.positions <- c(10,16,18) Maggie_n[[1]][replace.positions,\"values\"] <- NA Maggie_f <- fill_missing(Maggie_n) study <- c(Maggie, Maggie_n, Maggie_f) names(study) <- c(\"original\", \"missing\", \"interpolated\") plot(study, marks = list(positions = replace.positions), style = \"grid2\") #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'plot'. #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'style_plot'."},{"path":"/reference/hplm.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical piecewise linear model / piecewise regression — hplm","title":"Hierarchical piecewise linear model / piecewise regression — hplm","text":"hplm() function computes hierarchical piecewise regression model.","code":""},{"path":"/reference/hplm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical piecewise linear model / piecewise regression — hplm","text":"","code":"hplm(   data,   dvar,   pvar,   mvar,   model = c(\"W\", \"H-M\", \"B&L-B\", \"JW\"),   contrast = c(\"first\", \"preceding\"),   contrast_level = NA,   contrast_slope = NA,   method = c(\"ML\", \"REML\"),   control = list(opt = \"optim\"),   random.slopes = FALSE,   lr.test = FALSE,   ICC = TRUE,   trend = TRUE,   level = TRUE,   slope = TRUE,   random_trend = FALSE,   random_level = FALSE,   random_slope = FALSE,   fixed = NULL,   random = NULL,   update.fixed = NULL,   data.l2 = NULL,   ... )  # S3 method for class 'sc_hplm' print(x, digits = 3, smd = FALSE, casewise = FALSE, ...)  # S3 method for class 'sc_hplm' export(   object,   caption = NA,   footnote = NA,   filename = NA,   round = 2,   nice = TRUE,   casewise = FALSE,   ... )  # S3 method for class 'sc_hplm' coef(object, casewise = FALSE, ...)"},{"path":"/reference/hplm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical piecewise linear model / piecewise regression — hplm","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. model Model used calculating dummy parameters (see Huitema & McKean, 2000). Default model = \"W\". Possible values : \"B&L-B\", \"H-M\", \"W\", deprecated \"JW\". contrast Sets contrast_level contrast_slope. Either \"first\", \"preceding\" contrast matrix. contrast_level Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. contrast_slope Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. method Method used fit model. Pass \"REML\" maximize restricted log-likelihood \"ML\" maximized log-likelihood. Default \"ML\". control list settings estimation algorithm, replacing default values passed function lmeControl nlme package. random.slopes random.slopes = TRUE random slope effects level, trend, treatment parameter estimated. lr.test set TRUE likelihood ratio tests calculated comparing model vs. without random slope parameters. ICC ICC = TRUE intraclass-correlation estimated. trend logical indicating trend parameters included model. level logical indicating level parameters included model. slope logical indicating slope parameters included model. random_trend TRUE, includes random trend trend effect. random_level TRUE, includes random level trend effect. random_slope TRUE, includes random slope trend effect. fixed Defaults fixed part standard piecewise regression model. parameter phase followed phase name (e.g., phaseB) indicates level effect corresponding phase. parameter 'inter' followed phase name (e.g., interB) adresses slope effect based method provide model argument (e.g., \"B&L-B\"). formula can changed example include L1 L2 variables regression model. random random part model. update.fixed easier way change fixed model part (e.g., . ~ . + newvariable). data.l2 data frame providing additional variables Level 2. scdf File names cases Level 2 data frame column named 'cases' names cases Level 2 variables belong . ... arguments passed lme function. x object returned hplm() digits minimum number significant digits use. set \"auto\" (default), values predefined. smd TRUE, reports -case standardized mean differences. casewise Returns estimations case object scdf object exported scan function. caption Character string table caption. left NA (default) caption created based exported object. footnote Character string table footnote. left NA (default) footnote created based exported object. filename String containing file name. filename given output written file. round Integer passed digits argument used round values. nice set TRUE (default) output values rounded optimized publication tables.","code":""},{"path":[]},{"path":"/reference/hplm.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Hierarchical piecewise linear model / piecewise regression — hplm","text":"print(sc_hplm): Print results export(sc_hplm): Export results html table (see export()) coef(sc_hplm): Extract model coefficients","code":""},{"path":[]},{"path":"/reference/hplm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hierarchical piecewise linear model / piecewise regression — hplm","text":"Juergen Wilbert","code":""},{"path":"/reference/hplm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical piecewise linear model / piecewise regression — hplm","text":"","code":"## Compute hplm model on a MBD over fifty cases (restricted log-likelihood) hplm(exampleAB_50, method = \"REML\", random.slopes = FALSE) #> Hierarchical Piecewise Linear Regression #>  #> Estimation method REML  #> Contrast model: W / level: first, slope: first #> 50 Cases #>  #> AIC = 8764.5, BIC = 8795.866 #> ICC = 0.292; L = 341.2; p = 0.000  #>  #> Fixed effects (values ~ 1 + mt + phaseB + interB) #>  #>                             B    SE   df      t p #> Intercept              48.398 1.496 1328 32.351 0 #> Trend (mt)              0.579 0.116 1328  5.007 0 #> Level phase B (phaseB) 14.038 0.655 1328 21.442 0 #> Slope phase B (interB)  0.902 0.119 1328  7.589 0 #>  #> Random effects (~1 | case) #>  #>               SD #> Intercept 10.073 #> Residual   5.290  ## Analyzing with additional L2 variables Leidig2018 |>   add_l2(Leidig2018_l2) |>   hplm(update.fixed = .~. + gender + migration + ITRF_TOTAL*phaseB,        slope = FALSE, random.slopes = FALSE, lr.test = FALSE   ) #> Hierarchical Piecewise Linear Regression #>  #> Estimation method ML  #> Contrast model: W / level: first, slope: first #> 35 Cases #>  #> AIC = 5827.167, BIC = 5879.268 #> ICC = 0.344; L = 875.4; p = 0.000  #>  #> Fixed effects (academic_engagement ~ mt + phaseB + gender + migration + ITRF_TOTAL +     phaseB:ITRF_TOTAL) #>  #>                                        B    SE   df      t     p #> Intercept                          3.751 0.262 2376 14.302 0.000 #> Trend (mt)                         0.004 0.001 2376  6.019 0.000 #> Level phase B (phaseB)             0.667 0.098 2376  6.808 0.000 #> gender                            -0.020 0.301   31 -0.067 0.947 #> migration                         -0.300 0.193   31 -1.556 0.130 #> ITRF_TOTAL                        -0.035 0.013   31 -2.674 0.012 #> Level phase B (phaseB):ITRF_TOTAL -0.001 0.005 2376 -0.279 0.780 #>  #> Random effects (~1 | case) #>  #>              SD #> Intercept 0.557 #> Residual  0.785"},{"path":"/reference/ird.html","id":null,"dir":"Reference","previous_headings":"","what":"IRD - Improvement rate difference — ird","title":"IRD - Improvement rate difference — ird","text":"ird() calculates robust improvement rate difference proposed Parker colleagues (2011).","code":""},{"path":"/reference/ird.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IRD - Improvement rate difference — ird","text":"","code":"ird(data, dvar, pvar, decreasing = FALSE, phases = c(1, 2))  # S3 method for class 'sc_ird' print(x, digits = 3, ...)"},{"path":"/reference/ird.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IRD - Improvement rate difference — ird","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. decreasing expect data lower B phase, set decreasing = TRUE. Default decreasing = FALSE. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2). x object returned ird() digits minimum number significant digits use. ... arguments passed function.","code":""},{"path":"/reference/ird.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IRD - Improvement rate difference — ird","text":"adaptation improvement rate difference single-case phase comparisons developed Parker colleagues (2009). variation called robust improvement rate difference proposed Parker colleagues 2011. function calculates robust improvement rate difference. follows formula suggested Pustejovsky (2019). multiple case design, ird based overall improvement rate cases average irds case.","code":""},{"path":"/reference/ird.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"IRD - Improvement rate difference — ird","text":"print(sc_ird): Print results","code":""},{"path":"/reference/ird.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IRD - Improvement rate difference — ird","text":"Parker, R. ., Vannest, K. J., & Brown, L. (2009). improvement rate difference single-case research. Exceptional Children, 75(2), 135-150. Parker, R. ., Vannest, K. J., & Davis, J. L. (2011). Effect Size Single-Case Research: Review Nine Nonoverlap Techniques. Behavior Modification, 35(4), 303-322. https://doi.org/10.1177/0145445511399147 Pustejovsky, J. E. (2019). Procedural sensitivities effect sizes single-case designs directly observed behavioral outcome measures. Psychological Methods, 24(2), 217-235. https://doi.org/10.1037/met0000179","code":""},{"path":[]},{"path":"/reference/is.scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"scdf objects Tests for objects of type ","title":"scdf objects Tests for objects of type ","text":"scdf objects Tests objects type \"scdf\"","code":""},{"path":"/reference/is.scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scdf objects Tests for objects of type ","text":"","code":"is.scdf(x)"},{"path":"/reference/is.scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scdf objects Tests for objects of type ","text":"x object tested","code":""},{"path":"/reference/is.scdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"scdf objects Tests for objects of type ","text":"Returns TRUE FALSE depending whether argument scdf type .","code":""},{"path":"/reference/mplm.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Piecewise linear model / piecewise regression — mplm","title":"Multivariate Piecewise linear model / piecewise regression — mplm","text":"mplm() function computes multivariate piecewise regression model.","code":""},{"path":"/reference/mplm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate Piecewise linear model / piecewise regression — mplm","text":"","code":"mplm(   data,   dvar,   mvar,   pvar,   model = c(\"W\", \"H-M\", \"B&L-B\", \"JW\"),   contrast = c(\"first\", \"preceding\"),   contrast_level = c(NA, \"first\", \"preceding\"),   contrast_slope = c(NA, \"first\", \"preceding\"),   trend = TRUE,   level = TRUE,   slope = TRUE,   formula = NULL,   update = NULL,   na.action = na.omit,   ... )  # S3 method for class 'sc_mplm' print(x, digits = \"auto\", std = FALSE, ...)  # S3 method for class 'sc_mplm' export(   object,   caption = NA,   footnote = NA,   filename = NA,   nice = TRUE,   std = FALSE,   decimals = 2,   ... )"},{"path":"/reference/mplm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate Piecewise linear model / piecewise regression — mplm","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. model Model used calculating dummy parameters (see Huitema & McKean, 2000). Default model = \"W\". Possible values : \"B&L-B\", \"H-M\", \"W\", deprecated \"JW\". contrast Sets contrast_level contrast_slope. Either \"first\", \"preceding\" contrast matrix. contrast_level Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. contrast_slope Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. trend logical indicating trend parameters included model. level logical indicating level parameters included model. slope logical indicating slope parameters included model. formula Defaults standard piecewise regression model. parameter phase followed phase name (e.g., phaseB) indicates level effect corresponding phase. parameter 'inter' followed phase name (e.g., interB) adresses slope effect based method provide model argument (e.g., \"B&L-B\"). formula can changed example include variables regression model. update easier way change regression formula (e.g., . ~ . + newvariable). na.action Defines deal missing values. ... arguments passed lm() function. x Object returned mplm(). digits minimum number significant digits use. set \"auto\" (default), values predefined. std TRUE, table standardized estimates included. object scdf object exported scan function. caption Character string table caption. left NA (default) caption created based exported object. footnote Character string table footnote. left NA (default) footnote created based exported object. filename String containing file name. filename given output written file. nice set TRUE (default) output values rounded optimized publication tables. decimals Decimal places reported.","code":""},{"path":[]},{"path":"/reference/mplm.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Multivariate Piecewise linear model / piecewise regression — mplm","text":"print(sc_mplm): Print results export(sc_mplm): Export results html","code":""},{"path":[]},{"path":"/reference/mplm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multivariate Piecewise linear model / piecewise regression — mplm","text":"Juergen Wilbert","code":""},{"path":"/reference/mplm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate Piecewise linear model / piecewise regression — mplm","text":"","code":"res <- mplm(Leidig2018$`1a1`,   dvar = c(\"academic_engagement\", \"disruptive_behavior\") ) print(res) #> Multivariate piecewise linear model #>  #> Dummy model: W level = first, slope = first #> Type III MANOVA  #> Pillai = 0.35; F(6, 158) = 5.57; p = 0.000  #>  #>                        academic_engagement disruptive_behavior Pillai      F #> Intercept                            2.771               0.849  0.284 15.475 #> Trend (mt)                          -0.216               0.082  0.032  1.275 #> Level phase B (phaseB)               2.340              -1.390  0.190  9.176 #> Slope phase B (interB)               0.219              -0.080  0.031  1.267 #>                            p #> Intercept              0.000 #> Trend (mt)             0.285 #> Level phase B (phaseB) 0.000 #> Slope phase B (interB) 0.287 #>  #> Formula: y ~ 1 + mt + phaseB + interB ## also report standardized coefficients: print(res, std = TRUE) #> Multivariate piecewise linear model #>  #> Dummy model: W level = first, slope = first #> Type III MANOVA  #> Pillai = 0.35; F(6, 158) = 5.57; p = 0.000  #>  #>                        academic_engagement disruptive_behavior Pillai      F #> Intercept                            0.000               0.000  0.284 15.475 #> Trend (mt)                          -5.979               5.107  0.032  1.275 #> Level phase B (phaseB)               0.576              -0.767  0.190  9.176 #> Slope phase B (interB)               5.950              -4.897  0.031  1.267 #>                            p #> Intercept              0.000 #> Trend (mt)             0.285 #> Level phase B (phaseB) 0.000 #> Slope phase B (interB) 0.287 #>  #> Coefficients are standardized #> Formula: y ~ 1 + mt + phaseB + interB"},{"path":"/reference/na.omit.scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"scdf objects Removes any row with a missing value — na.omit.scdf","title":"scdf objects Removes any row with a missing value — na.omit.scdf","text":"scdf objects Removes row missing value","code":""},{"path":"/reference/na.omit.scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scdf objects Removes any row with a missing value — na.omit.scdf","text":"","code":"# S3 method for class 'scdf' na.omit(object, ...)"},{"path":"/reference/na.omit.scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scdf objects Removes any row with a missing value — na.omit.scdf","text":"object scdf. ... implemented yet.","code":""},{"path":"/reference/na.omit.scdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"scdf objects Removes any row with a missing value — na.omit.scdf","text":"scdf object.","code":""},{"path":"/reference/nap.html","id":null,"dir":"Reference","previous_headings":"","what":"Nonoverlap of all Pairs — nap","title":"Nonoverlap of all Pairs — nap","text":"nap() function calculates nonoverlap pairs (NAP; Parker & Vannest, 2009).  NAP summarizes overlap pairs phase phase B data points.  increase phase B scores expected, non-overlapping pair higher phase B data point. NAP equals number pairs showing overlap / number pairs ties counted half non-overlaps.  NAP can take values 0 100 percent values 50 percent indicate inverse effect, nap rescaled -100 100 percent negative values indicate inverse effect also displayed (\\(nap_{rescaled} = 2 * nap - 100\\)).","code":""},{"path":"/reference/nap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nonoverlap of all Pairs — nap","text":"","code":"nap(data, dvar, pvar, decreasing = FALSE, phases = c(1, 2))"},{"path":"/reference/nap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nonoverlap of all Pairs — nap","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. decreasing expect data lower B phase, set decreasing = TRUE. Default decreasing = FALSE. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2).","code":""},{"path":[]},{"path":"/reference/nap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Nonoverlap of all Pairs — nap","text":"Parker, R. ., & Vannest, K. (2009). improved effect size single-case research: Nonoverlap pairs. Behavior Therapy, 40, 357-367.","code":""},{"path":[]},{"path":"/reference/nap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Nonoverlap of all Pairs — nap","text":"Juergen Wilbert","code":""},{"path":"/reference/nap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nonoverlap of all Pairs — nap","text":"","code":"## Calculate NAP for a study with  lower expected phase B scores ## (e.g. aggressive behavior) gretchen <- scdf(c(A = 12, 14, 9, 10, B = 10, 6, 4, 5, 3, 4)) nap(gretchen, decreasing = TRUE) #> Nonoverlap of All Pairs #>  #>       Case NAP NAP Rescaled  w    p   d   R² #>  [case #1]  94           88 22 <.05 2.2 0.56  ## Request NAP for all cases from the Grosche2011 scdf nap(Grosche2011) #> Nonoverlap of All Pairs #>  #>   Case NAP NAP Rescaled  w   p      d     R² #>    Eva  69         38.5 24 .10  0.747 0.1223 #>  Georg  48         -4.2 62 .57 -0.072 0.0013 #>   Olaf  45        -10.4 53 .66 -0.176 0.0077"},{"path":"/reference/outlier.html","id":null,"dir":"Reference","previous_headings":"","what":"Handling outliers in single-case data — outlier","title":"Handling outliers in single-case data — outlier","text":"Identifies drops outliers within single-case data frame (scdf).","code":""},{"path":"/reference/outlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handling outliers in single-case data — outlier","text":"","code":"outlier(   data,   dvar,   pvar,   mvar,   method = c(\"MAD\", \"Cook\", \"SD\", \"CI\"),   criteria = 3.5 )"},{"path":"/reference/outlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handling outliers in single-case data — outlier","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. method Specifies method outlier identification. Set method = \"MAD\" mean average deiviation, method = \"SD\" standard deviations, method = \"CI\" confidence intervals, method = \"Cook\" Cook's Distance based Piecewise Linear Regression Model. criteria Specifies criteria outlier identification. Based method setting.","code":""},{"path":[]},{"path":"/reference/outlier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handling outliers in single-case data — outlier","text":"method = \"SD\", criteria = 2 refer t0 two standard deviations. method = \"MAD\", criteria = 3.5 refer 3.5 times mean average deviation. method = \"CI\", criteria = 0.99 refer 99 percent confidence interval. method = \"cook\", criteria = \"4/n\" refer Cook's Distance greater 4/n.","code":""},{"path":[]},{"path":"/reference/outlier.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Handling outliers in single-case data — outlier","text":"Juergen Wilbert","code":""},{"path":"/reference/outlier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handling outliers in single-case data — outlier","text":"","code":"## Identify outliers using 1.5 standard deviations as criterion susanne <- random_scdf(level = 1.0) res_outlier <- outlier(susanne, method = \"SD\", criteria = 1.5) res_outlier #> Outlier Analysis for Single-Case Data #>  #> Case [case #1] : Dropped 2  #>   ## Identify outliers in the original data from Grosche (2011) ## using Cook's Distance greater than 4/n as criterion res_outlier <- outlier(Grosche2011, method = \"Cook\", criteria = \"4/n\") res_outlier #> Outlier Analysis for Single-Case Data #>  #> Case Eva : Dropped 1  #> Case Georg : Dropped 3  #> Case Olaf : Dropped 2  #>"},{"path":"/reference/overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlap indices for single-case data — overlap","title":"Overlap indices for single-case data — overlap","text":"overlap function provides common overlap indices single-case data additional statistics.","code":""},{"path":"/reference/overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlap indices for single-case data — overlap","text":"","code":"overlap(data, dvar, pvar, mvar, decreasing = FALSE, phases = c(1, 2))"},{"path":"/reference/overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlap indices for single-case data — overlap","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. decreasing expect data lower B phase, set decreasing = TRUE. Default decreasing = FALSE. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2).","code":""},{"path":[]},{"path":"/reference/overlap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Overlap indices for single-case data — overlap","text":"See corresponding functions PND, PEM, PET, NAP, PAND calculation. Tau_U() reports \"vs. B - Trend \" whereas Tau_U(BA) reports \"vs. B + Trend B - Trend \". Base_Tau baseline corrected tau (correction applied autocorrelation phase significant). Diff_mean mean difference. Diff_trend difference regression estimation dependent variable measurement-time (x ~ mt) phase. SMD mean difference divided standard deviation phase . Hedges_g mean difference divided pooled standard deviation: \\(\\sqrt{ (n_A - 1)sd_A^2 + (n_B - 1)sd_B^2 \\n_A   + n_B - 2 }\\) hedges correction applied: \\(Hedges_g * (1 -   \\frac{3}{4n - 9} ) )\\).","code":""},{"path":[]},{"path":"/reference/overlap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Overlap indices for single-case data — overlap","text":"Juergen Wilbert","code":""},{"path":"/reference/overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overlap indices for single-case data — overlap","text":"","code":"## Display overlap indices for one single-case overlap(Huitema2000, decreasing = TRUE) #> Overlap Indices #>  #> Comparing phase 1 against phase 2  #>  #>              [case #1] #> Design             A-B #> PND                 40 #> PEM                 70 #> PET                100 #> NAP                 70 #> NAP rescaled        40 #> PAND                60 #> IRD                0.4 #> Tau_U(A)         -0.51 #> Tau_U(BA)        -0.69 #> Base_Tau         -0.73 #> Diff_mean        -20.4 #> Diff_trend      -17.87 #> SMD               -0.9 #> Hedges_g         -0.71 #>  #> The following variables were used in this analysis: #> 'score' as dependent variable, 'phase' as phase variable, and 'mt' as measurement-time variable.  ## Display overlap indices for six single-cases overlap(GruenkeWilbert2014) #> Overlap Indices #>  #> Comparing phase 1 against phase 2  #>  #>              Anton   Bob  Paul Robert   Sam   Tim #> Design         A-B   A-B   A-B    A-B   A-B   A-B #> PND            100   100   100    100   100   100 #> PEM            100   100   100    100   100   100 #> PET            100   100   100    100   100   100 #> NAP            100   100   100    100   100   100 #> NAP rescaled   100   100   100    100   100   100 #> PAND           100   100   100    100   100   100 #> IRD              1     1     1      1     1     1 #> Tau_U(A)      0.67  0.66  0.75   0.68  0.65  0.68 #> Tau_U(BA)     0.48  0.57  0.60   0.49  0.51  0.35 #> Base_Tau      0.67  0.77  0.75   0.77  0.72  0.66 #> Diff_mean     4.14  5.82  5.00   4.78  4.48  6.00 #> Diff_trend    0.43  0.00  0.28  -0.08 -0.07  0.60 #> SMD           5.07  7.13  6.64   5.72  8.17  7.35 #> Hedges_g      5.06  6.50  6.53   4.90  5.36  6.11 #>  #> The following variables were used in this analysis: #> 'score' as dependent variable, 'phase' as phase variable, and 'mt' as measurement-time variable.  ## Combining phases for analyszing designs with more than two phases overlap(exampleA1B1A2B2, phases = list(c(\"A1\",\"A2\"), c(\"B1\",\"B2\"))) #> Overlap Indices #>  #> Comparing phases A1 + A2 against phases B1 + B2  #>  #>                    Pawel      Moritz      Jannis #> Design       A1-B1-A2-B2 A1-B1-A2-B2 A1-B1-A2-B2 #> PND                   55          78          71 #> PEM                  100         100         100 #> PET                  100         100         100 #> NAP                   94          97          98 #> NAP rescaled          89          94          97 #> PAND                  85          85          90 #> IRD                 0.75        0.80        0.89 #> Tau_U(A)            0.54        0.44        0.43 #> Tau_U(BA)           0.45        0.46        0.38 #> Base_Tau            0.65        0.68        0.68 #> Diff_mean          12.25       13.58       15.27 #> Diff_trend         -0.05        0.00       -0.54 #> SMD                 2.68        3.27        3.62 #> Hedges_g            2.07        2.72        2.98"},{"path":"/reference/pand.html","id":null,"dir":"Reference","previous_headings":"","what":"Percentage of all non-overlapping data — pand","title":"Percentage of all non-overlapping data — pand","text":"pand() function calculates percentage non-overlapping data (PAND; Parker, Hagan-Burke, & Vannest, 2007), index quantify level increase (decrease) performance onset intervention.","code":""},{"path":"/reference/pand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percentage of all non-overlapping data — pand","text":"","code":"pand(   data,   dvar,   pvar,   decreasing = FALSE,   phases = c(1, 2),   method = c(\"sort\", \"minimum\") )  # S3 method for class 'sc_pand' print(x, ...)  # S3 method for class 'sc_pand' export(object, caption = NA, footnote = NA, filename = NA, round = 1, ...)"},{"path":"/reference/pand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percentage of all non-overlapping data — pand","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. decreasing expect data lower B phase, set decreasing = TRUE. Default decreasing = FALSE. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2). method Either \"sort\"\" \"minimum\". See details. x object returned pand() ... arguments passed function. object scdf object exported scan function. caption Character string table caption. left NA (default) caption created based exported object. footnote Character string table footnote. left NA (default) footnote created based exported object. filename String containing file name. filename given output written file. round Integer passed digits argument used round values.","code":""},{"path":[]},{"path":"/reference/pand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Percentage of all non-overlapping data — pand","text":"PAND proposed Parker, Hagan-Burke, Vannest 2007. authors emphasize PAND designed application multiple case design substantial number measurements, technically least 20 25, preferably 60 . PAND defined 100% minus percentage data points need removed either phase order ensure nonoverlap phases. Several approaches suggested calculate PAND, leading potentially different outcomes. 2007 paper, Parker colleagues present algorithm computing PAND. algorithm involves sorting scores time series, including associated phases, comparing resulting phase order original phase order using contingency table. account ties, algorithm includes randomization process ties randomly assigned one two phases. Consequently, executing algorithm multiple times yield different results. important note algorithm produce results PAND definition provided earlier paper. However, offers advantage allowing calculation effect size measure phi, application statistical tests frequency distributions. Pustejovsky (2019) presented mathematical formulation Parker's original definition comparing two phases single case: $$PAND = \\frac{1}{m+n}max\\{(+j)(y^A_{}<y^B_{n+1-j}\\}$$ formulation provides accurate results PAND, original definition drawback unknown distribution null hypothesis, making statistical test difficult. pand() function enables calculation PAND using methods. first approach (method = \"sort\") follows algorithm described , exclusion randomization sorting avoid ambiguity. calculates phi measure provides results chi-squared test Fisher exact test. second approach (method = \"minimum\") applies aforementioned formula. code function based code SingleCaseES package (function calc_PAND). multiple case design, overlaps calculated case, summed, divided total number measurements. statistical test conducted method.","code":""},{"path":"/reference/pand.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Percentage of all non-overlapping data — pand","text":"print(sc_pand): Print results export(sc_pand): Export results html table (see export())","code":""},{"path":"/reference/pand.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Percentage of all non-overlapping data — pand","text":"Parker, R. ., Hagan-Burke, S., & Vannest, K. (2007). Percentage Non-Overlapping Data (PAND): Alternative PND. Journal Special Education, 40, 194-204. Parker, R. ., & Vannest, K. (2009). Improved Effect Size Single-Case Research: Nonoverlap Pairs. Behavior Therapy, 40, 357-367. Pustejovsky, J. E. (2019). Procedural sensitivities effect sizes single-case designs directly observed behavioral outcome measures. Psychological Methods, 24(2), 217-235. https://doi.org/10.1037/met0000179 Pustejovsky JE, Chen M, Swan DM (2023). SingleCaseES: Calculator Single-Case Effect Sizes. R package version 0.7.1.9999, https://jepusto.github.io/SingleCaseES/.","code":""},{"path":[]},{"path":"/reference/pand.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Percentage of all non-overlapping data — pand","text":"Juergen Wilbert","code":""},{"path":"/reference/pand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percentage of all non-overlapping data — pand","text":"","code":"## REplication of the Parker et al. 2007 example pand(Parker2007) #> Percentage of all non-overlapping data #>  #> Method: sort  #>  #> PAND = 85.7% #> Φ =  0.713  ; Φ² =  0.508  #>  #> 28 measurements (13 Phase A, 15 Phase B) in 3 cases #> Overlapping data: n = 4 ; percentage = 14.3  #>  #> 2 x 2 Matrix of percentages #>          A    B total #> A     39.3  7.1  46.4 #> B      7.1 46.4  53.6 #> total 46.4 53.6 100.0 #>  #> 2 x 2 Matrix of counts #>        A  B total #> A     11  2    13 #> B      2 13    15 #> total 13 15    28 #>  #>  #> Chi-Squared test: #> X² = 14.227, df = 1, p = 0.000  #>  #> Fisher exact test: #> Odds ratio = 29.007, p = 0.000   ## Calculate the PAND with an expected decrease of phase B scores cubs <- scdf(c(20,22,24,17,21,13,10,9,20,9,18), B_start = 5) pand(cubs, decreasing = TRUE) #> Percentage of all non-overlapping data #>  #> Method: sort  #>  #> PAND = 63.6% #> Φ =  0.214  ; Φ² =  0.046  #>  #> 11 measurements (4 Phase A, 7 Phase B) in 1 cases #> Overlapping data: n = 4 ; percentage = 36.4  #>  #> 2 x 2 Matrix of percentages #>          A    B total #> A     18.2 18.2  36.4 #> B     18.2 45.5  63.6 #> total 36.4 63.6 100.0 #>  #> 2 x 2 Matrix of counts #>       A B total #> A     2 2     4 #> B     2 5     7 #> total 4 7    11 #>  #>  #> Chi-Squared test: #> X² = 0.505, df = 1, p = 0.477  #>  #> Fisher exact test: #> Odds ratio = 2.288, p = 0.576"},{"path":"/reference/pem.html","id":null,"dir":"Reference","previous_headings":"","what":"Percent exceeding the median — pem","title":"Percent exceeding the median — pem","text":"pem function returns percentage phase B data exceeding phase median.  Additionally, chi square test 50/50 distribution computed.  Different measures central tendency can addressed alternative analyses.","code":""},{"path":"/reference/pem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percent exceeding the median — pem","text":"","code":"pem(   data,   dvar,   pvar,   decreasing = FALSE,   binom.test = TRUE,   chi.test = FALSE,   FUN = median,   phases = c(1, 2),   ... )"},{"path":"/reference/pem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percent exceeding the median — pem","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. decreasing expect data lower B phase, set decreasing = TRUE. Default decreasing = FALSE. binom.test Computes binomial test 50/50 distribution. Default binom.test = TRUE. chi.test Computes Chi-square test. default setting chi.test = FALSE skips Chi-square test. FUN Data points compared phase median. Use argument implement alternative measures central tendency. Default FUN = median phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2). ... Additional arguments FUN parameter (e.g. FUN = mean, trim = 0.1 use 10 percent trimmed arithmetic mean instead median comparisons). function must take vector numeric values na.rm argument return numeric value.","code":""},{"path":[]},{"path":"/reference/pem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Percent exceeding the median — pem","text":"Juergen Wilbert","code":""},{"path":"/reference/pem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percent exceeding the median — pem","text":"","code":"## Calculate the PEM including the Binomial and Chi-square tests for a single-case dat <- random_scdf(5, level = 0.5) #> Warning: The first argument is expected to be a design matrix created by design(). If you want to set n, please name the first argument with n = ... pem(dat, chi.test = TRUE) #> Percent Exceeding the Median #>  #>       Case PEM positives total  binom.p Chi DF        p #>  [case #1] 100        15    15 3.05e-05  15  1 0.000108 #>  #> Alternative hypothesis: true probability > 50%"},{"path":"/reference/pet.html","id":null,"dir":"Reference","previous_headings":"","what":"Percent exceeding the trend — pet","title":"Percent exceeding the trend — pet","text":"pet function returns percentage Phase B data points exceed prediction based Phase trend. binomial test 50/50 distribution calculated. also calculates percentage Phase B data points exceed upper (lower) 95 percent confidence interval predicted progression.","code":""},{"path":"/reference/pet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percent exceeding the trend — pet","text":"","code":"pet(data, dvar, pvar, mvar, ci = 0.95, decreasing = FALSE, phases = c(1, 2))"},{"path":"/reference/pet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percent exceeding the trend — pet","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. ci Width confidence interval. Default ci = 0.95. decreasing expect data lower B phase, set decreasing = TRUE. Default decreasing = FALSE. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2).","code":""},{"path":[]},{"path":[]},{"path":"/reference/pet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Percent exceeding the trend — pet","text":"Juergen Wilbert","code":""},{"path":"/reference/pet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percent exceeding the trend — pet","text":"","code":"## Calculate the PET and use a 99%-CI for the additional calculation # create random example data design <- design(n = 5, slope = 0.2) dat <- random_scdf(design, seed = 23) pet(dat, ci = .99) #> Percent Exceeding the Trend #>  #>  #>       Case   PET PET CI  binom.p #>  [case #1]  13.3    0.0 1.00e+00 #>  [case #2] 100.0   53.3 3.05e-05 #>  [case #3] 100.0   93.3 3.05e-05 #>  [case #4]   0.0    0.0 1.00e+00 #>  [case #5]  80.0    0.0 1.76e-02 #>  #> Binom.test: alternative hypothesis: true probability > 50% #> PET CI: Percent of values greater than upper 99% confidence threshold (single sided)"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe — %>%","title":"Pipe — %>%","text":"Several functions scan designed work pipes \\%>\\%. pipe function directly imported magrittr.","code":""},{"path":"/reference/pipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pipe — %>%","text":"Since R 4.1 pipe operator |> included base R. pipe operator can used along scan perfectly fine.","code":""},{"path":"/reference/plm.html","id":null,"dir":"Reference","previous_headings":"","what":"Piecewise linear model / piecewise regression — plm","title":"Piecewise linear model / piecewise regression — plm","text":"plm function computes piecewise regression model (see Huitema & McKean, 2000).","code":""},{"path":"/reference/plm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Piecewise linear model / piecewise regression — plm","text":"","code":"plm(   data,   dvar,   pvar,   mvar,   AR = 0,   model = c(\"W\", \"H-M\", \"B&L-B\", \"JW\"),   family = \"gaussian\",   trend = TRUE,   level = TRUE,   slope = TRUE,   contrast = c(\"first\", \"preceding\"),   contrast_level = c(NA, \"first\", \"preceding\"),   contrast_slope = c(NA, \"first\", \"preceding\"),   formula = NULL,   update = NULL,   na.action = na.omit,   r_squared = TRUE,   var_trials = NULL,   dvar_percentage = FALSE,   ... )  # S3 method for class 'sc_plm' print(   x,   lag_max = 3,   ci = 0.95,   q = FALSE,   r_squared = getOption(\"scan.rsquared\"),   ... )  # S3 method for class 'sc_plm' export(   object,   caption = NA,   footnote = NA,   filename = NA,   nice = TRUE,   ci = 0.95,   q = FALSE,   round = 2,   r_squared = getOption(\"scan.rsquared\"),   ... )"},{"path":"/reference/plm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Piecewise linear model / piecewise regression — plm","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. AR Maximal lag autoregression. Modelled based Autoregressive-Moving Average (ARMA) function.  AR set, family argument must set family = \"gaussian\". model Model used calculating dummy parameters (see Huitema & McKean, 2000). Default model = \"W\". Possible values : \"B&L-B\", \"H-M\", \"W\", deprecated \"JW\". family Set distribution family. Defaults gaussian distribution. See family function details. trend logical indicating trend parameters included model. level logical indicating level parameters included model. slope logical indicating slope parameters included model. contrast Sets contrast_level contrast_slope. Either \"first\", \"preceding\" contrast matrix. contrast_level Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. contrast_slope Either \"first\", \"preceding\" contrast matrix. NA contrast_level copy contrast. formula Defaults standard piecewise regression model. parameter phase followed phase name (e.g., phaseB) indicates level effect corresponding phase. parameter 'inter' followed phase name (e.g., interB) adresses slope effect based method provide model argument (e.g., \"B&L-B\"). formula can changed example include variables regression model. update easier way change regression formula (e.g., . ~ . + newvariable). na.action Defines deal missing values. r_squared Either \"delta\", \"partial\", \"none\". var_trials Name variable containing number trials (binomial regressions). single integer provided considered constant number trials across measurements. dvar_percentage binomial distribution. set TRUE, dependent variable assumed represent proportions [0,1]. Otherwise dvar assumed represent counts. ... arguments passed glm function. x Object lag_max Maximum lag reported autocorrelation residuals. Default 3. Set FALSE report autocorrelations. ci Print confidence intervals. Either FALSE, TRUE number 0 1 (0.90 90% intervals). q Logical. set TRUE, Yule's Q reported. object scdf object exported scan function. caption Character string table caption. left NA (default) caption created based exported object. footnote Character string table footnote. left NA (default) footnote created based exported object. filename String containing file name. filename given output written file. nice set TRUE (default) output values rounded optimized publication tables. round Integer passed digits argument used round values.","code":""},{"path":"/reference/plm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Piecewise linear model / piecewise regression — plm","text":"formula plm formula. Uselful want use update formula argument know names parameters. model Character string function call (see Arguments ). F.test F-test values modelfit. r.squares Explained variance R squared model parameter. ar Autoregression lag function call (see Arguments ). family Distribution family function call (see Arguments ). full.model Full regression model list gls glm function.","code":""},{"path":"/reference/plm.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Piecewise linear model / piecewise regression — plm","text":"print(sc_plm): Print export(sc_plm): Export results html table (see export())","code":""},{"path":"/reference/plm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Piecewise linear model / piecewise regression — plm","text":"Beretvas, S., & Chung, H. (2008). evaluation modified R2-change effect size indices single-subject experimental designs. Evidence-Based Communication Assessment Intervention, 2, 120-128. Huitema, B. E., & McKean, J. W. (2000). Design specification issues time-series intervention models. Educational Psychological Measurement, 60, 38-58.","code":""},{"path":[]},{"path":"/reference/plm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Piecewise linear model / piecewise regression — plm","text":"Juergen Wilbert","code":""},{"path":"/reference/plm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Piecewise linear model / piecewise regression — plm","text":"","code":"## Compute a piecewise regression model for a random single-case set.seed(123) AB <- design(   phase_design = list(A = 10, B = 20),   level = list(A = 0, B = 1), slope = list(A = 0, B = 0.05),   trend = 0.05 ) dat <- random_scdf(design = AB) plm(dat, AR = 3) #> Piecewise Regression Analysis #>  #> Contrast model: W / level = first, slope = first #>  #> Fitted a gaussian distribution. #> Correlated residuals up to autoregressions of lag 3 are modelled #>  #> F(3, 26) = 47.38; p = 0.000; R² = 0.845; Adjusted R² = 0.828; AIC =  #>  #>                             B LL-CI95% UL-CI95%    SE      t     p delta R² #> Intercept              53.068   48.188   57.948 2.490 21.315 0.000          #> Trend (mt)             -0.166   -1.032    0.701 0.442 -0.374 0.711   -0.001 #> Level phase B (phaseB) 16.266   10.061   22.470 3.166  5.138 0.000    0.069 #> Slope phase B (interB)  0.913   -0.045    1.871 0.489  1.869 0.073    0.016 #>  #> Autocorrelations of the residuals #>  lag    cr #>    1 -0.12 #>    2 -0.23 #>    3  0.38 #> Ljung-Box test: X²(3) = 7.32; p = 0.062  #>  #> Formula: values ~ 1 + mt + phaseB + interB   ## Another example with a more complex design A1B1A2B2 <- design(   phase_design = list(A1 = 15, B1 = 20, A2 = 15, B2 = 20),   level = list(A1 = 0, B1 = 1, A2 = -1, B2 = 1),   slope = list(A1 = 0, B1 = 0.0, A2 = 0, B2 = 0.0),   trend = 0.0) dat <- random_scdf(design = A1B1A2B2, seed = 123) plm(dat, contrast = \"preceding\") #> Piecewise Regression Analysis #>  #> Contrast model: W / level = preceding, slope = preceding #>  #> Fitted a gaussian distribution. #> F(7, 62) = 11.05; p = 0.000; R² = 0.555; Adjusted R² = 0.505; AIC = 425.0077 #>  #>                                B LL-CI95% UL-CI95%    SE      t     p delta R² #> Intercept                 51.354   46.820   55.889 2.314 22.196 0.000          #> Trend (mt)                -0.085   -0.636    0.467 0.281 -0.301 0.764    0.001 #> Level phase B1 (phaseB1)   7.816    1.418   14.213 3.264  2.395 0.020    0.041 #> Level phase A2 (phaseA2) -11.360  -17.599   -5.121 3.183 -3.569 0.001    0.091 #> Level phase B2 (phaseB2)  10.380    3.983   16.777 3.264  3.180 0.002    0.073 #> Slope phase B1 (interB1)   0.280   -0.377    0.937 0.335  0.835 0.407    0.005 #> Slope phase A2 (interA2)  -0.240   -0.897    0.417 0.335 -0.716 0.477    0.004 #> Slope phase B2 (interB2)   0.119   -0.538    0.776 0.335  0.354 0.724    0.001 #>  #> Autocorrelations of the residuals #>  lag    cr #>    1 -0.05 #>    2 -0.12 #>    3  0.12 #> Ljung-Box test: X²(3) = 2.27; p = 0.519  #>  #> Formula: values ~ 1 + mt + phaseB1 + phaseA2 + phaseB2 + interB1 + interA2 +      interB2   ## no slope effects were found. Therefore, you might want to the drop slope ## estimation: plm(dat, slope = FALSE, contrast = \"preceding\") #> Piecewise Regression Analysis #>  #> Contrast model: W / level = preceding, slope = preceding #>  #> Fitted a gaussian distribution. #> F(4, 65) = 19.73; p = 0.000; R² = 0.548; Adjusted R² = 0.521; AIC = 420.0594 #>  #>                                B LL-CI95% UL-CI95%    SE      t     p delta R² #> Intercept                 50.232   47.470   52.994 1.409 35.645 0.000          #> Trend (mt)                 0.076   -0.133    0.284 0.107  0.710 0.480    0.004 #> Level phase B1 (phaseB1)   7.671    2.879   12.463 2.445  3.137 0.003    0.068 #> Level phase A2 (phaseA2) -10.945  -15.737   -6.153 2.445 -4.477 0.000    0.139 #> Level phase B2 (phaseB2)   9.402    4.610   14.194 2.445  3.846 0.000    0.103 #>  #> Autocorrelations of the residuals #>  lag    cr #>    1 -0.03 #>    2 -0.09 #>    3  0.13 #> Ljung-Box test: X²(3) = 2.02; p = 0.568  #>  #> Formula: values ~ 1 + mt + phaseB1 + phaseA2 + phaseB2   ## and now drop the trend estimation as well plm(dat, slope = FALSE, trend = FALSE, contrast = \"preceding\") #> Piecewise Regression Analysis #>  #> Contrast model: W / level = preceding, slope = preceding #>  #> Fitted a gaussian distribution. #> F(3, 66) = 26.34; p = 0.000; R² = 0.545; Adjusted R² = 0.524; AIC = 418.6005 #>  #>                               B LL-CI95% UL-CI95%    SE      t p delta R² #> Intercept                50.762   48.427   53.097 1.191 42.611 0          #> Level phase B1 (phaseB1)  8.995    5.906   12.084 1.576  5.708 0    0.225 #> Level phase A2 (phaseA2) -9.621  -12.710   -6.532 1.576 -6.105 0    0.257 #> Level phase B2 (phaseB2) 10.726    7.637   13.815 1.576  6.806 0    0.319 #>  #> Autocorrelations of the residuals #>  lag    cr #>    1 -0.01 #>    2 -0.08 #>    3  0.13 #> Ljung-Box test: X²(3) = 1.82; p = 0.611  #>  #> Formula: values ~ 1 + phaseB1 + phaseA2 + phaseB2   ## A poisson regression example_A24 |>   plm(family = \"poisson\") #> Piecewise Regression Analysis #>  #> Contrast model: W / level = first, slope = first #>  #> Fitted a poisson distribution. #> X²(3) = 547.67; p = 0.000; AIC = 261.2856 #>  #>                             B LL-CI95% UL-CI95%    SE       t     p      OR #> Intercept               5.556    5.472    5.638 0.042 131.693 0.000 258.786 #> Trend (year)            0.007   -0.016    0.030 0.012   0.604 0.546   1.007 #> Level phase B (phaseB) -0.806   -0.938   -0.674 0.067 -11.964 0.000   0.447 #> Slope phase B (interB) -0.006   -0.031    0.019 0.013  -0.472 0.637   0.994 #>                         LL-CI95%  UL-CI95% delta R² #> Intercept                237.936   280.900          #> Trend (year)               0.984     1.030       NA #> Level phase B (phaseB)     0.391     0.510       NA #> Slope phase B (interB)     0.969     1.019       NA #>  #> Formula: injuries ~ 1 + year + phaseB + interB   ## A binomial regression (frequencies as dependent variable) plm(exampleAB_score$Christiano, family = \"binomial\", var_trials = \"trials\") #> Piecewise Regression Analysis #>  #> Contrast model: W / level = first, slope = first #>  #> Fitted a binomial distribution. #> X²(3) = 240.66; p = 0.000; AIC = 120.3268 #>  #>                             B LL-CI95% UL-CI95%    SE      t     p     OR #> Intercept              -1.964   -2.793   -1.239 0.394 -4.991 0.000  0.140 #> Trend (mt)              0.023   -0.118    0.166 0.072  0.324 0.746  1.023 #> Level phase B (phaseB)  2.376    1.454    3.378 0.488  4.866 0.000 10.762 #> Slope phase B (interB)  0.038   -0.111    0.186 0.075  0.504 0.614  1.039 #>                         LL-CI95%  UL-CI95% delta R² #> Intercept                  0.061     0.290          #> Trend (mt)                 0.889     1.181       NA #> Level phase B (phaseB)     4.280    29.312       NA #> Slope phase B (interB)     0.895     1.204       NA #>  #> Formula: values/trials ~ 1 + mt + phaseB + interB #> weights = trials   ## A binomial regression (percentage as dependent variable) exampleAB_score$Christiano |>   transform(percentage = values/trials) |>   set_dvar(\"percentage\") |>   plm(family = \"binomial\", var_trials = \"trials\", dvar_percentage = TRUE) #> Piecewise Regression Analysis #>  #> Contrast model: W / level = first, slope = first #>  #> Fitted a binomial distribution. #> X²(3) = 240.66; p = 0.000; AIC = 120.3268 #>  #>                             B LL-CI95% UL-CI95%    SE      t     p     OR #> Intercept              -1.964   -2.793   -1.239 0.394 -4.991 0.000  0.140 #> Trend (mt)              0.023   -0.118    0.166 0.072  0.324 0.746  1.023 #> Level phase B (phaseB)  2.376    1.454    3.378 0.488  4.866 0.000 10.762 #> Slope phase B (interB)  0.038   -0.111    0.186 0.075  0.504 0.614  1.039 #>                         LL-CI95%  UL-CI95% delta R² #> Intercept                  0.061     0.290          #> Trend (mt)                 0.889     1.181       NA #> Level phase B (phaseB)     4.280    29.312       NA #> Slope phase B (interB)     0.895     1.204       NA #>  #> Formula: percentage ~ 1 + mt + phaseB + interB #> weights = trials  ## Print plm(exampleAB$Johanna) |>    print(ci = 0.9, r_squared = c(\"delta\", \"partial\")) #> Piecewise Regression Analysis #>  #> Contrast model: W / level = first, slope = first #>  #> Fitted a gaussian distribution. #> F(3, 16) = 28.69; p = 0.000; R² = 0.843; Adjusted R² = 0.814; AIC = 126.8444 #>  #>                             B LL-CI90% UL-CI90%    SE      t     p delta R² #> Intercept              54.400   48.002   60.798 3.890 13.986 0.000          #> Trend (mt)              0.100   -2.512    2.712 1.588  0.063 0.951    0.000 #> Level phase B (phaseB)  7.858   -1.709   17.426 5.816  1.351 0.195    0.018 #> Slope phase B (interB)  1.525   -1.133    4.183 1.616  0.944 0.359    0.009 #>                        partial R² #> Intercept                         #> Trend (mt)                  0.000 #> Level phase B (phaseB)      0.102 #> Slope phase B (interB)      0.053 #>  #> Autocorrelations of the residuals #>  lag    cr #>    1 -0.32 #>    2 -0.13 #>    3 -0.01 #> Ljung-Box test: X²(3) = 2.84; p = 0.417  #>  #> Formula: values ~ 1 + mt + phaseB + interB  ## Export plm(exampleAB$Johanna) |> export() #> <table class=\" lightable-classic\" style=\"width: auto !important; border-bottom: 0;\"> #> <caption>Piecewise-regression model predicting 'values'<\/caption> #>  <thead> #> <tr> #> <th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"2\"><\/th> #> <th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">CI(95%)<\/div><\/th> #> <th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"4\"><\/th> #> <\/tr> #>   <tr> #>    <th style=\"text-align:left;\"> Parameter <\/th> #>    <th style=\"text-align:center;\"> B <\/th> #>    <th style=\"text-align:center;\"> LL <\/th> #>    <th style=\"text-align:center;\"> UL <\/th> #>    <th style=\"text-align:center;\"> SE <\/th> #>    <th style=\"text-align:center;\"> t <\/th> #>    <th style=\"text-align:center;\"> p <\/th> #>    <th style=\"text-align:center;\"> delta R² <\/th> #>   <\/tr> #>  <\/thead> #> <tbody> #>   <tr> #>    <td style=\"text-align:left;\"> Intercept <\/td> #>    <td style=\"text-align:center;\"> 54.40 <\/td> #>    <td style=\"text-align:center;\"> 46.78 <\/td> #>    <td style=\"text-align:center;\"> 62.02 <\/td> #>    <td style=\"text-align:center;\"> 3.89 <\/td> #>    <td style=\"text-align:center;\"> 13.99 <\/td> #>    <td style=\"text-align:center;\"> &lt;.001 <\/td> #>    <td style=\"text-align:center;\">  <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;\"> Trend (mt) <\/td> #>    <td style=\"text-align:center;\"> 0.10 <\/td> #>    <td style=\"text-align:center;\"> -3.01 <\/td> #>    <td style=\"text-align:center;\"> 3.21 <\/td> #>    <td style=\"text-align:center;\"> 1.59 <\/td> #>    <td style=\"text-align:center;\"> 0.06 <\/td> #>    <td style=\"text-align:center;\"> .95 <\/td> #>    <td style=\"text-align:center;\"> 0.00 <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;\"> Level phase B (phaseB) <\/td> #>    <td style=\"text-align:center;\"> 7.86 <\/td> #>    <td style=\"text-align:center;\"> -3.54 <\/td> #>    <td style=\"text-align:center;\"> 19.26 <\/td> #>    <td style=\"text-align:center;\"> 5.82 <\/td> #>    <td style=\"text-align:center;\"> 1.35 <\/td> #>    <td style=\"text-align:center;\"> .20 <\/td> #>    <td style=\"text-align:center;\"> 0.02 <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;\"> Slope phase B (interB) <\/td> #>    <td style=\"text-align:center;\"> 1.53 <\/td> #>    <td style=\"text-align:center;\"> -1.64 <\/td> #>    <td style=\"text-align:center;\"> 4.69 <\/td> #>    <td style=\"text-align:center;\"> 1.62 <\/td> #>    <td style=\"text-align:center;\"> 0.94 <\/td> #>    <td style=\"text-align:center;\"> .36 <\/td> #>    <td style=\"text-align:center;\"> 0.01 <\/td> #>   <\/tr> #> <\/tbody> #> <tfoot><tr><td style=\"padding: 0; \" colspan=\"100%\"> #> <span style=\"font-style: italic;\">Note: <\/span> <sup><\/sup> F(3, 16) = 28.69; p = 0.000; R² = 0.843; Adjusted R² = 0.814; AIC = 127; LL = lower limit; UL = upper limit.<\/td><\/tr><\/tfoot> #> <\/table>"},{"path":"/reference/plot.scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Plot single-case data — plot.scdf","title":"(Deprecated) Plot single-case data — plot.scdf","text":"function provides plot single-case multiple single-cases.","code":""},{"path":"/reference/plot.scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Plot single-case data — plot.scdf","text":"","code":"# S3 method for class 'scdf' plot(...)  plotSC(   data,   dvar,   pvar,   mvar,   ylim = NULL,   xlim = NULL,   xinc = 1,   lines = NULL,   marks = NULL,   phase.names = NULL,   xlab = NULL,   ylab = NULL,   main = \"\",   case.names = NULL,   style = getOption(\"scan.plot.style\"),   ... )"},{"path":"/reference/plot.scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Plot single-case data — plot.scdf","text":"... arguments passed plot command. data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. ylim Lower upper limits y-axis (e.g., ylim = c(0,   20) sets y-axis scale 0 20). multiple single-cases can use ylim = c(0, NA) scale y-axis 0 maximum case. ylim set default, makes scan set proper scale based given data. xlim Lower upper limits x-axis (e.g., xlim = c(0,   20) sets x-axis scale 0 20). multiple single-cases can use ylim = c(0, NA) scale x-axis 0 maximum case. xlim set default, makes scan set proper scale based given data. xinc integer. Increment x-axis. 1 :mt value printed, 2 : every value, 3 : every third values etc. lines list defining one multiple lines curves plotted. argument passed list (e.g., list(type = \"median\")). procedures can refined additional argument (e.g., lines = list(type = \"mean\", trim = 0.2) adds 20\\ line. multiple lines, provide list element line (e.g., list( list(type = \"median\", col = \"red\"), list(type = \"trend\", col =   \"blue\")). Possible lines : \"median\" Separate lines phase B medians. \"mean\" Separate lines phase B means. default 10\\ lines = list(type = \"mean\", trim = 0.2) draws 20\\ \"trend\" Separate lines phase B trends. \"trendA\" OLS trend line phase , extrapolated throughout phase B. \"trendA_bisplit\" Split middle (bi-split) trend line phase , extrapolated throughout phase B. \"trendA_trisplit\" Tukey tri-split trend line phase , extrapolated throughout phase B. \"maxA/minA\" Line level highest lowest phase score. \"medianA\" Line phase median score. \"meanA\" Line phase 10\\ using additional argument (e.g., lines = list(type = \"meanA\", trim = 0.2)). \"plm\" Regression lines piecewise linear regression model. \"plm.ar\" Regression lines piecewise autoregression model. lag specified like : lines = list(type = \"plm.ar\", ar = 2). Default lag set 2. \"movingMean\" Draws moving mean curve, specified lag: lines = list(type = \"movingMean\", lag = 2). Default lag 1 curve. \"movingMedian\" Draws moving median curve, specified lag: lines = list(type = \"movingMedian\", lag = 3). Default lag 1 curve. \"loreg\" Draws non-parametric local regression line. proportion data influencing data point can specified using lines = list(type = \"loreg\"m f = 0.66). default 0.5. \"lty\" Use argument define line type. Examples : \"solid\", \"dashed\", \"dotted\". \"lwd\" Use argument define line's thickness, e.g., lwd = 4. \"col\" Use argument define line's color, e.g., col = \"red\". marks list parameters defining markings certain data points. \"positions\" vector list vectors indicating measurement-times highlighted. case vector, marked measurement-times plotted cases. case list vectors, marks set differently case. list must length cases data file. \"col\" Color marks. \"cex\" Size marks. Use example marks = list(positions = c(1, 8, 15), col = \"red\", cex = 3) make MTs one, eight 18 appear big red. phase.names default phases labeled based levels phase variable. Use argument specify different labels: phase.names = c(\"Baseline\", \"Intervention\"). xlab label x-axis. Default xlab = \"Measurement time\". ylab labels y-axis. Default ylab = \"Score\". main Main title plot. case.names Case names. provided, names taken scdf. Set case.names = \"\" like include case names. style Either character name pre-implemented style style object. See style_plot learn format.","code":""},{"path":"/reference/plot.scdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Plot single-case data — plot.scdf","text":"Returns plot one multiple single-cases.","code":""},{"path":"/reference/plot.scdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"(Deprecated) Plot single-case data — plot.scdf","text":"Juergen Wilbert","code":""},{"path":"/reference/plot.scdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) Plot single-case data — plot.scdf","text":"","code":"## Request the default plot of the data from Borckhardt (2014) plot(Borckardt2014) #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'plot'. #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'style_plot'.   ## Plot the three cases from Grosche (2011) and visualize the phase A trend plot(Grosche2011, style = \"grid\", lines = \"trendA\") #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'plot'. #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'style_plot'.   ## Request the local regression line for Georg from that data set and customize the plot plot(Grosche2011$Georg, style = \"sienna\", ylim = c(0,NA),        xlab = \"Training session\", ylab = \"Words per minute\",        phase.names = c(\"Baseline\", \"Intervention\"), xinc = 5,        lines = list(type = \"loreg\", f = 0.2, lty = \"solid\", col = \"black\", lwd = 3)) #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'plot'. #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'style_plot'.   ## Plot a random MBD over three cases and mark interesting MTs dat <- random_scdf(design = design(3)) plot(dat, marks = list(positions = list(c(2,4,5),c(1,2,3),c(7,8,9)), col = \"blue\",        cex = 1.4), style = c(\"grid\", \"annotate\", \"tiny\")) #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'plot'. #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'style_plot'."},{"path":"/reference/plot_rand.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot random distribution — plot_rand","title":"Plot random distribution — plot_rand","text":"function takes return rand_test function creates histogram distribution rand sample statistics.","code":""},{"path":"/reference/plot_rand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot random distribution — plot_rand","text":"","code":"plot_rand(   object,   type = \"hist\",   xlab = NULL,   ylab = NULL,   title = NULL,   text_observed = \"observed\",   color = \"lightgrey\",   ... )"},{"path":"/reference/plot_rand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot random distribution — plot_rand","text":"object Object returned rand_test() function type 'hist' 'xy'. xlab Label x-axis. ylab Label y-axis. title Plot title. text_observed Text marking number observed statistic. color Bar color. ... arguments passed plot function.","code":""},{"path":"/reference/pnd.html","id":null,"dir":"Reference","previous_headings":"","what":"Percentage of non-overlapping data — pnd","title":"Percentage of non-overlapping data — pnd","text":"function returns percentage non-overlapping data.  Due error-proneness PND used, nap pand instead (see Parker & Vannest, 2009).","code":""},{"path":"/reference/pnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percentage of non-overlapping data — pnd","text":"","code":"pnd(data, dvar, pvar, decreasing = FALSE, phases = c(1, 2))"},{"path":"/reference/pnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percentage of non-overlapping data — pnd","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. decreasing expect data lower B phase, set decreasing = TRUE. Default decreasing = FALSE. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2).","code":""},{"path":"/reference/pnd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percentage of non-overlapping data — pnd","text":"PND Percentage non-overlapping data.","code":""},{"path":[]},{"path":"/reference/pnd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Percentage of non-overlapping data — pnd","text":"Juergen Wilbert","code":""},{"path":"/reference/pnd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percentage of non-overlapping data — pnd","text":"","code":"## Calculate the PND for multiple single-case data pnd(GruenkeWilbert2014) #> Percent Non-Overlapping Data #>  #>    Case  PND Total Exceeds #>   Anton 100%    14      14 #>     Bob 100%    11      11 #>    Paul 100%    12      12 #>  Robert 100%    10      10 #>     Sam 100%    13      13 #>     Tim 100%    14      14 #>  #> Mean  : 100 %"},{"path":"/reference/power_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical power analysis for single-case data — power_test","title":"Empirical power analysis for single-case data — power_test","text":"Conducts Monte-Carlo study test-power alpha-error probability statistical function.","code":""},{"path":"/reference/power_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical power analysis for single-case data — power_test","text":"","code":"power_test(   design,   method = c(\"plm_level\", \"rand\", \"tauU\"),   effect = \"level\",   n_sim = 100,   design_is_one_study = TRUE,   alpha_test = TRUE,   power_test = TRUE,   binom_test = FALSE,   binom_test_alpha = FALSE,   binom_test_power = FALSE,   binom_test_correct = FALSE,   ci = FALSE,   alpha_level = 0.05 )"},{"path":"/reference/power_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical power analysis for single-case data — power_test","text":"design object returned design function. method (named) list defines methods power analysis based . element can contain function (takes scdf file returns p value) character string (name predefined functions). default method = list(\"plm_level\", \"rand\", \"tauU\") computes power analysis based tau_u(), rand_test() plm() analyses. (predefined functions : \"plm_slope\", \"plm_poisson_level\", \"plm_poisson_slope\", \"hplm_level\", \"hplm_slope\", \"base_tau\". effect Either \"level\" \"slope\". respective effect provided design set 0 computing alpha-error proportion. n_sim Number sample studies created Monte-Carlo study. Default n = 100. Ignored design_is_one_study = FALSE. design_is_one_study TRUE, design assumed define cases one study repeatedly randomly created n_sim times. false, design assumed contain cases random sample generated. useful specific complex simulation studies. alpha_test Logical. TRUE, alpha error calculated. power_test Logical. TRUE, power calculated. binom_test Shortcut. set TRUE, binom_test_power set 0.80, binom_test_alpha set 0.05, binom_test_correct set 0.875. binom_test_alpha Either FALSE value. value provided, binomial test calculated testing alpha error proportion less provided value. binom_test_power Either FALSE value. value provided, binomial test calculated testing power greater provided value. binom_test_correct Either FALSE value. value provided, binomial test calculated testing correct proportion greater provided value. ci Either FALSE value. value provided, confidence intervals provided level calculated power, alpha error, correct proportions. alpha_level Alpha level used calculate proportion significant tests. Default alpha_level = 0.05.","code":""},{"path":"/reference/power_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical power analysis for single-case data — power_test","text":"Based design() object, large number single-cases generated re-analysed provided statistical function. proportion significant analyses test power. second step, specified effect design object set 0 single-cases generated re-analysed. proportion significant analyses alpha error probability.","code":""},{"path":[]},{"path":"/reference/power_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Empirical power analysis for single-case data — power_test","text":"Juergen Wilbert","code":""},{"path":"/reference/power_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical power analysis for single-case data — power_test","text":"","code":"## Assume you want to conduct a single-case study with 15 measurements ## (phases: A = 6 and B = 9) using a highly reliable test and ## an expected level effect of d = 1.4. ## A (strong) trend effect is trend = 0.05. What is the power? ## (Note: n_sims is set to 10. Set n_sims to 1000 for a serious calculation.) design <- design(   n = 1, phase_design = list(A = 6, B = 9),   rtt = 0.8, level = 1.4, trend = 0.05 ) power_test(design, n_sim = 10) #> Test-Power in percent: #>  #>     Method Power Alpha Error Alpha:Beta Correct #>  plm_level    70           0      1:Inf      85 #>       rand    70           0      1:Inf      85 #>       tauU   100          20      1:0.0      90  ## Would you achieve higher power by setting up a MBD with three cases? design <- design(   n = 3, phase_design = list(A = 6, B = 9),   rtt = 0.8, level = 1.4, trend = 0.05 ) power_test(design, n_sim=10, method=list(\"hplm_level\", \"rand\", \"tauU_meta\")) #> Test-Power in percent: #>  #>      Method Power Alpha Error Alpha:Beta Correct #>  hplm_level   100           0      1:NaN     100 #>        rand   100           0      1:NaN     100 #>   tauU_meta   100          50      1:0.0      75"},{"path":"/reference/print.sc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for scan objects — print.sc","title":"Print methods for scan objects — print.sc","text":"Print methods scan objects","code":""},{"path":"/reference/print.sc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for scan objects — print.sc","text":"","code":"# S3 method for class 'sc_ac' print(x, digits = \"auto\", ...)  # S3 method for class 'sc_bctau' print(x, nice = TRUE, digits = \"auto\", ...)  # S3 method for class 'sc_cdc' print(x, nice = TRUE, ...)  # S3 method for class 'sc_desc' print(x, digits = \"auto\", ...)  # S3 method for class 'sc_design' print(x, ...)  # S3 method for class 'sc_nap' print(x, digits = \"auto\", nice = TRUE, complete = FALSE, ...)  # S3 method for class 'sc_outlier' print(x, digits = \"auto\", ...)  # S3 method for class 'sc_overlap' print(x, digits = \"auto\", ...)  # S3 method for class 'sc_pem' print(x, ...)  # S3 method for class 'sc_pet' print(x, digits = 3, ...)  # S3 method for class 'sc_pnd' print(x, ...)  # S3 method for class 'sc_power' print(x, duration = FALSE, digits = 1, ...)  # S3 method for class 'sc_rand' print(x, ...)  # S3 method for class 'sc_rci' print(x, digits = 3, ...)  # S3 method for class 'sc_smd' print(x, digits = \"auto\", ...)  # S3 method for class 'sc_trend' print(x, digits = 3, ...)"},{"path":"/reference/print.sc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for scan objects — print.sc","text":"x Object digits minimum number significant digits use. set \"auto\" (default), values predefined. ... parameters passed print function nice set TRUE (default) output values rounded optimized publication tables. duration TRUE duration computation printed.","code":""},{"path":"/reference/print.scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an scdf — print.scdf","title":"Print an scdf — print.scdf","text":"Print scdf","code":""},{"path":"/reference/print.scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an scdf — print.scdf","text":"","code":"# S3 method for class 'scdf' print(   x,   cases = getOption(\"scan.print.cases\"),   rows = getOption(\"scan.print.rows\"),   cols = getOption(\"scan.print.cols\"),   long = getOption(\"scan.print.long\"),   digits = getOption(\"scan.print.digits\"),   ... )"},{"path":"/reference/print.scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an scdf — print.scdf","text":"x scdf object cases Number cases printed. \"fit\" fits number current screen width. rows Number rows printed. cols Columns printed. \"Main\" prints dependent, measurement-time phase variable. long Logical. TRUE cases printed one time. digits Number digits. ... arguments passed print function.","code":""},{"path":"/reference/print.scdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an scdf — print.scdf","text":"Print options scdf objects set globally: option(scan.print.cases = \"\"), option(scan.print.rows = 10), option(scan.print.cols = \"main\"), option(scan.print.long = TRUE), option(scan.print.digits = 0), option(scan.print.scdf.name = FALSE)","code":""},{"path":"/reference/rand_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomization Tests for single-case data — rand_test","title":"Randomization Tests for single-case data — rand_test","text":"rand_test function computes randomization test single multiple baseline single-case data.  function based algorithm SCRT package (Bulte & Onghena, 2009, 2012), rewritten extended use AB designs.","code":""},{"path":"/reference/rand_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomization Tests for single-case data — rand_test","text":"","code":"rand_test(   data,   dvar,   pvar,   statistic = c(\"Mean B-A\", \"Mean A-B\", \"Median B-A\", \"Median A-B\", \"Mean |A-B|\",     \"Median |A-B|\", \"SMD hedges\", \"SMD glass\", \"W-test\", \"T-test\", \"NAP\",     \"NAP decreasing\", \"Slope B-A\", \"Slope A-B\"),   statistic_function = NULL,   number = 500,   complete = FALSE,   limit = 5,   startpoints = NA,   exclude.equal = FALSE,   phases = c(1, 2),   graph = FALSE,   output = NULL,   seed = NULL )"},{"path":"/reference/rand_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomization Tests for single-case data — rand_test","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. statistic Defines statistic comparison phases B based . Default setting statistic = \"Mean B-\". See details. statistic_function list user defined function calculate statistic. set, overwrites statistic argument. See details. number Sample size randomization distribution. exactness p-value can exceed \\(1/number\\) (.e., number = 100 results p-values exactness one percent). Default number = 500. faster processing use number = 100. precise p-values set number = 1000). complete TRUE, distribution based complete permutation possible starting combinations. setting overwrites number Argument. default setting FALSE. limit Minimal number data points per phase sample. first number refers -phase second B-phase (e.g., limit = c(5,3)). one number given, number applied phases. Default limit = 5. startpoints Alternative limit-parameter startpoints exactly defines possible start points phase B (e.g., startpoints = 4:9 restricts phase B start points measurements 4 9. startpoints overruns limit-parameter. exclude.equal set exclude.equal = FALSE, default, random distribution values equal observed distribution counted null-hypothesis conform. , decrease probability rejecting null-hypothesis (increase p-value). exclude.equal set TRUE analyse one single-case design (multiple baseline data set) reach sufficient power. aware, increases chance alpha-error. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2). graph graph = TRUE, histogram resulting distribution plotted. FALSE default. Note: use versatile plot_rand() function instead. output (deprecated implemented) seed seed number random generator.","code":""},{"path":"/reference/rand_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomization Tests for single-case data — rand_test","text":"statistic Character string function call (see Arguments ). N Number single-cases. n1 Number data points phase . n2 Number data points phase B. limit Numeric function call (see Arguments ). startpoints vector defining start points passed function call (see Arguments ). p.value P-value randomization test given data. number Sample size randomization distribution function call (see Arguments ). complete Logical argument function call (see Arguments ). observed.statistic Test statistic observed given single-case data. (see statistic Arguments .) Z Z-value observed test statistic. p.z.single Probability z-value. distribution Test statistic distribution randomized data sets. possible.combinations Number possible combinations given restrictions. auto.corrected.number TRUE indicates corrected number combinations used. happens, number possible combinations (given restrictions) undercuts requested number combinations. ecxlude.equal see argument ","code":""},{"path":[]},{"path":"/reference/rand_test.html","id":"predefinded-statisic","dir":"Reference","previous_headings":"","what":"Predefinded statisic","title":"Randomization Tests for single-case data — rand_test","text":"Use statistic argument choose predefnied statistic. following comparisons possible: Mean -B: Uses difference mean phase mean phase B. appropriate decrease scores expected phase B. Mean B-: Uses difference mean phase B mean phase . appropriate increase scores expected phase B. Mean |-B|: Uses absolute value difference means phases B. Median -B: Mean -B, based median. Median B-: Mean B-, based median. SMD hedges / SMD glass: Standardizes mean difference B-Hedges's g Glass' delta. NAP: Non-overlap pairs. W-test: Wilcoxon-test statistic W. T-test: T-test statistic t.","code":""},{"path":"/reference/rand_test.html","id":"create-own-statistic-function","dir":"Reference","previous_headings":"","what":"Create own statistic function","title":"Randomization Tests for single-case data — rand_test","text":"Use statistic_function argument proved function list. list must element named statistic function takes two arguments b returns single numeric value.  E.g. list(statistic = function(, b) mean() - mean(b). second element list named aggregate takes function one numeric argument returns numeric argument. function used aggregate values multiple case design. provide element, uses default function(x) sum(x)/length(x). third optional argument name provides name user function.","code":""},{"path":"/reference/rand_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Randomization Tests for single-case data — rand_test","text":"Bulte, ., & Onghena, P. (2009). Randomization tests multiple-baseline designs: extension SCRT-R package. Behavior Research Methods, 41, 477-485. Bulte, ., & Onghena, P. (2012). SCRT: Single-Case Randomization Tests. Available : https://CRAN.R-project.org/package=SCRT","code":""},{"path":"/reference/rand_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Randomization Tests for single-case data — rand_test","text":"Juergen Wilbert","code":""},{"path":"/reference/rand_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomization Tests for single-case data — rand_test","text":"","code":"## Compute a randomization test on the first case of the byHeart2011 data and include a graph rand_test(byHeart2011[1], statistic = \"Median B-A\", graph = TRUE, seed = 123)  #> Randomization Test #>  #> Comparing phase 1 against phase 2  #> Statistic:  Median B-A  #>  #> Minimal length of each phase: A = 5 , B = 5  #> Observed statistic =  15  #>  #> Warning! The assigned number of random permutations exceeds the number of possible permutations.  #> Analysis is restricted to all possible permutations. #>  #> Distribution based on all 11 possible combinations. #> n   =  11  #> M   =  14.40909  #> SD  =  1.338249  #> Min =  12  #> Max =  16  #>  #> Probability of an equal or higher value than the observed statistic: #> p   =  0.6363636  #>  #> Shapiro-Wilk Normality Test: W = 0.868; p = 0.073  (Hypothesis of normality maintained) #>  #> Probabilty of observed statistic based on the assumption of normality: #> z = 0.4416, p = 0.3294 (single sided)  ## Compute a randomization test on the Grosche2011 data using complete permutation rand_test(Grosche2011, statistic = \"Median B-A\", complete = TRUE, limit = 4, seed = 123) #> Randomization Test #>  #> Combined test for three cases. #>  #> Comparing phase 1 against phase 2  #> Statistic:  Median B-A  #>  #> Minimal length of each phase: A = 4 , B = 4  #> Observed statistic =  0.365  #>  #> Distribution based on all 2652 possible combinations. #> n   =  2652  #> M   =  1.004859  #> SD  =  0.7805234  #> Min =  -1.445  #> Max =  1.71  #>  #> Probability of an equal or higher value than the observed statistic: #> p   =  0.8435143  #>  #> Shapiro-Wilk Normality Test: W = 0.804; p = 0.000  (Hypothesis of normality rejected) #>  #> Probabilty of observed statistic based on the assumption of normality: #> z = -0.8198, p = 0.7938 (single sided)"},{"path":"/reference/random_scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Single-case data generator — random_scdf","title":"Single-case data generator — random_scdf","text":"random_scdf function generates random single-case data frames monte-carlo studies demonstration purposes. design used set design matrix parameters needed random_scdf function.","code":""},{"path":"/reference/random_scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single-case data generator — random_scdf","text":"","code":"random_scdf(design = NULL, round = NA, random_names = FALSE, seed = NULL, ...)"},{"path":"/reference/random_scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single-case data generator — random_scdf","text":"design design matrix created design specifies parameters. round Rounds scores defined decimal. round second decimal, set round = 2. random_names FALSE default. set random_names =   TRUE cases assigned random first names. set \"neutral\", \"male\"   \"female\" gender neutral, male, female names chosen. names drawn 2,000 popular names newborns 2012 U.S. (1,000 male 1,000 female names). seed seed number random generator. ... arguments directly passed design function concise coding.","code":""},{"path":"/reference/random_scdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single-case data generator — random_scdf","text":"single-case data frame. See scdf learn format.","code":""},{"path":"/reference/random_scdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Single-case data generator — random_scdf","text":"Juergen Wibert","code":""},{"path":"/reference/random_scdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single-case data generator — random_scdf","text":"","code":"## Create random single-case data and inspect it design <- design(   n = 3, rtt = 0.75, slope = 0.1, extreme_prop = 0.1,   missing_prop = 0.1 ) dat <- random_scdf(design, round = 1, random_names = TRUE, seed = 123) describe(dat) #> Describe Single-Case Data #>  #>        Vanessa Bryn Tia #> Design     A-B  A-B A-B #> n.A          5    5   5 #> n.B         15   15  15 #> mis.A        0    1   0 #> mis.B        2    1   2 #>  #>         Vanessa   Bryn    Tia #> m.A       51.12  50.00  54.36 #> m.B      57.115 52.793 56.892 #> md.A       50.4   49.2   52.6 #> md.B      59.60  55.75  59.20 #> sd.A      4.672  3.631  4.538 #> sd.B     10.403 12.893  8.003 #> mad.A     2.520  2.076  3.410 #> mad.B     7.858 10.601  6.672 #> min.A      46.8   46.5   50.3 #> min.B      29.7   19.7   38.7 #> max.A      59.0   55.1   61.8 #> max.B      71.3   65.2   67.7 #> trend.A    0.95   1.36   2.27 #> trend.B   0.935  1.693  1.358  ## And now have a look at poisson-distributed data design <- design(   n = 3, B_start = c(6, 10, 14), mt = c(12, 20, 22), start_value = 10,   distribution = \"poisson\", level = -5, missing_prop = 0.1 ) dat <- random_scdf(design, seed = 1234) pand(dat, decreasing = TRUE) #> Percentage of all non-overlapping data #>  #> Method: sort  #>  #> PAND = 91.8% #> Φ =  0.836  ; Φ² =  0.699  #>  #> 49 measurements (23 Phase A, 26 Phase B) in 3 cases #> Overlapping data: n = 4 ; percentage = 8.2  #>  #> 2 x 2 Matrix of percentages #>          A    B total #> A     42.9  4.1  46.9 #> B      4.1 49.0  53.1 #> total 46.9 53.1 100.0 #>  #> 2 x 2 Matrix of counts #>        A  B total #> A     21  2    23 #> B      2 24    26 #> total 23 26    49 #>  #>  #> Chi-Squared test: #> X² = 34.256, df = 1, p = 0.000  #>  #> Fisher exact test: #> Odds ratio = 99.881, p = 0.000"},{"path":"/reference/ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Rank-transformation of single-case data files — ranks","title":"(Deprecated) Rank-transformation of single-case data files — ranks","text":"function superseded versatile transform.scdf function.","code":""},{"path":"/reference/ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Rank-transformation of single-case data files — ranks","text":"","code":"ranks(data, var, grand = TRUE, ...)"},{"path":"/reference/ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Rank-transformation of single-case data files — ranks","text":"data single-case data frame. See scdf() learn format. var string string vector names variables ranked. grand TRUE, ranks calculated across cases. FALSE ranks calculated within case. ... Additional parameters passed rank function.","code":""},{"path":"/reference/ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Rank-transformation of single-case data files — ranks","text":"scdf object values variable(s) replaced ranks.","code":""},{"path":[]},{"path":"/reference/ranks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"(Deprecated) Rank-transformation of single-case data files — ranks","text":"Juergen Wilbert","code":""},{"path":"/reference/ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) Rank-transformation of single-case data files — ranks","text":"","code":"# The ranks function is deprecated. Please use transform: res1 <- ranks(Huber2014, var = \"compliance\") res2 <- transform(Huber2014, across_cases(compliance = rank(compliance, na.last=\"keep\"))) identical(res1, res2) #> [1] TRUE  res1 <- ranks(Huber2014, var = \"compliance\", grand = FALSE) res2 <- transform(Huber2014, compliance = rank(compliance, na.last=\"keep\")) identical(res1, res2) #> [1] TRUE"},{"path":"/reference/rci.html","id":null,"dir":"Reference","previous_headings":"","what":"Reliable change index — rci","title":"Reliable change index — rci","text":"rci() function computes indices reliable change (Wise, 2004) corresponding descriptive statistics.","code":""},{"path":"/reference/rci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reliable change index — rci","text":"","code":"rci(data, dvar, pvar, rel, ci = 0.95, graph = FALSE, phases = c(1, 2))"},{"path":"/reference/rci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reliable change index — rci","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. rel Reliability measure, used compute standard error. ci Width confidence interval decimal. Default ci = 0.95 applying 95 percent confidence interval. graph set TRUE, box plot phase B scores displayed. graph = FALSE default. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2).","code":""},{"path":"/reference/rci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reliable change index — rci","text":"Christensen, L., & Mendoza, J. L. (1986). method assessing change single subject: alteration RC index. Behavior Therapy, 17, 305-308. Jacobson, N. S., & Truax, P. (1991). Clinical Significance: statistical approach defining meaningful change psychotherapy research. Journal Consulting Clinical Psychology, 59, 12-19. Wise, E. . (2004). Methods analyzing psychotherapy outcomes: review clinical significance, reliable change, recommendations future directions. Journal Personality Assessment, 82, 50 - 59.","code":""},{"path":"/reference/rci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reliable change index — rci","text":"Juergen Wilbert","code":""},{"path":"/reference/rci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reliable change index — rci","text":"","code":"## Report the RCIs of the first case from the byHeart data and include a graph rci(byHeart2011[1], graph = TRUE, rel = 0.8)  #> Reliable Change Index #>  #> Mean Difference =  12.4  #> Standardized Difference =  1.691  #> Standard error of differences =  0.346  #> Reliability of measurements =  0.8  #>  #> Descriptives: #>         n mean    SD    SE #> A-Phase 5  0.4 0.548 0.245 #> B-Phase 5 12.8 5.634 2.520 #>  #> 95 % Confidence Intervals: #>          Lower  Upper #> A-Phase -0.080  0.880 #> B-Phase  7.862 17.738 #>  #> Reliable Change Indices: #>                            RCI #> Jacobson et al.         50.623 #> Christensen and Mendoza 35.796 #>"},{"path":"/reference/read_scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Load single-case data from files — read_scdf","title":"Load single-case data from files — read_scdf","text":"Use read_scdf function load single-case data csv, excel, yaml files.","code":""},{"path":"/reference/read_scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load single-case data from files — read_scdf","text":"","code":"read_scdf(   file,   cvar = \"case\",   pvar = \"phase\",   dvar = \"values\",   mvar = \"mt\",   sort_cases = FALSE,   phase_names = NULL,   type = NA,   na = c(\"\", \"NA\"),   sort.labels = NULL,   phase.names = NULL,   ... )"},{"path":"/reference/read_scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load single-case data from files — read_scdf","text":"file Either character string defining file loaded (e.g. \"SC_Anita.csv\" (left empty dialog box choosing opened) data.frame. cvar Sets variable name \"case\" variable. Defaults \"case\". pvar Sets variable name \"phase\" variable. Defaults \"phase\". dvar Sets variable name \"values\" variable. Defaults \"values\". mvar Sets variable name \"mt\" variable. Defaults \"mt\". sort_cases, sort.labels set TRUE, resulting list sorted label names (alphabetically increasing). phase_names, phase.names character vector phase names. Defaults phase names provided phase variable. type Format file loaded. Either \"csv\", \"xlsx\", \"xls\", \"excel\", \"yml\" possible. default (NA) type extracted file extension. na Character vector strings interpret missing values. ... arguments passed respective read function.","code":""},{"path":"/reference/read_scdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load single-case data from files — read_scdf","text":"Returns single-case data frame. See scdf learn format data frames.","code":""},{"path":[]},{"path":"/reference/read_scdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load single-case data from files — read_scdf","text":"Juergen Wilbert","code":""},{"path":"/reference/read_scdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load single-case data from files — read_scdf","text":"","code":"## Read SC-data from a file named \"study1.csv\" in your working directory # study1 <- read_scdf(\"study1.csv\")  ## Read SC-data from a .csv-file with semicolon as field and comma as decimal separator # study2 <- read_scdf(\"study2.csv\", sep = \";\", dec = \",\")  ## write_scdf and read_scdf filename <- file.path(tempdir(), \"test.csv\") write_scdf(exampleA1B1A2B2_zvt, filename) dat <- read_scdf(filename, cvar = \"case\", pvar = \"part\", dvar = \"zvt\", mvar = \"day\") #> Imported 3 cases res1 <- describe(exampleA1B1A2B2_zvt)$descriptives res2 <- describe(dat)$descriptives all.equal(res1,res2) #> [1] TRUE"},{"path":"/reference/rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescales values of an scdf file — rescale","title":"Rescales values of an scdf file — rescale","text":"function scales measured values scdf file. allows mean centering standardization across cases included scdf.","code":""},{"path":"/reference/rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescales values of an scdf file — rescale","text":"","code":"rescale(data, ..., m = 0, sd = 1)"},{"path":"/reference/rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescales values of an scdf file — rescale","text":"data single-case data frame. See scdf() learn format. ... Names variables standardized. m target mean. set NULL, changed. sd target standard deviation. set NULL, changed.","code":""},{"path":"/reference/rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescales values of an scdf file — rescale","text":"scdf scaled values.","code":""},{"path":[]},{"path":"/reference/rescale.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rescales values of an scdf file — rescale","text":"Juergen Wilbert","code":""},{"path":"/reference/rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescales values of an scdf file — rescale","text":"","code":"## Standardize a multiple case scdf and compute an hplm exampleAB_50 |>   rescale(values, mt) |>   hplm() #> Hierarchical Piecewise Linear Regression #>  #> Estimation method ML  #> Contrast model: W / level: first, slope: first #> 50 Cases #>  #> AIC = 508.2253, BIC = 539.6087 #> ICC = 0.287; L = 339.0; p = 0.000  #>  #> Fixed effects (values ~ 1 + mt + phaseB + interB) #>  #>                             B    SE   df       t p #> Intercept              -1.251 0.075 1328 -16.716 0 #> Trend (mt)              0.242 0.048 1328   5.006 0 #> Level phase B (phaseB)  0.708 0.033 1328  21.436 0 #> Slope phase B (interB)  0.377 0.050 1328   7.588 0 #>  #> Random effects (~1 | case) #>  #>              SD #> Intercept 0.503 #> Residual  0.266"},{"path":"/reference/sample_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Samples random names — sample_names","title":"Samples random names — sample_names","text":"Samples random names","code":""},{"path":"/reference/sample_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Samples random names — sample_names","text":"","code":"sample_names(n = 1, type = \"neutral\", seed = NULL)"},{"path":"/reference/sample_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Samples random names — sample_names","text":"n Number names type \"neutral\", \"male\", \"female\", \"mixed\" seed seed random number generator.","code":""},{"path":"/reference/sample_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Samples random names — sample_names","text":"character vector random names","code":""},{"path":"/reference/sample_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Samples random names — sample_names","text":"","code":"sample_names(3) #> [1] \"Marion\"  \"Kyrie\"   \"Charley\""},{"path":"/reference/scan-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Single-Case Data Analyses — scan-package","title":"Single-Case Data Analyses — scan-package","text":"collection procedures analysing, visualising, managing single-case data.","code":""},{"path":[]},{"path":"/reference/scan-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Single-Case Data Analyses — scan-package","text":"Juergen Wilbert [aut, cre]","code":""},{"path":"/reference/scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Single case data frame — scdf","title":"Single case data frame — scdf","text":"scdf() constructor objects class scdf. stores data single-case studies one cases structured format suitable analysis scan package.","code":""},{"path":"/reference/scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single case data frame — scdf","text":"","code":"scdf(   ...,   B_start = NULL,   phase_starts = NULL,   phase_design = NULL,   name = NULL,   dvar = \"values\",   pvar = \"phase\",   mvar = \"mt\" )"},{"path":"/reference/scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single case data frame — scdf","text":"... One vectors representing measurement variables. See Details section. B_start first measurement point phase B (simple coding; applicable design follows strict AB pattern). phase_starts named vector defining label measurement time phase start. example: phase_starts = c(A1 = 1, B1 = 6, A2 = 14, B2 = 19). phase_design named vector defining length label phase. example: phase_design = c(A1 = 10, B1 = 10, A2 = 10, B2 = 10). name Optional name case. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file.","code":""},{"path":"/reference/scdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single case data frame — scdf","text":"Returns single-case data frame scdf suitable functions scan package.","code":""},{"path":"/reference/scdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single case data frame — scdf","text":"variable matching name dependent variable provided (default name values, can changed via dvar argument), first provided variable unnamed, variable interpreted dependent variable. measurement-time variable provided (default name mt, configurable via mvar argument), measurement times automatically defined sequence (1, 2, 3, ..., n). dependent variable named vector, names used define phase design. example, values = c(= 2, 3, 5, 4, 3, B = 6, 5, 4, 3) interpreted AB phase design five measurements phase four phase B. vector matching name phase variable provided, used define phase design directly.","code":""},{"path":[]},{"path":"/reference/scdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Single case data frame — scdf","text":"Juergen Wilbert","code":""},{"path":"/reference/scdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single case data frame — scdf","text":"","code":"## Scores on a letter naming task were collected on eleven days in a row. ## The intervention started after the fifth measurement, ## so the first B phase measurement was 6 (B_start = 6). klaas <- scdf(   c(5, 7, 8, 5, 7, 12, 16, 18, 15, 14, 19),   B_start = 6, name = \"Klaas\" ) describe(klaas) #> Describe Single-Case Data #>  #>        Klaas #> Design   A-B #> n.A        5 #> n.B        6 #> mis.A      0 #> mis.B      0 #>  #>          Klaas #> m.A        6.4 #> m.B     15.667 #> md.A         7 #> md.B      15.5 #> sd.A     1.342 #> sd.B     2.582 #> mad.A    1.483 #> mad.B    2.965 #> min.A        5 #> min.B       12 #> max.A        8 #> max.B       19 #> trend.A    0.2 #> trend.B  0.743  # Alternative: using named vector klaas <- scdf(   c(A = 5, 7, 8, 5, 7, B = 12, 16, 18, 15, 14, 19),   name = \"Klaas\" )  # Alternative: using phase_design klaas <- scdf(   c(5, 7, 8, 5, 7, 12, 16, 18, 15, 14, 19),   phase_design = c(A = 5, B = 6), name = \"Klaas\" )  # Alternative: using phase_starts klaas <- scdf(   c(5, 7, 8, 5, 7, 12, 16, 18, 15, 14, 19),   phase_starts = c(A = 1, B = 7), name = \"Klaas\" )  ## Unfortunately in a similar study there were no data collected on ## days 3 and 9. Use NA to pass them to the function: emmi <- scdf(c(5, 7, NA, 5, 7, 12, 16, 18, NA, 14, 19),   phase_design = c(A = 5, B = 6), name = \"Emmi\" ) describe(emmi) #> Describe Single-Case Data #>  #>        Emmi #> Design  A-B #> n.A       5 #> n.B       6 #> mis.A     1 #> mis.B     1 #>  #>          Emmi #> m.A         6 #> m.B      15.8 #> md.A        6 #> md.B       16 #> sd.A    1.155 #> sd.B    2.864 #> mad.A   1.483 #> mad.B   2.965 #> min.A       5 #> min.B      12 #> max.A       7 #> max.B      19 #> trend.A   0.2 #> trend.B 0.779  ## In a MBD over three cases, data were collected eleven days in a row. ## Intervention starting points differ between subjects as they were ## randomly assigned. The three SCDFs are then combined in a list for ## further conjoined analyses. charlotte <- scdf(c(A = 5, 7, 10, 5, 12, B = 7, 10, 18, 15, 14, 19)) theresa <- scdf(c(A = 3, 4, 3, 5, B = 7, 4, 7, 9, 8, 10, 12)) tonia <- scdf(c(A = 9, 8, 8, 7, 5, 7, B = 6, 14, 15, 12, 16)) mbd <- c(charlotte, theresa, tonia) names(mbd) <- c(\"Charlotte\", \"Theresa\", \"Tonia\") overlap(mbd) #> Overlap Indices #>  #> Comparing phase 1 against phase 2  #>  #>              Charlotte Theresa Tonia #> Design             A-B     A-B   A-B #> PND                 67      86    80 #> PEM                 83     100    80 #> PET                 33      86   100 #> NAP                 87      95    83 #> NAP rescaled        73      89    67 #> PAND                82      82    82 #> IRD               0.63    0.80  0.82 #> Tau_U(A)          0.37    0.52  0.63 #> Tau_U(BA)         0.49    0.71  0.69 #> Base_Tau          0.56    0.66  0.66 #> Diff_mean         6.03    4.39  5.27 #> Diff_trend        0.77    0.50  2.37 #> SMD               1.94    4.59  3.85 #> Hedges_g          1.37    1.87  1.70  ## In a classroom-based intervention it was not possible to measure outcomes ## every day, but only on schooldays. The sequence of measurements is passed ## to the package by using a vector of measurement times. frida <- scdf(   c(A = 3, 2, 4, 2, 2, 3, 5, 6, B = 8, 10, 8, 12, 14, 13, 12),   mt = c(1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18) ) summary(frida) #> #A single-case data frame with one case #>  #>            Measurements Design #>  [case #1]           15    A-B #>  #> Variable names: #> values <dependent variable> #> phase <phase variable> #> mt <measurement-time variable> #>  describe(frida) #> Describe Single-Case Data #>  #>        [case #1] #> Design       A-B #> n.A            8 #> n.B            7 #> mis.A          0 #> mis.B          0 #>  #>         [case #1] #> m.A         3.375 #> m.B            11 #> md.A            3 #> md.B           12 #> sd.A        1.506 #> sd.B         2.38 #> mad.A       1.483 #> mad.B       2.965 #> min.A           2 #> min.B           8 #> max.A           6 #> max.B          14 #> trend.A     0.305 #> trend.B      0.71  ## example with two independent variables and four phases jim <- scdf(   zvt = c(47, 58, 76, 63, 71, 59, 64, 69, 72, 77, 76, 73),   d2 = c(131, 134, 141, 141, 140, 140, 138, 140, 141, 140, 138, 140),   phase_design = c(A1 = 3, B1 = 3, A2 = 3, B2 = 3), dvar = \"zvt\" ) overlap(jim, phases = list(c(\"A1\", \"A2\"), c(\"B1\", \"B2\"))) #> Overlap Indices #>  #> Comparing phases A1 + A2 against phases B1 + B2  #>  #>                [case #1] #> Design       A1-B1-A2-B2 #> PND                   17 #> PEM                   67 #> PET                   67 #> NAP                   68 #> NAP rescaled          36 #> PAND                  67 #> IRD                 0.33 #> Tau_U(A)            0.07 #> Tau_U(BA)           0.14 #> Base_Tau            0.27 #> Diff_mean            5.5 #> Diff_trend         -0.31 #> SMD                 0.52 #> Hedges_g            0.56 #>  #> The following variables were used in this analysis: #> 'zvt' as dependent variable, 'phase' as phase variable, and 'mt' as measurement-time variable."},{"path":"/reference/scdf_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get scdf attributes — scdf_attr","title":"Set and get scdf attributes — scdf_attr","text":"Set get scdf attributes","code":""},{"path":"/reference/scdf_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get scdf attributes — scdf_attr","text":"","code":"scdf_attr(x, var = NULL)  scdf_attr(x, var) <- value  dv(scdf)  mt(scdf)  phase(scdf)"},{"path":"/reference/scdf_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get scdf attributes — scdf_attr","text":"x Variable var Attribute value set value scdf scdf object.","code":""},{"path":"/reference/scdf_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set and get scdf attributes — scdf_attr","text":"Attribute value","code":""},{"path":"/reference/select_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a subset of cases — select_cases","title":"Select a subset of cases — select_cases","text":"Select subset cases","code":""},{"path":"/reference/select_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a subset of cases — select_cases","text":"","code":"select_cases(scdf, ...)"},{"path":"/reference/select_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a subset of cases — select_cases","text":"scdf single-case data frame. See scdf() learn format. ... Selection criteria. Either numeric, objectnames, characters.","code":""},{"path":"/reference/select_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a subset of cases — select_cases","text":"scdf subset cases","code":""},{"path":[]},{"path":"/reference/select_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a subset of cases — select_cases","text":"","code":"select_cases(exampleAB, Johanna, Karolina) #> #A single-case data frame with two cases #>  #>  Johanna: values mt phase │ Karolina: values mt phase │ #>               54  1     A │               41  1     A │ #>               53  2     A │               59  2     A │ #>               56  3     A │               56  3     A │ #>               58  4     A │               51  4     A │ #>               52  5     A │               52  5     A │ #>               61  6     B │               57  6     B │ #>               62  7     B │               56  7     B │ #>               71  8     B │               67  8     B │ #>               66  9     B │               75  9     B │ #>               64 10     B │               66 10     B │ #>               78 11     B │               69 11     B │ #>               70 12     B │               68 12     B │ #>               74 13     B │               73 13     B │ #>               82 14     B │               77 14     B │ #>               77 15     B │               79 15     B │ #> # ... up to five more rows select_cases(exampleAB, c(Johanna, Karolina)) #> #A single-case data frame with two cases #>  #>  Johanna: values mt phase │ Karolina: values mt phase │ #>               54  1     A │               41  1     A │ #>               53  2     A │               59  2     A │ #>               56  3     A │               56  3     A │ #>               58  4     A │               51  4     A │ #>               52  5     A │               52  5     A │ #>               61  6     B │               57  6     B │ #>               62  7     B │               56  7     B │ #>               71  8     B │               67  8     B │ #>               66  9     B │               75  9     B │ #>               64 10     B │               66 10     B │ #>               78 11     B │               69 11     B │ #>               70 12     B │               68 12     B │ #>               74 13     B │               73 13     B │ #>               82 14     B │               77 14     B │ #>               77 15     B │               79 15     B │ #> # ... up to five more rows select_cases(exampleAB, 1,2) #> #A single-case data frame with two cases #>  #>  Johanna: values mt phase │ Karolina: values mt phase │ #>               54  1     A │               41  1     A │ #>               53  2     A │               59  2     A │ #>               56  3     A │               56  3     A │ #>               58  4     A │               51  4     A │ #>               52  5     A │               52  5     A │ #>               61  6     B │               57  6     B │ #>               62  7     B │               56  7     B │ #>               71  8     B │               67  8     B │ #>               66  9     B │               75  9     B │ #>               64 10     B │               66 10     B │ #>               78 11     B │               69 11     B │ #>               70 12     B │               68 12     B │ #>               74 13     B │               73 13     B │ #>               82 14     B │               77 14     B │ #>               77 15     B │               79 15     B │ #> # ... up to five more rows select_cases(exampleAB, 1:2) #> #A single-case data frame with two cases #>  #>  Johanna: values mt phase │ Karolina: values mt phase │ #>               54  1     A │               41  1     A │ #>               53  2     A │               59  2     A │ #>               56  3     A │               56  3     A │ #>               58  4     A │               51  4     A │ #>               52  5     A │               52  5     A │ #>               61  6     B │               57  6     B │ #>               62  7     B │               56  7     B │ #>               71  8     B │               67  8     B │ #>               66  9     B │               75  9     B │ #>               64 10     B │               66 10     B │ #>               78 11     B │               69 11     B │ #>               70 12     B │               68 12     B │ #>               74 13     B │               73 13     B │ #>               82 14     B │               77 14     B │ #>               77 15     B │               79 15     B │ #> # ... up to five more rows select_cases(exampleAB, -Johanna) #> #A single-case data frame with two cases #>  #>  Karolina: values mt phase │ Anja: values mt phase │ #>                41  1     A │           55  1     A │ #>                59  2     A │           58  2     A │ #>                56  3     A │           53  3     A │ #>                51  4     A │           50  4     A │ #>                52  5     A │           52  5     A │ #>                57  6     B │           55  6     B │ #>                56  7     B │           68  7     B │ #>                67  8     B │           68  8     B │ #>                75  9     B │           81  9     B │ #>                66 10     B │           67 10     B │ #>                69 11     B │           78 11     B │ #>                68 12     B │           73 12     B │ #>                73 13     B │           72 13     B │ #>                77 14     B │           78 14     B │ #>                79 15     B │           81 15     B │ #> # ... up to five more rows select_cases(exampleAB, -c(Johanna, Karolina)) #> #A single-case data frame with one case #>  #>  Anja: values mt phase #>            55  1     A #>            58  2     A #>            53  3     A #>            50  4     A #>            52  5     A #>            55  6     B #>            68  7     B #>            68  8     B #>            81  9     B #>            67 10     B #>            78 11     B #>            73 12     B #>            72 13     B #>            78 14     B #>            81 15     B #> # ... up to five more rows v <- c(\"Moritz\", \"Jannis\") select_cases(exampleA1B1A2B2, v) #> Error in eval(x, envir = nl, enclos = parent.frame()): object 'v' not found"},{"path":"/reference/select_phases.html","id":null,"dir":"Reference","previous_headings":"","what":"Select and combine phases for overlap analyses — select_phases","title":"Select and combine phases for overlap analyses — select_phases","text":"Useful working pipe operators.","code":""},{"path":"/reference/select_phases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select and combine phases for overlap analyses — select_phases","text":"","code":"select_phases(data, A, B, phase_names = \"auto\")"},{"path":"/reference/select_phases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select and combine phases for overlap analyses — select_phases","text":"data single-case data frame. See scdf() learn format. Selection phase B Selection B phase phase_names character vector names resulting phases. default \"auto\" generates phase names combination names recombined phases.","code":""},{"path":"/reference/select_phases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select and combine phases for overlap analyses — select_phases","text":"scdf selected phases","code":""},{"path":"/reference/select_phases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select and combine phases for overlap analyses — select_phases","text":"","code":"exampleA1B1A2B2_zvt |>   select_phases(A = c(1, 3), B = c(2, 4)) |>   overlap() #> Overlap Indices #>  #> Comparing phase 1 against phase 2  #>  #>                   Tick     Trick     Track #> Design       A1A2-B1B2 A1A2-B1B2 A1A2-B1B2 #> PND                 17         0        17 #> PEM                 67        50        50 #> PET                 67        33        33 #> NAP                 68        51        58 #> NAP rescaled        36         3        17 #> PAND                67        50        67 #> IRD               0.33      0.33      0.17 #> Tau_U(A)          0.07     -0.16     -0.04 #> Tau_U(BA)         0.14      0.03     -0.03 #> Base_Tau          0.27     -0.25      0.13 #> Diff_mean         5.50      3.17      0.83 #> Diff_trend       -0.31     -1.10     -0.74 #> SMD               0.52      0.40      0.26 #> Hedges_g          0.56      0.50      0.26 #>  #> The following variables were used in this analysis: #> 'zvt' as dependent variable, 'part' as phase variable, and 'day' as measurement-time variable."},{"path":"/reference/set_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Set analysis variables in an scdf — set_vars","title":"Set analysis variables in an scdf — set_vars","text":"Set analysis variables scdf","code":""},{"path":"/reference/set_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set analysis variables in an scdf — set_vars","text":"","code":"set_vars(data, dvar, mvar, pvar)  set_dvar(data, dvar)  set_mvar(data, mvar)  set_pvar(data, pvar)"},{"path":"/reference/set_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set analysis variables in an scdf — set_vars","text":"data single-case data frame. See scdf() learn format. dvar Character string. Name dependent variable. mvar Character string. Name measurement-time variable. pvar Character string. Name phase variable.","code":""},{"path":[]},{"path":"/reference/set_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set analysis variables in an scdf — set_vars","text":"","code":"exampleAB_add |>   set_dvar(\"depression\") |>   describe() #> Describe Single-Case Data #>  #>                           Rolf #> Design         Base-Medication #> n.Base                      15 #> n.Medication                25 #> mis.Base                     0 #> mis.Medication               0 #>  #>                    Rolf #> m.Base                5 #> m.Medication       4.36 #> md.Base               6 #> md.Medication         3 #> sd.Base           2.673 #> sd.Medication     3.252 #> mad.Base          2.965 #> mad.Medication    2.965 #> min.Base              0 #> min.Medication        0 #> max.Base              9 #> max.Medication       10 #> trend.Base        0.114 #> trend.Medication -0.051 #>  #> The following variables were used in this analysis: #> 'depression' as dependent variable, 'phase' as phase variable, and 'day' as measurement-time variable."},{"path":"/reference/shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift values in a single-case data file — shift","title":"Shift values in a single-case data file — shift","text":"function superseded much versatile transform.scdf function. Shifting values might helpful cases measurement time given time variable (see example ).","code":""},{"path":"/reference/shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift values in a single-case data file — shift","text":"","code":"shift(data, value, var)"},{"path":"/reference/shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift values in a single-case data file — shift","text":"data single-case data frame. See scdf() learn format. value Number shift values var Character string name target variable. Defaults measurement time variable.","code":""},{"path":"/reference/shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift values in a single-case data file — shift","text":"scdf shifted data","code":""},{"path":[]},{"path":"/reference/shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift values in a single-case data file — shift","text":"","code":"### Shift the measurement time for a better estimation of the intercept ex <- shift(example_A24, value = -1996) #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'transform' instead of 'shift'. plm(ex) #> Piecewise Regression Analysis #>  #> Contrast model: W / level = first, slope = first #>  #> Fitted a gaussian distribution. #> F(3, 19) = 46.74; p = 0.000; R² = 0.881; Adjusted R² = 0.862; AIC = 221.5733 #>  #>                               B LL-CI95% UL-CI95%     SE      t     p delta R² #> Intercept               258.714  223.364  294.065 18.036 14.344 0.000          #> Trend (year)              1.857   -7.947   11.662  5.002  0.371 0.715    0.001 #> Level phase B (phaseB) -150.383 -200.743 -100.024 25.694 -5.853 0.000    0.215 #> Slope phase B (interB)   -1.726  -11.926    8.474  5.204 -0.332 0.744    0.001 #>  #> Autocorrelations of the residuals #>  lag    cr #>    1  0.10 #>    2 -0.13 #>    3 -0.10 #> Ljung-Box test: X²(3) = 0.99; p = 0.804  #>  #> Formula: injuries ~ 1 + year + phaseB + interB   # Please use transform instead: example_A24 |>   transform(year = year - 1996) |>   plm() #> Piecewise Regression Analysis #>  #> Contrast model: W / level = first, slope = first #>  #> Fitted a gaussian distribution. #> F(3, 19) = 46.74; p = 0.000; R² = 0.881; Adjusted R² = 0.862; AIC = 221.5733 #>  #>                               B LL-CI95% UL-CI95%     SE      t     p delta R² #> Intercept               258.714  223.364  294.065 18.036 14.344 0.000          #> Trend (year)              1.857   -7.947   11.662  5.002  0.371 0.715    0.001 #> Level phase B (phaseB) -150.383 -200.743 -100.024 25.694 -5.853 0.000    0.215 #> Slope phase B (interB)   -1.726  -11.926    8.474  5.204 -0.332 0.744    0.001 #>  #> Autocorrelations of the residuals #>  lag    cr #>    1  0.10 #>    2 -0.13 #>    3 -0.10 #> Ljung-Box test: X²(3) = 0.99; p = 0.804  #>  #> Formula: injuries ~ 1 + year + phaseB + interB"},{"path":"/reference/shinyscan.html","id":null,"dir":"Reference","previous_headings":"","what":"A Shiny app for scan — shinyscan","title":"A Shiny app for scan — shinyscan","text":"Run Shiny app scan functions.","code":""},{"path":"/reference/shinyscan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Shiny app for scan — shinyscan","text":"","code":"shinyscan(quiet = TRUE, browser = c(\"external\", \"viewer\"), ...)"},{"path":"/reference/shinyscan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Shiny app for scan — shinyscan","text":"quiet TRUE (default) report shiny messages console. browser c(\"external\",\"viewer\") ... arguments passed shiny::runApp() function.","code":""},{"path":"/reference/shinyscan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Shiny app for scan — shinyscan","text":"function launches shiny application. need scplot shiny installed. packages suggested necessarily installed along scan. shinyscan() ask install missing packages.","code":""},{"path":"/reference/smd.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized mean differences — smd","title":"Standardized mean differences — smd","text":"smd() function provides various standardized mean effect sizes single-case data.","code":""},{"path":"/reference/smd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized mean differences — smd","text":"","code":"smd(data, dvar, pvar, mvar, phases = c(1, 2))"},{"path":"/reference/smd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized mean differences — smd","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2).","code":""},{"path":"/reference/smd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized mean differences — smd","text":"'sd cohen' (unweigted) average variance phase B. 'sd Hedges' weighted average variance phase B (degrees freedom correction). 'Hedges' g' mean difference divided 'sd Hedges'. 'Hedges' g correction' 'Hedges' g durlak correction' two approaches correcting Hedges' g small sample sizes. 'Glass' delta' mean difference divided standard deviation -phase. 'Cohens d' mean difference divided 'sd cohen'.","code":""},{"path":[]},{"path":"/reference/smd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized mean differences — smd","text":"Juergen Wilbert","code":""},{"path":"/reference/smd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized mean differences — smd","text":"","code":"smd(exampleAB) #> Standardized mean differences #>  #>                             Johanna Karolina  Anja #> mA                            54.60    51.80 53.60 #> mB                            74.13    73.47 74.07 #> sdA                            2.41     6.83  3.05 #> sdB                            8.94     9.76  7.57 #> sd cohen                       6.55     8.43  5.77 #> sd hedges                      7.97     9.19  6.83 #> Glass' delta                   8.11     3.17  6.71 #> Hedges' g                      2.45     2.36  3.00 #> Hedges' g correction           2.35     2.26  2.87 #> Hedges' g durlak correction    2.23     2.14  2.72 #> Cohen's d                      2.98     2.57  3.54 #>"},{"path":"/reference/smooth_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothing single-case data — smooth_cases","title":"Smoothing single-case data — smooth_cases","text":"function superseded versatile transform.scdf function. smooth_cases function provides procedures smooth single-case data (.e., eliminate noise). moving average function (mean- median-based) replaces data point average surrounding data points step--step. local regression function, data point regressed surrounding data points.","code":""},{"path":"/reference/smooth_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothing single-case data — smooth_cases","text":"","code":"smooth_cases(data, dvar, mvar, method = \"mean\", intensity = NULL, FUN = NULL)"},{"path":"/reference/smooth_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothing single-case data — smooth_cases","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. method, FUN Method determining smoothed scores. Default method = \"median\" moving median function. possible values : \"mean\" non-parametric \"regression\". intensity method = \"median\" \"mean\" lag used computing average. Default intensity = 1. case method = \"regression\" proportion surrounding data influencing data point, intensity = 0.2 default.","code":""},{"path":"/reference/smooth_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothing single-case data — smooth_cases","text":"Returns data frame (single-case) smoothed data points. See scdf learn format data frames.","code":""},{"path":"/reference/smooth_cases.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smoothing single-case data — smooth_cases","text":"moving_median, moving_mean, local_regression helper function transform.scdf returning smoothed values numeric vector.","code":""},{"path":[]},{"path":"/reference/smooth_cases.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Smoothing single-case data — smooth_cases","text":"Juergen Wilbert","code":""},{"path":"/reference/smooth_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smoothing single-case data — smooth_cases","text":"","code":"## Use the three different smoothing functions and compare the results study <- c(   \"Original\" = Huber2014$Berta,   \"Moving median\" = smooth_cases(Huber2014$Berta, method = \"median\"),   \"Moving mean\" = smooth_cases(Huber2014$Berta, method = \"mean\"),   \"Local regression\" = smooth_cases(Huber2014$Berta, method = \"regression\") ) plot(study) #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'plot'. #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'style_plot'.   Huber2014$Berta |> transform(   \"compliance (moving median)\" = moving_median(compliance),   \"compliance (moving mean)\" = moving_mean(compliance),   \"compliance (local regression)\" = local_regression(compliance, mt) ) #> #A single-case data frame with one case #>  #>  Berta: compliance mt phase compliance (moving median) compliance (moving mean) #>                 25  1     A                         25                       25 #>               20.8  2     A                         25                    28.47 #>               39.6  3     A                       39.6                    47.69 #>                 75  4     A                         45                     55.9 #>                 45  5     A                         45                     38.5 #>               14.6  6     A                         45                    32.97 #>               45.8  7     A                         45                    37.36 #>               33.3  8     A                       33.3                    33.99 #>               31.3  9     A                       32.5                     32.6 #>               32.5 10     A                       32.5                     23.1 #>                4.2 11     B                       32.5                    24.37 #>               45.8 12     B                       32.5                    33.82 #>               31.3 13     B                       31.3                    24.84 #>                9.4 14     B                        9.4                    13.51 #>                6.3 15     B                        6.3                        8 #>  compliance (local regression) #>                          22.02 #>                          28.81 #>                           39.6 #>                           42.3 #>                             45 #>                           45.4 #>                           45.8 #>                          36.07 #>                           32.2 #>                           32.5 #>                          39.15 #>                           45.8 #>                          29.41 #>                          15.05 #>                           6.58 #> # ... up to 14 more rows"},{"path":"/reference/standardize.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize values of an scdf file — standardize","title":"Standardize values of an scdf file — standardize","text":"function superseded much versatile transform.scdf function (see example ). function scales measured values scdf file. allows mean centering standardization based single-case data set scaling across cases included scdf.","code":""},{"path":"/reference/standardize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize values of an scdf file — standardize","text":"","code":"standardize(   data,   var,   center = TRUE,   scale = FALSE,   m = 0,   sd = 1,   grand = TRUE )"},{"path":"/reference/standardize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize values of an scdf file — standardize","text":"data single-case data frame. See scdf() learn format. var character string vector character strings variable names scaled. center set TRUE, data mean centered. scale set TRUE, standard deviation set. m target mean centering. sd target standard deviation scaling grand set TRUE, scaling based mean standard deviation values across single-cases within scdf.","code":""},{"path":"/reference/standardize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize values of an scdf file — standardize","text":"scdf scaled values.","code":""},{"path":[]},{"path":"/reference/standardize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardize values of an scdf file — standardize","text":"Juergen Wilbert","code":""},{"path":"/reference/standardize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize values of an scdf file — standardize","text":"","code":"## Standardize a multiple case scdf and compute an hplm exampleAB_50 |>   standardize(\"values\", center = TRUE, scale = TRUE) |>   hplm() #> Hierarchical Piecewise Linear Regression #>  #> Estimation method ML  #> Contrast model: W / level: first, slope: first #> 50 Cases #>  #> AIC = 508.2253, BIC = 539.6087 #> ICC = 0.287; L = 339.0; p = 0.000  #>  #> Fixed effects (values ~ 1 + mt + phaseB + interB) #>  #>                             B    SE   df       t p #> Intercept              -1.251 0.075 1328 -16.716 0 #> Trend (mt)              0.029 0.006 1328   5.006 0 #> Level phase B (phaseB)  0.708 0.033 1328  21.436 0 #> Slope phase B (interB)  0.046 0.006 1328   7.588 0 #>  #> Random effects (~1 | case) #>  #>              SD #> Intercept 0.503 #> Residual  0.266  ## The more versatile transform function supersedes standardize: exampleAB_50 |>   transform(values = (values - mean(all(values))) / sd(all(values))) |>   hplm() #> Hierarchical Piecewise Linear Regression #>  #> Estimation method ML  #> Contrast model: W / level: first, slope: first #> 50 Cases #>  #> AIC = 508.2253, BIC = 539.6087 #> ICC = 0.287; L = 339.0; p = 0.000  #>  #> Fixed effects (values ~ 1 + mt + phaseB + interB) #>  #>                             B    SE   df       t p #> Intercept              -1.251 0.075 1328 -16.716 0 #> Trend (mt)              0.029 0.006 1328   5.006 0 #> Level phase B (phaseB)  0.708 0.033 1328  21.436 0 #> Slope phase B (interB)  0.046 0.006 1328   7.588 0 #>  #> Random effects (~1 | case) #>  #>              SD #> Intercept 0.503 #> Residual  0.266"},{"path":"/reference/style_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated) Create styles for single-case data plots — style_plot","title":"(Deprecated) Create styles for single-case data plots — style_plot","text":"style_plot function used create graphical styles single-case plot","code":""},{"path":"/reference/style_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated) Create styles for single-case data plots — style_plot","text":"","code":"style_plot(style = \"default\", ...)"},{"path":"/reference/style_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated) Create styles for single-case data plots — style_plot","text":"style character string vector character strings predefined styles. ... arguments passed plot command.","code":""},{"path":"/reference/style_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated) Create styles for single-case data plots — style_plot","text":"Returns list provided style argument plot.scdf() function. fill set, area line filled given color (e.g., fill = \"tomato\"). Use standard R command colors() get list possible colours. fill empty default. annotations list parameters defining annotations data point. adds score MT plot. \"pos\" Position annotations: 1 = , 2 = left, 3 = , 4 = right. \"col\" Color annotations. \"cex\" Size annotations. \"round\" Rounds values specified decimal. annotations = list(pos = 3, col = \"brown\", round = 1) adds scores rounded one decimal data point brown color plot. \"names\" list parameters defining depiction phase names (e.g. names = list(cex = 0.8,   col = \"red\", side = 1): cex size, col color, side position). See mtext details. \"lwd\" Width plot line. Default lwd = 2. \"pch\" Point type. Default pch = 17 (triangles). options example: 16 (filled circles) \"\" (uses letter ). \"main\" Main title plot. \"mai\" Sets margins plot. \"bty\" Shape frame surrounding inner plot \"fill.bg\" Background color plot. vector provided, colors assigned phases (phase name becomes color). \"grid\" Color grid. \"text.ABlag\" Text displayed phases. \"cex.axis\" Size axis annotations \"las\" Orientation axis annotations \"col.lines\" Color lines \"col.dots\" Color dots \"col.seperator\" Color phase seperating lines \"col.bg\" Color outer plot \"col\" General color setting plot \"col.text\" Color labels plot.","code":""},{"path":"/reference/style_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Deprecated) Create styles for single-case data plots — style_plot","text":"style_plot(\"\") return list predefined styles. Predefined styles can combined style_plot(style = c(\"grid2\",   \"tiny\")) settings latter style overwrite settings former. Additional style paramters set following style argument can combined : style_plot(style = \"grid2\", fill =   \"grey50\", pch = 18).","code":""},{"path":[]},{"path":"/reference/style_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"(Deprecated) Create styles for single-case data plots — style_plot","text":"Juergen Wilbert","code":""},{"path":"/reference/style_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Deprecated) Create styles for single-case data plots — style_plot","text":"","code":"newstyle <- style_plot(style = \"default\") #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'style_plot'. newstyle$text.ABlag <- c(\"START\", \"END\") newstyle$col.dots <- \"\" newstyle$annotations <- list(cex = 0.6, col = \"grey10\", offset = 0.4) newstyle$names <- list(cex = 0.8, col = \"blue\", side = 1, adj = 1, line = -1, at = 31) newstyle$fill.bg <- c(\"grey99\", \"grey95\", \"grey90\") plot(exampleABC, style = newstyle, main = \"Example Plot\") #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'plot'. #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'style_plot'."},{"path":"/reference/subset.scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset cases, rows, and variables — subset.scdf","title":"Subset cases, rows, and variables — subset.scdf","text":"function mainly used filter rows logical expression. also arguments filter variables cases.","code":""},{"path":"/reference/subset.scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset cases, rows, and variables — subset.scdf","text":"","code":"# S3 method for class 'scdf' subset(x, subset, select, cases, ...)"},{"path":"/reference/subset.scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset cases, rows, and variables — subset.scdf","text":"x scdf object. subset Logical expression indicating rows keep: missing values taken false. select Expression, indicating columns select scdf. cases Expression, indicating cases keep scdf. ... implemented","code":""},{"path":"/reference/subset.scdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset cases, rows, and variables — subset.scdf","text":"scdf.","code":""},{"path":"/reference/subset.scdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset cases, rows, and variables — subset.scdf","text":"","code":"exampleAB |>   subset((values < 60 & phase == \"A\") | (values >= 60 & phase == \"B\")) #> #A single-case data frame with three cases #>  #>  Johanna: values mt phase │ Karolina: values mt phase │ Anja: values mt phase │ #>               54  1     A │               41  1     A │           55  1     A │ #>               53  2     A │               59  2     A │           58  2     A │ #>               56  3     A │               56  3     A │           53  3     A │ #>               58  4     A │               51  4     A │           50  4     A │ #>               52  5     A │               52  5     A │           52  5     A │ #>               61  6     B │               67  8     B │           68  7     B │ #>               62  7     B │               75  9     B │           68  8     B │ #>               71  8     B │               66 10     B │           81  9     B │ #>               66  9     B │               69 11     B │           67 10     B │ #>               64 10     B │               68 12     B │           78 11     B │ #>               78 11     B │               73 13     B │           73 12     B │ #>               70 12     B │               77 14     B │           72 13     B │ #>               74 13     B │               79 15     B │           78 14     B │ #>               82 14     B │               86 16     B │           81 15     B │ #>               77 15     B │               82 17     B │           78 16     B │ #> # ... up to five more rows subset(exampleAB_add, select = c(-cigarrets, -depression)) #> #A single-case data frame with one case #>  #>  Rolf: day wellbeing phase #>          1        46  Base #>          2        49  Base #>          3        49  Base #>          4        49  Base #>          5        50  Base #>          6        47  Base #>          7        45  Base #>          8        59  Base #>          9        58  Base #>         10        59  Base #>         11        59  Base #>         12        43  Base #>         13        46  Base #>         14        52  Base #>         15        55  Base #> # ... up to 25 more rows subset(exampleAB, cases = c(Karolina, Johanna)) #> #A single-case data frame with two cases #>  #>  Karolina: values mt phase │ Johanna: values mt phase │ #>                41  1     A │              54  1     A │ #>                59  2     A │              53  2     A │ #>                56  3     A │              56  3     A │ #>                51  4     A │              58  4     A │ #>                52  5     A │              52  5     A │ #>                57  6     B │              61  6     B │ #>                56  7     B │              62  7     B │ #>                67  8     B │              71  8     B │ #>                75  9     B │              66  9     B │ #>                66 10     B │              64 10     B │ #>                69 11     B │              78 11     B │ #>                68 12     B │              70 12     B │ #>                73 13     B │              74 13     B │ #>                77 14     B │              82 14     B │ #>                79 15     B │              77 15     B │ #> # ... up to five more rows subset(exampleA1B1A2B2, phase %in% c(\"A1\", \"B2\"), cases = Pawel:Moritz) #> #A single-case data frame with two cases #>  #>  Pawel: values mt phase │ Moritz: values mt phase │ #>             10  1    A1 │             15  1    A1 │ #>             19  2    A1 │             11  2    A1 │ #>             11  3    A1 │             12  3    A1 │ #>              6  4    A1 │             10  4    A1 │ #>             16  5    A1 │             12  5    A1 │ #>             16  6    A1 │             18  6    A1 │ #>             17  7    A1 │             16  7    A1 │ #>             18  8    A1 │             18  8    A1 │ #>             12  9    A1 │             12  9    A1 │ #>             12 10    A1 │             12 10    A1 │ #>             34 31    B2 │             11 11    A1 │ #>             35 32    B2 │             10 12    A1 │ #>             28 33    B2 │             13 13    A1 │ #>             30 34    B2 │              9 14    A1 │ #>             22 35    B2 │             14 15    A1 │ #> # ... up to 10 more rows"},{"path":"/reference/summary.scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for an scdf — summary.scdf","title":"Summary function for an scdf — summary.scdf","text":"Summary function scdf","code":""},{"path":"/reference/summary.scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for an scdf — summary.scdf","text":"","code":"# S3 method for class 'scdf' summary(object, all_cases = FALSE, ...)"},{"path":"/reference/summary.scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for an scdf — summary.scdf","text":"object scdf all_cases TRUE, 10 cases summarized ... use","code":""},{"path":"/reference/tau_u.html","id":null,"dir":"Reference","previous_headings":"","what":"Tau-U for single-case data — tau_u","title":"Tau-U for single-case data — tau_u","text":"function calculates indices Tau-U family proposed Parker et al. (2011a).","code":""},{"path":"/reference/tau_u.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tau-U for single-case data — tau_u","text":"","code":"tau_u(   data,   dvar,   pvar,   method = c(\"complete\", \"parker\", \"tarlow\"),   phases = c(1, 2),   meta_analyses = TRUE,   ci = 0.95,   ci_method = c(\"z\", \"tau\", \"s\"),   meta_weight_method = c(\"z\", \"tau\"),   tau_method = c(\"b\", \"a\"),   continuity_correction = FALSE )  # S3 method for class 'sc_tauu' print(   x,   complete = FALSE,   digits = \"auto\",   select = c(\"Tau\", \"CI lower\", \"CI upper\", \"SD_S\", \"Z\", \"p\"),   nice_p = TRUE,   ... )  # S3 method for class 'sc_tauu' export(   object,   caption = NA,   footnote = NA,   filename = NA,   select = \"auto\",   meta = FALSE,   round = 3,   decimals = 3,   ... )"},{"path":"/reference/tau_u.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tau-U for single-case data — tau_u","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. method \"complete\" (default), \"parker\" \"tarlow\". \"parker\" calculates number possible pairs described Parker et al. (2011) might lead tau-U values greater 1. \"tarlow\" follows online calculator R code developed Tarlow (2017). phases vector two characters numbers indicating two phases compared. E.g., phases = c(\"\",\"C\") phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(1,2). meta_analyses TRUE, meta analysis conducted. ci Confidence intervals ci_method String specify method calculating standard error tau. Either \"tau\", \"z\", \"s\" (recommended). meta_weight_method String specify method calculating weights studies. Either \"tau\" \"z\". tau_method Character values \"\" \"b\" (default) indicating whether Kendall Tau Kendall Tau B applied. Ignored methods 'tarlow' 'parker'. continuity_correction TRUE, continuity correction applied calculating p-values correlations (: S reduced one calculating Z). Ignored methods 'tarlow' 'parker'. x Object returned tau_u(). complete Print parameters. digits minimum number significant digits use. set \"auto\" (default), values predefined. select Character vector name variables included. vector named, variables renamed appropriately. nice_p TRUE, p-values printed publication friendly form. ... arguments passed function. object scdf object exported scan function. caption Character string table caption. left NA (default) caption created based exported object. footnote Character string table footnote. left NA (default) footnote created based exported object. filename String containing file name. filename given output written file. meta TRUE, results meta analysis exported. FALSE, single-case exported. round Integer passed digits argument used round values. decimals Decimal places reported.","code":""},{"path":"/reference/tau_u.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tau-U for single-case data — tau_u","text":"table data frame containing statistics Tau-U family, including: Pairs, positive negative comparisons, S, Tau matrix matrix comparisons used calculating statistics. tau_u Tau-U value.","code":""},{"path":"/reference/tau_u.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tau-U for single-case data — tau_u","text":"Tau-U inconsistently operationalized construct. Parker et al. (2011b) describe method may result Tau-U outside [-1;1] interval. different implementation method (provided http://www.singlecaseresearch.org/calculators/tau-u) uses tau-b (instead tau-original formulation Parker). Bossart et. al (2018) describe inconsistencies results implementation well. Another problems lies calculation overall Tau-U values several single cases. function presented applies meta-analysis gain overall values. tau value weighted inverse variance (ie. tau standard error). confidence intervals single cases calculated Fisher-Z transforming tau, calculating confidence intervals, inverse transform back tau (see Long & Cliff, 1997).","code":""},{"path":"/reference/tau_u.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Tau-U for single-case data — tau_u","text":"print(sc_tauu): Print results export(sc_tauu): Export results html table","code":""},{"path":"/reference/tau_u.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tau-U for single-case data — tau_u","text":"Brossart, D. F., Laird, V. C., & Armstrong, T. W. (2018). Interpreting Kendall’s Tau Tau-U single-case experimental designs. Cogent Psychology, 5(1), 1–26. https://doi.org/10.1080/23311908.2018.1518687. Long, J. D., & Cliff, N. (1997). Confidence intervals Kendall’s tau. British Journal Mathematical Statistical Psychology, 50(1), 31–41. https://doi.org/10.1111/j.2044-8317.1997.tb01100.x Parker, R. ., Vannest, K. J., & Davis, J. L. (2011a). Effect Size Single-Case Research: Review Nine Nonoverlap Techniques. Behavior Modification, 35(4), 303–322. https://doi.org/10/dsdfs4 Parker, R. ., Vannest, K. J., Davis, J. L., & Sauber, S. B. (2011b). Combining Nonoverlap Trend Single-Case Research: Tau-U. Behavior Therapy, 42(2), 284–299. https://doi.org/10.1016/j.beth.2010.08.006 Tarlow, K. R. (2017, March). Tau-U single-case research (R code). Retrieved http://ktarlow.com/stats/","code":""},{"path":[]},{"path":"/reference/tau_u.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tau-U for single-case data — tau_u","text":"Juergen Wilbert","code":""},{"path":"/reference/tau_u.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tau-U for single-case data — tau_u","text":"","code":"tau_u(Grosche2011$Eva) #> Tau-U #> Method: complete  #> Applied Kendall's Tau-b #> 95% CIs for tau are reported. #> CI method: z #>  #> Case: Eva  #>                              Tau CI lower CI upper  SD_S    Z     p #> A vs. B                     0.38    -0.08     0.71 22.80 1.32   .19 #> A vs. B - Trend A           0.26    -0.22     0.64 23.42 1.41   .16 #> A vs. B + Trend B           0.49     0.05     0.77 28.08 2.85 <.001 #> A vs. B + Trend B - Trend A 0.49     0.04     0.77 28.58 2.90 <.001 #>   ## Replicate  tau-U calculation from Parker et al. (2011) bob <- scdf(c(A = 2, 3, 5, 3, B = 4, 5, 5, 7, 6), name = \"Bob\") res <- tau_u(bob, method = \"parker\") print(res, complete = TRUE) #> Tau-U #> Method: parker  #> Applied Kendall's Tau-a #> 95% CIs for tau are reported. #> CI method: z #>  #> Case: Bob  #>                             pairs pos neg ties  S  D  Tau CI lower CI upper #> A vs. B                        20  17   1    2 16 20 0.80     0.29     0.96 #> Trend A                         6   4   1    1  3  6 0.50    -0.89     0.99 #> Trend B                        10   8   1    1  7 10 0.70    -0.48     0.98 #> A vs. B - Trend A              20  18   5    3 13 20 0.65    -0.02     0.92 #> A vs. B + Trend B              30  25   2    3 23 30 0.77     0.21     0.95 #> A vs. B + Trend B - Trend A    36  26   6    4 20 36 0.56    -0.17     0.89 #>                             SD_S VAR_S SE_Tau    Z    p n #> A vs. B                     8.16 66.67   0.40 2.00  .05 9 #> Trend A                     2.94  8.67   0.46 1.08  .28 4 #> Trend B                     4.08 16.67   0.40 1.77  .08 5 #> A vs. B - Trend A           8.48 71.86   0.42 1.53  .13 9 #> A vs. B + Trend B           8.91 79.37   0.30 2.58 <.05 9 #> A vs. B + Trend B - Trend A 9.35 87.33   0.26 2.14 <.05 9 #>   ## Request tau-U for all single-cases from the Grosche2011 data set tau_u(Grosche2011) #> Tau-U #> Method: complete  #> Applied Kendall's Tau-b #> 95% CIs for tau are reported. #> CI method: z #>  #> Tau-U meta analyses: #> Weight method: z #> 95% CIs are reported. #>  #>                        Model Tau_U   se CI lower CI upper    z    p #>                      A vs. B 0.071 0.14   -0.193     0.33 0.52 0.60 #>            A vs. B - Trend A 0.083 0.14   -0.181     0.34 0.61 0.54 #>            A vs. B + Trend B 0.183 0.14   -0.082     0.42 1.36 0.17 #>  A vs. B + Trend B - Trend A 0.207 0.14   -0.057     0.44 1.54 0.12 #>  #> Case: Eva  #>                              Tau CI lower CI upper  SD_S    Z     p #> A vs. B                     0.38    -0.08     0.71 22.80 1.32   .19 #> A vs. B - Trend A           0.26    -0.22     0.64 23.42 1.41   .16 #> A vs. B + Trend B           0.49     0.05     0.77 28.08 2.85 <.001 #> A vs. B + Trend B - Trend A 0.49     0.04     0.77 28.58 2.90 <.001 #>  #> Case: Georg  #>                               Tau CI lower CI upper  SD_S     Z   p #> A vs. B                     -0.04    -0.44     0.37 31.49 -0.16 .87 #> A vs. B - Trend A            0.06    -0.36     0.45 32.18  0.34 .73 #> A vs. B + Trend B            0.14    -0.28     0.51 39.75  0.93 .35 #> A vs. B + Trend B - Trend A  0.19    -0.23     0.55 40.30  1.32 .19 #>  #> Case: Olaf  #>                               Tau CI lower CI upper  SD_S     Z   p #> A vs. B                     -0.10    -0.52     0.35 25.92 -0.39 .70 #> A vs. B - Trend A           -0.06    -0.49     0.40 29.74 -0.34 .74 #> A vs. B + Trend B           -0.09    -0.51     0.37 27.15 -0.52 .61 #> A vs. B + Trend B - Trend A -0.07    -0.50     0.38 30.82 -0.45 .65 #>"},{"path":"/reference/transform.scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform every single case of a single case data frame — moving_median","title":"Transform every single case of a single case data frame — moving_median","text":"Takes scdf applies transformations individual case. useful calculate modify new variables.","code":""},{"path":"/reference/transform.scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform every single case of a single case data frame — moving_median","text":"","code":"moving_median(x, lag = 1)  moving_mean(x, lag = 1)  local_regression(x, mt = 1:length(x), f = 0.2)  first_of(x, positions = 0)  across_cases(...)  all_cases(...)  rowwise(...)  # S3 method for class 'scdf' transform(`_data`, ...)"},{"path":"/reference/transform.scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform every single case of a single case data frame — moving_median","text":"x logical vector. lag Number values surrounding value calculate average mt vector measurement times. f proportion surrounding data influencing data point. positions numeric vector relative positions first appearance TRUE value x. ... Expressions. _data scdf.","code":""},{"path":"/reference/transform.scdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform every single case of a single case data frame — moving_median","text":"scdf.","code":""},{"path":"/reference/transform.scdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform every single case of a single case data frame — moving_median","text":"function method generic transform function. Unlike generic function, calculates expressions serially. means results calculation one expression basis following computations. n function returns number measurements case. all_cases function helper function extracts values variable cases. takes expression argument. example, mean(all_cases(values)) calculates mean values cases. mean(all_cases(values[phase == \"\"])) calculate mean values phase . rowwise applies calculation separately row (e.g. sum = rowwise(sum(values, mt, na.rm = TRUE))). function across_cases allows calculate new variables replace existing variables across cases. E.g., across_cases(values_ranked = rank(values, na.last = \"keep\")) calculate new variable values ranked across cases.","code":""},{"path":[]},{"path":"/reference/transform.scdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform every single case of a single case data frame — moving_median","text":"","code":"## Creates a single-case with frequency distributions. The proportion and ## percentage of the frequencies are calculated with transform: design <- design(  n = 3,  level = 5,  distribution = \"binomial\",  n_trials = 20,  start_value = 0.5 ) study <- random_scdf(design) transform(study, proportion = values/trials, percentage = proportion * 100) #> #A single-case data frame with three cases #>  #>  [case #1]: phase values mt trials proportion percentage #>                 A     12  1     20        0.6         60 #>                 A     13  2     20       0.65         65 #>                 A     11  3     20       0.55         55 #>                 A      9  4     20       0.45         45 #>                 A      9  5     20       0.45         45 #>                 B     20  6     20          1        100 #>                 B     20  7     20          1        100 #>                 B     20  8     20          1        100 #>                 B     20  9     20          1        100 #>                 B     20 10     20          1        100 #>                 B     20 11     20          1        100 #>                 B     20 12     20          1        100 #>                 B     20 13     20          1        100 #>                 B     20 14     20          1        100 #>                 B     20 15     20          1        100 #> # ... up to five more rows #> #  two more cases  ## Z standardize the dependent variable and add two new variables: exampleAB |>   transform(     values = scale(values),     mean_values = mean(values),     sd_values = sd(values)   ) #> #A single-case data frame with three cases #>  #>  Johanna: values mt phase mean_values sd_values #>            -1.31  1     A           0         1 #>             -1.4  2     A           0         1 #>            -1.14  3     A           0         1 #>            -0.97  4     A           0         1 #>            -1.48  5     A           0         1 #>            -0.71  6     B           0         1 #>            -0.62  7     B           0         1 #>             0.15  8     B           0         1 #>            -0.28  9     B           0         1 #>            -0.45 10     B           0         1 #>             0.75 11     B           0         1 #>             0.06 12     B           0         1 #>             0.41 13     B           0         1 #>              1.1 14     B           0         1 #>             0.67 15     B           0         1 #> # ... up to five more rows #> #  two more cases  ## Use `all` to calculate global variables. exampleAB |>   transform(     values_center_case = values - mean(values[phase == \"A\"]),     values_center_global = values - mean(all(values[phase == \"A\"])),     value_dif = values_center_case - values_center_global   ) #> #A single-case data frame with three cases #>  #>  Johanna: values mt phase values_center_case values_center_global value_dif #>               54  1     A               -0.6                 0.67     -1.27 #>               53  2     A               -1.6                -0.33     -1.27 #>               56  3     A                1.4                 2.67     -1.27 #>               58  4     A                3.4                 4.67     -1.27 #>               52  5     A               -2.6                -1.33     -1.27 #>               61  6     B                6.4                 7.67     -1.27 #>               62  7     B                7.4                 8.67     -1.27 #>               71  8     B               16.4                17.67     -1.27 #>               66  9     B               11.4                12.67     -1.27 #>               64 10     B                9.4                10.67     -1.27 #>               78 11     B               23.4                24.67     -1.27 #>               70 12     B               15.4                16.67     -1.27 #>               74 13     B               19.4                20.67     -1.27 #>               82 14     B               27.4                28.67     -1.27 #>               77 15     B               22.4                23.67     -1.27 #> # ... up to five more rows #> #  two more cases  ## Use `across_cases` to calculate or replace a variable with values from ## all cases. E.g., standardize the dependent variable: exampleABC |>   transform(     across_cases(values = scale(values))   ) #> #A single-case data frame with three cases #>  #>  Marie: values mt phase │ Rosalind: values mt phase │ Lise: values mt phase │ #>          -0.24  1     A │            -1.02  1     A │        -0.81  1     A │ #>          -0.39  2     A │            -1.45  2     A │        -1.16  2     A │ #>           -0.1  3     A │            -1.02  3     A │         0.11  3     A │ #>           0.11  4     A │            -0.67  4     A │         -0.6  4     A │ #>          -0.74  5     A │            -0.53  5     A │         0.32  5     A │ #>          -1.16  6     A │             0.25  6     A │        -0.32  6     A │ #>          -1.23  7     A │            -0.46  7     A │        -1.87  7     A │ #>          -0.17  8     A │            -1.73  8     A │        -1.16  8     A │ #>          -1.16  9     A │            -0.74  9     A │         0.88  9     A │ #>          -1.59 10     A │             -0.1 10     A │         0.11 10     A │ #>           1.52 11     B │             -0.1 11     A │        -1.02 11     A │ #>           0.25 12     B │             0.25 12     A │        -1.16 12     A │ #>            0.6 13     B │            -0.46 13     A │        -1.02 13     A │ #>           1.52 14     B │            -1.09 14     A │         -1.8 14     A │ #>            0.6 15     B │            -0.88 15     A │        -0.74 15     A │ #> # ... up to 15 more rows  ## Rank transform the values based on all cases vs. within each case: exampleABC |>   transform(     across_cases(values_across = rank(values, na.last=\"keep\")),     value_within = rank(values, na.last=\"keep\")   ) #> #A single-case data frame with three cases #>  #>  Marie: values mt phase values_across value_within #>             58  1     A            40           11 #>             56  2     A          37.5          9.5 #>             60  3     A          44.5           13 #>             63  4     A            50         14.5 #>             51  5     A          23.5          6.5 #>             45  6     A            10          3.5 #>             44  7     A             7            2 #>             59  8     A          41.5           12 #>             45  9     A            10          3.5 #>             39 10     A             5            1 #>             83 11     B            82           27 #>             65 12     B            55           16 #>             70 13     B          65.5         20.5 #>             83 14     B            82           27 #>             70 15     B          65.5         20.5 #> # ... up to 15 more rows #> #  two more cases  ## Three helper functions to smooth the data Huber2014$Berta |> transform(   \"compliance (moving median)\" = moving_median(compliance),   \"compliance (moving mean)\" = moving_mean(compliance),   \"compliance (local regression)\" = local_regression(compliance, mt) ) #> #A single-case data frame with one case #>  #>  Berta: compliance mt phase compliance (moving median) compliance (moving mean) #>                 25  1     A                         25                       25 #>               20.8  2     A                         25                    28.47 #>               39.6  3     A                       39.6                    47.69 #>                 75  4     A                         45                     55.9 #>                 45  5     A                         45                     38.5 #>               14.6  6     A                         45                    32.97 #>               45.8  7     A                         45                    37.36 #>               33.3  8     A                       33.3                    33.99 #>               31.3  9     A                       32.5                     32.6 #>               32.5 10     A                       32.5                     23.1 #>                4.2 11     B                       32.5                    24.37 #>               45.8 12     B                       32.5                    33.82 #>               31.3 13     B                       31.3                    24.84 #>                9.4 14     B                        9.4                    13.51 #>                6.3 15     B                        6.3                        8 #>  compliance (local regression) #>                          22.02 #>                          28.81 #>                           39.6 #>                           42.3 #>                             45 #>                           45.4 #>                           45.8 #>                          36.07 #>                           32.2 #>                           32.5 #>                          39.15 #>                           45.8 #>                          29.41 #>                          15.05 #>                           6.58 #> # ... up to 14 more rows  ## Function first_of() helps to set NAs for specific phases. ## E.g., you want to replace the first two values of phase A and the first ## value of phase B and its preceding value.  byHeart2011 |>   transform(     values = replace(values, first_of(phase == \"A\", 0:1), NA),     values = replace(values, first_of(phase == \"B\", -1:0), NA)   ) #> #A single-case data frame with 11 cases #>  #>  Lisa (Turkish): values mt phase │ Patrick (Spanish): values mt phase │ #>                    <NA>  1     A │                      <NA>  1     A │ #>                    <NA>  2     A │                      <NA>  2     A │ #>                       0  3     A │                         3  3     A │ #>                       0  4     A │                         0  4     A │ #>                    <NA>  5     A │                      <NA>  5     A │ #>                    <NA>  6     B │                      <NA>  6     B │ #>                       5  7     B │                         8  7     B │ #>                       6  8     B │                         8  8     B │ #>                       7  9     B │                         8  9     B │ #>                      10 10     B │                        12 10     B │ #>                      10 11     B │                        13 11     B │ #>                      15 12     B │                        13 12     B │ #>                      16 13     B │                        15 13     B │ #>                      14 14     B │                        14 14     B │ #>                      17 15     B │                        15 15     B │ #> # ... up to 11 more rows #> #  nine more cases"},{"path":"/reference/trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Trend analysis for single-cases data — trend","title":"Trend analysis for single-cases data — trend","text":"trend() function provides overview linear trends single case data. default, provides intercept slope linear quadratic regression measurement time scores. Models calculated separately phase across phases. advanced use, can add regression models using R-specific formula class.","code":""},{"path":"/reference/trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trend analysis for single-cases data — trend","text":"","code":"trend(   data,   dvar,   pvar,   mvar,   offset = \"deprecated\",   first_mt = 0,   model = NULL )"},{"path":"/reference/trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trend analysis for single-cases data — trend","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. mvar Character string name measurement time variable. Defaults attributes scdf file. offset (Deprecated. Please use first_mt). offset first measurement-time phase. offset = 0, phase measurement handled MT 1. Default offset = -1, setting first value MT 0. first_mt numeric setting value first measurement-time. Default = 0. model string list (named) strings depicting one regression model. formula expression standard R class. parameters model values, mt phase.","code":""},{"path":"/reference/trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trend analysis for single-cases data — trend","text":"trend matrix containing results (Intercept, B beta) separate regression models phase , phase B, whole data. first_mt Numeric argument function call (see arguments section).","code":""},{"path":[]},{"path":"/reference/trend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trend analysis for single-cases data — trend","text":"Juergen Wilbert","code":""},{"path":"/reference/trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trend analysis for single-cases data — trend","text":"","code":"## Compute the linear and squared regression for a random single-case design <- design(slope = 0.5) matthea <- random_scdf(design) trend(matthea) #> Trend for each phase #>  #>               Intercept     B  Beta #> Linear.ALL       41.504 4.159 0.957 #> Linear.A         50.958 0.750 0.320 #> Linear.B         57.269 4.751 0.946 #> Quadratic.ALL    54.904 0.211 0.958 #> Quadratic.A      52.085 0.062 0.110 #> Quadratic.B      68.993 0.318 0.920 #>  #> Note. Measurement-times start at 0 for each phase  ## Besides the linear and squared regression models compute two custom models: ## a) a cubic model, and  ## b) the values predicted by the natural logarithm of the ## measurement time. design <- design(slope = 0.3) ben <- random_scdf(design) trend(   ben,    model = list(\"Cubic\" = values ~ mt^3, \"Log Time\" = values ~ log(mt)),    first_mt = 1 # must be set to 1 because log(0) would be -Inf ) #> Trend for each phase #>  #>               Intercept      B   Beta #> Linear.ALL       43.260  2.417  0.898 #> Linear.A         56.353 -0.794 -0.272 #> Linear.B         48.333  3.149  0.918 #> Quadratic.ALL    52.101  0.115  0.926 #> Quadratic.A      56.289 -0.211 -0.441 #> Quadratic.B      58.126  0.186  0.893 #> Cubic.ALL        43.260  2.417  0.898 #> Cubic.A          56.353 -0.794 -0.272 #> Cubic.B          48.333  3.149  0.918 #> Log Time.ALL     37.394 14.760  0.753 #> Log Time.A       54.527 -0.581 -0.080 #> Log Time.B       42.725 16.561  0.844 #>  #> Note. Measurement-times start at 1 for each phase"},{"path":"/reference/truncate_phase.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate single-case data — truncate_phase","title":"Truncate single-case data — truncate_phase","text":"#' function superseded versatile transform.scdf function. function truncates data points beginning / end phase case.","code":""},{"path":"/reference/truncate_phase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate single-case data — truncate_phase","text":"","code":"truncate_phase(   data,   dvar,   pvar,   truncate = list(A = c(0, 0), B = c(0, 0)),   na = TRUE )"},{"path":"/reference/truncate_phase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate single-case data — truncate_phase","text":"data single-case data frame. See scdf() learn format. dvar Character string name dependent variable. Defaults attributes scdf file. pvar Character string name phase variable. Defaults attributes scdf file. truncate list vector two (beginning end) values phase defining number data points deleted. lists single-case data frames, truncation adapted length phase single case. na FALSE, truncated measurement times deleted. TRUE, NAs set dependent variable.","code":""},{"path":"/reference/truncate_phase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate single-case data — truncate_phase","text":"truncated data frame (single-case).","code":""},{"path":[]},{"path":"/reference/truncate_phase.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Truncate single-case data — truncate_phase","text":"Juergen Wilbert","code":""},{"path":"/reference/truncate_phase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate single-case data — truncate_phase","text":"","code":"## Truncate the first two data points of both phases and compare the two  ## data sets study <- c(   \"Original\" = byHeart2011[1],   \"Selected\" = truncate_phase(     byHeart2011[1], truncate = list(A = c(2, 0), B = c(2, 0))   ) ) #> Deletet measurements per case: #>  #> Lisa (Turkish): 1 2 6 7 plot(study) #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'plot'. #> Warning: This function is deprecated. It might be dropped without any further notice in a future update of scan. #> Please use function 'scplot' from the package 'scplot' instead of 'style_plot'."},{"path":"/reference/write_scdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Data output — write_scdf","title":"Data output — write_scdf","text":"function restructures writes single-case data .csv-file.","code":""},{"path":"/reference/write_scdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data output — write_scdf","text":"","code":"write_scdf(data, filename = NULL, sep = \",\", dec = \".\", ...)"},{"path":"/reference/write_scdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data output — write_scdf","text":"data single-case data frame. See scdf() learn format. filename character string defining output file name (e.g. \"SC_data.csv\". sep field separator string. Values within row x separated string. dec string use decimal points numeric complex columns: must single character. ... arguments passed write.table.","code":""},{"path":"/reference/write_scdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data output — write_scdf","text":"wrapper write.table function predefined parameters.","code":""},{"path":[]},{"path":"/reference/write_scdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Data output — write_scdf","text":"Juergen Wilbert","code":""},{"path":"/reference/write_scdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data output — write_scdf","text":"","code":"## write single-case data to a .csv-file filename <- tempfile(fileext = \".csv\") jessica <- random_scdf(design(level = .5)) write_scdf(jessica, tempfile())  ## write multiple cases to a .csv-file with semicolon as field and comma as ## decimal separator write_scdf(Grosche2011, filename, sep = \";\", dec = \",\")  ## read_scdf and write_scdf write_scdf(exampleA1B1A2B2_zvt, filename) dat <- read_scdf(filename, cvar = \"case\", pvar = \"part\",                  dvar = \"zvt\", mvar = \"day\") #> Imported 3 cases res1 <- describe(exampleA1B1A2B2_zvt)$descriptives res2 <- describe(dat)$descriptives all.equal(res1,res2) #> [1] TRUE"},{"path":[]},{"path":"/news/index.html","id":"new-features-0-66-0","dir":"Changelog","previous_headings":"","what":"New features","title":"scan 0.66.0","text":"as_scdf(): Add format checks informative error messages. (Mainly useful externally loaded files via read_scdf().) shinyscan(): New argument browser. Default \"external\" launches Shiny app external browser. Stops scdf contains one case. Redesigned outputs. Improved Bayesian analysis. Added confidence/credible intervals new argument ci.","code":""},{"path":"/news/index.html","id":"reworked-shiny-scan-app-0-66-0","dir":"Changelog","previous_headings":"","what":"Reworked Shiny Scan app","title":"scan 0.66.0","text":"Switch Bootstrap 5. Redesign “Add case” workflow. Stats tab: auto-fill “Output arguments” field statistics function selected. Miscellaneous visual polish.","code":""},{"path":"/news/index.html","id":"error-correction-0-66-0","dir":"Changelog","previous_headings":"","what":"Error correction","title":"scan 0.66.0","text":"Addin R-Studio now renames “Lauch Shiny-Scan” finally works.","code":""},{"path":"/news/index.html","id":"scan-0651","dir":"Changelog","previous_headings":"","what":"scan 0.65.1","title":"scan 0.65.1","text":"CRAN release: 2025-07-13","code":""},{"path":"/news/index.html","id":"error-correction-0-65-1","dir":"Changelog","previous_headings":"","what":"Error correction","title":"scan 0.65.1","text":"plm(): dummy slope values falsely ignore missing values. lead incorrect slope effect estimations.","code":""},{"path":"/news/index.html","id":"scan-0650","dir":"Changelog","previous_headings":"","what":"scan 0.65.0","title":"scan 0.65.0","text":"CRAN release: 2025-06-29","code":""},{"path":"/news/index.html","id":"new-function-0-65-0","dir":"Changelog","previous_headings":"","what":"New function","title":"scan 0.65.0","text":"rowwise(): new helper function transform() allows make calculations rowwise:","code":"ex <- exampleAB_add; ex[[1]]$wellbeing[c(3, 6)] <- NA transform(   ex,    mean_dv = rowwise(mean(c(wellbeing, cigarrets, depression), na.rm = TRUE)) )"},{"path":"/news/index.html","id":"new-features-0-65-0","dir":"Changelog","previous_headings":"","what":"New features","title":"scan 0.65.0","text":"mplm(): Reworked function output. Now provides global F test integrated depiction coefficients. Added export() method. plm()/print.sc_plm(): either print partial delta (incremental), R squared:","code":"plm(exampleAB$Johanna) |>    print(r_squared = c(\"delta\", \"partial\"))"},{"path":"/news/index.html","id":"corrections-0-65-0","dir":"Changelog","previous_headings":"","what":"Corrections","title":"scan 0.65.0","text":"plm(): Corrected calculation model fit F statistic R2 models without intercept scdf(): Reported false error message phase.start argument used mt started 0.","code":""},{"path":"/news/index.html","id":"further-changes-0-65-0","dir":"Changelog","previous_headings":"","what":"Further changes","title":"scan 0.65.0","text":"scdf(): Optimized code, function arguments, help page.","code":""},{"path":"/news/index.html","id":"scan-0640","dir":"Changelog","previous_headings":"","what":"scan 0.64.0","title":"scan 0.64.0","text":"CRAN release: 2025-03-19","code":""},{"path":"/news/index.html","id":"new-functions-0-64-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"scan 0.64.0","text":"fetch(): General getter function extract components scan object. takes scan object optional argument returns sub-objects. now, extracts regression object class glm, lm, lme respective plm, hplm, mplm objects:","code":"mod <- plm(exampleAB$Johanna) fetch(mod)"},{"path":"/news/index.html","id":"new-features-0-64-0","dir":"Changelog","previous_headings":"","what":"New features","title":"scan 0.64.0","text":"anova(): Implemented functionality arguments generic anova functions. options(scan.string.dummy.phase = \"phase\"): can renamed avoid name conflicts output regression models. options(scan.string.dummy.slope = \"inter\"): can renamed avoid name conflicts output regression models.","code":""},{"path":"/news/index.html","id":"scan-0630","dir":"Changelog","previous_headings":"","what":"scan 0.63.0","title":"scan 0.63.0","text":"CRAN release: 2025-03-01","code":""},{"path":"/news/index.html","id":"new-functions-0-63-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"scan 0.63.0","text":"bplm(): Bayesian piecewise regression model. Applies Markov Chain Monte Carlo sampler MCMCglmm package. export method. add_dummy_variables(): Helper function adds dummy variables necessary calculate plm scdf. anova.plm() anova.hplm(): Methods likelihood ratio model comparison.","code":""},{"path":"/news/index.html","id":"new-features-0-63-0","dir":"Changelog","previous_headings":"","what":"New features","title":"scan 0.63.0","text":"hplm(): Adds inter correlation random variables print output. new option: scan.rename.predictors can set , concise, full. Changes predictors regression models renamed. between_smd(): Added support Bayesian regressions model = \"bayesian\" providing object returned bplm() function.","code":""},{"path":"/news/index.html","id":"solved-bugs-0-63-0","dir":"Changelog","previous_headings":"","what":"Solved bugs","title":"scan 0.63.0","text":"plm(): setting var_trials constant threw error.","code":""},{"path":"/news/index.html","id":"corrections--changes-0-63-0","dir":"Changelog","previous_headings":"","what":"Corrections / Changes","title":"scan 0.63.0","text":"between_smd(): Reworked function output avoid confusion. ‘pure’ case smd estimation provided argument include_residuals = FALSE set. print.sc_plm() / export.sc_plm(): New argument ci specifying confidence interval. Either FALSE, TRUE number 0 1 (0.90 90% intervals).","code":""},{"path":"/news/index.html","id":"scan-0620","dir":"Changelog","previous_headings":"","what":"scan 0.62.0","title":"scan 0.62.0","text":"CRAN release: 2025-02-05","code":""},{"path":"/news/index.html","id":"new-functions--features-0-62-0","dir":"Changelog","previous_headings":"","what":"New functions / features","title":"scan 0.62.0","text":"rescale(): New function helper getting standardized estimators regression models. e.g. exampleAB |> rescale() |> hplm(). between_smd(): Calculates case standardized mean differences proposed Pustejovsky et. aL (2014). Can take complex hplm models basis. na.omit.scdf(): scdf method generic na.omit(). Removes row missing value scdf.","code":""},{"path":"/news/index.html","id":"new-features-0-62-0","dir":"Changelog","previous_headings":"","what":"New features","title":"scan 0.62.0","text":"design(): Argument random_start_values randomly assigns start values case based distribution (normal, poisson binomial) respective parameters (start_values, s, n_trials). print.sc_hplm(): New argument smd. set TRUE, case smd results reported. tau_u(): New method \"tarlow\" calculates Tau-U implemented R code online calculator Tarlow (2017). , tau values calculated method = \"complete\", continuity_correction = TRUE, tau_method = \"\". Inferential statistics calculated based tau b standard deviation S derived directly Kendall’s Tau B analysis (different parker complete methods). rand_test(): now possible provide new functions calculating statistic directly list statistic_function argument. list must element named statistic function takes two arguments b returns single numeric value. second element list named aggregate takes function one numeric argument returns numeric argument. function used aggregate values multiple case design. provide element, uses default function(x) sum(x)/length(x). third optional argument name provides name user function. rand_test(): Returns startpoints random permutations. plot_rand(): New argument type \"xy\" plot splitpoints statistics drawn. allows see graphically measurement time statistic changes.","code":"userstat <- list(   statistic = function(a, b) median(b) - median(a),    aggregate = function(x) median(x),   name = \"median B - A\" )  rand_test(exampleAB, statistic_function = userstat , complete = TRUE)  # which is identical to: rand_test(exampleAB, statistic = \"Median B-A\" , complete = TRUE) Leidig2018[4] |>    na.omit() |>    rand_test(complete = TRUE, limit = 1, statistic = \"SMD glass\") |>    plot_rand(type = \"xy\")"},{"path":"/news/index.html","id":"corrections--changes-0-62-0","dir":"Changelog","previous_headings":"","what":"Corrections / Changes","title":"scan 0.62.0","text":"scdf(): Throws error argument phase_starts set beginning first phase first measurement. tau_u(): Method \"parker\" ignores tau_method setting sets continuity_correction = FALSE. follows Parker (2011) paper. , inferential statistics calculated using Kendall’s Tau b actual Tau calculation applies Kendall’s Tau (without ties). rand_test(): Missing values dependent variable now removed calculations.","code":""},{"path":[]},{"path":"/news/index.html","id":"scan-0610","dir":"Changelog","previous_headings":"","what":"scan 0.61.0","title":"scan 0.61.0","text":"CRAN release: 2024-07-01","code":""},{"path":"/news/index.html","id":"solved-bugs-0-61-0","dir":"Changelog","previous_headings":"","what":"Solved bugs","title":"scan 0.61.0","text":"Corrected name level-effect predictor regressions phase variable named “phase”.","code":""},{"path":"/news/index.html","id":"new-0-61-0","dir":"Changelog","previous_headings":"","what":"New","title":"scan 0.61.0","text":"Tip---day like message start-. Multiple improvements Shiny app (try shinyscan()) new output engine rendering html export based gt table. Set options(scan.export.engine = \"gt\"). engine allows export tables docx format: overlap(exampleAB) |> export(file = \"test.docx\", flip = TRUE). new export functions pem(), pet(), pnd(), summary() (either summary(exampleAB) |> export() export(exampleAB, summary = TRUE))","code":""},{"path":"/news/index.html","id":"changes-0-61-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"scan 0.61.0","text":"rci(): removed Hageman et al. method appropriate single-cases current implementation. scdf(): New argument phase_starts(). defines measurement times start phase. phase_starts = list(= 1, B = 10, C = 15). throws error phase start defined corresponding measurement-time exists. phase_starts generalization B_start. rand_test(): New option statistic: SMD calculates standardized mean difference Hedge’s g Durlak correction. W-test computes Wilcoxon tests compares average W statistics. T-test computes T-tests compares average t-Values. NAP NAP decreasing Non-overlap pairs. nap(): added Cohen’s d R-Squared effects. export(): select argument nap coef.sc_hplm(): new casewise argument. set TRUE, returns effect estimations casewise. print.sc_hplm(): new casewise argument. set TRUE, returns effect estimations casewise. export.sc_hplm(): new casewise argument. set TRUE, returns effect estimations casewise. export.scdf(): new summary argument. TRUE, returns summary. hplm(): new arguments random_trend, random_level, random_slope selectively add respective random slope effects model.","code":""},{"path":"/news/index.html","id":"new-examples-0-61-0","dir":"Changelog","previous_headings":"","what":"New examples","title":"scan 0.61.0","text":"Parker2009b","code":""},{"path":"/news/index.html","id":"scan-0600","dir":"Changelog","previous_headings":"","what":"scan 0.60.0","title":"scan 0.60.0","text":"CRAN release: 2023-08-08","code":""},{"path":"/news/index.html","id":"new-function-0-60-0","dir":"Changelog","previous_headings":"","what":"New function","title":"scan 0.60.0","text":"ird(): Robust improvement rate difference formulated Postejovski (2019).","code":""},{"path":"/news/index.html","id":"changes-0-60-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"scan 0.60.0","text":"pand(): Rewrote function. New argument method allows apply sorting algorithm proposed Parker 2007 method = \"minimum\" applies exact method provided Pustejovski 2019. Furthermore, tau test replaced X Squared Fisher exact test. corrected_tau: Report results warning phase data identical; new argument tau_method = “” switch Kendall’s tau-. export(): new pand(). New example datasets: Tarlow2017, Parker2011b, Parker2009, Parker2007","code":""},{"path":"/news/index.html","id":"shiny-scan-0-60-0","dir":"Changelog","previous_headings":"","what":"Shiny scan","title":"scan 0.60.0","text":"Added power-analyses Added settings Extended save options Various changes optimization ui","code":""},{"path":"/news/index.html","id":"scan-0590","dir":"Changelog","previous_headings":"","what":"scan 0.59.0","title":"scan 0.59.0","text":"CRAN release: 2023-06-03 describe(): now works correctly duplicated phase names. shiny-app longer depends shinyjs markdown. shinyscan() asks missing packages scplot shiny installed automatically.","code":""},{"path":"/news/index.html","id":"scan-058","dir":"Changelog","previous_headings":"","what":"scan 0.58","title":"scan 0.58","text":"CRAN release: 2023-05-24","code":""},{"path":"/news/index.html","id":"shiny-app-added-0-58","dir":"Changelog","previous_headings":"","what":"Shiny app added","title":"scan 0.58","text":"start app shinyscan() shiny, shinyjs, scplot, markdown","code":""},{"path":"/news/index.html","id":"new-fucntions-0-58","dir":"Changelog","previous_headings":"","what":"New fucntions","title":"scan 0.58","text":"batch_apply(): Apply function element scdf. Use . placeholder scdf case. Helper functions transform(): n(), all_cases(), across_cases(), first_of Helper functions transform(): moving_mean(), moving_median(), local_regression() corrected_tau(): returns multiple cases export(): new nap(), pen() c()/combine(): new arguments set author info attributes resulting scdf (author, info)","code":"batch_apply(exampleAB, plm(.) |> coef())"},{"path":"/news/index.html","id":"changes-in-functions-0-58","dir":"Changelog","previous_headings":"","what":"Changes in functions","title":"scan 0.58","text":"plm(): Print function allows set maximum lag autocorrelations; Overall significance Ljung_Box test reported.","code":"plm(exampleAB$Johanna) |> print(lag_max = 5)"},{"path":"/news/index.html","id":"bug-fixes-0-58","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"scan 0.58","text":"solved: summary() failed one cases name solved: nap() reported values first case multiple cases. solved: add_l2() lost column name l2 variable l2 one variable.","code":""},{"path":"/news/index.html","id":"minor-0-58","dir":"Changelog","previous_headings":"","what":"minor","title":"scan 0.58","text":"convert(): new arguments. indent sets indentation. scdf contains one case, study combined. select_phases(): New argument phase_names sets names recombined phases. default \"auto\" creates combinations phase names automatically (e.g., = c(\"\", \"B\", B = \"C\") results phases AB C).","code":""},{"path":"/news/index.html","id":"scan-056","dir":"Changelog","previous_headings":"","what":"scan 0.56","title":"scan 0.56","text":"CRAN release: 2023-02-16","code":""},{"path":"/news/index.html","id":"new-features-0-56","dir":"Changelog","previous_headings":"","what":"New features","title":"scan 0.56","text":"export(): New export power_test() smd() output. export(): tau_u() export new argument case takes values \"meta\" \"\" new argument select allowing select, reorder, rename specific variables. select_cases(): Allow selection based object names (like substitute). plm(), hplm(): New arguments contrast_level contrast_slope allow setting contrasts level slope separately. elements can either “first” “preceding”. Speed-tau_u() 20%. rewrote as_scdf(), read_scdf(). Now easier import data file format.","code":"select_cases(exampleAB, -c(Johanna, Karolina)) select_cases(exampleAB, Johanna, Karolina) v <- c(\"Moritz\", \"Jannis\") select_cases(exampleA1B1A2B2, v) readODS::read_ods(\"filename.ods\") |> as.scdf() openxlsx::read.xlsx(\"filename.xlsx\") |> as.scdf()   readODS::read_ods(\"filename.ods\") |>    as.scdf(     cvar = \"id\",      pvar = \"section\",      mvar = \"day\",      phase_names = c(\"baseline\", \"intervention\")   )    as.data.frame(exampleABC) |> readODS::write_ods(\"filename.xlsx\") as.data.frame(exampleABC) |> openxlsx::write.xlsx(\"filename.xlsx\")"},{"path":"/news/index.html","id":"bug-fixes-0-56","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"scan 0.56","text":"tau_u(): Rewrote calculation meta analyses confidence intervals. tau_u(), correted_tau(): corrected wrong calculation continuity correction values lower phase B. tau_u(): Implemented new method calculating confidence intervals based Fisher-Z transformations (see Long, J. D., & Cliff, N. (1997). Confidence intervals Kendall’s tau. British Journal Mathematical Statistical Psychology, 50(1), 31-41.","code":""},{"path":"/news/index.html","id":"superseded-function-0-56","dir":"Changelog","previous_headings":"","what":"superseded function","title":"scan 0.56","text":"smooth_caes(), shift(), standardise(), ranks(), truncate_phases(): superseded transform() helper functions. See details help files transform scan-book.","code":""},{"path":"/news/index.html","id":"minor-changes-0-56","dir":"Changelog","previous_headings":"","what":"minor changes","title":"scan 0.56","text":".data.frane.scdf()/as_scdf(): keep retrieve scdf attributes.","code":""},{"path":"/news/index.html","id":"scan-055","dir":"Changelog","previous_headings":"","what":"scan 0.55","title":"scan 0.55","text":"CRAN release: 2022-08-29","code":""},{"path":"/news/index.html","id":"new-functions-0-55","dir":"Changelog","previous_headings":"","what":"new functions","title":"scan 0.55","text":"coef()/ coefficients(): Method base R coef function plm/hplm objects. Extracts coefficient tables provided object.","code":"coef(plm(exampleAB$Johanna))"},{"path":"/news/index.html","id":"new-features-0-55","dir":"Changelog","previous_headings":"","what":"New features","title":"scan 0.55","text":"power_test(): New argument ci provides confidence intervals power, alpha error, correct proportions. New arguments binom_test_alpha, binom_test_power, binom_test_correct provide test provided proportion alpha, power, correct proportions. plm(), hplm(): Added contrast argument values \"first\" “preceding”. Now model = \"JW\" deprecated identical model = \"B&L-B\", contrast = \"preceding\". plm(), hplm(): Added model \"W\". shifts measurement-time variable start zero. leads sensible estimation intercept (intercept depicts estimated score start). model = \"W\" now default. Use model = \"B&L-B\" previous defaults.","code":"design <- design(   n = 1, phase_design = list(A = 6, B = 9),   rtt = 0.8, level = 1.0, trend = 0.05 )  power_test(   design, ci = 0.95, binom_test = TRUE )"},{"path":"/news/index.html","id":"bug-fixes-0-55","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"scan 0.55","text":"solved #66: set_vars() working. read_scdf() now works cvar first column.","code":""},{"path":"/news/index.html","id":"changes-to-functions-0-55","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"scan 0.55","text":"corrected_tau(): changed default setting arguments : repeated = FALSE, continuity = FALSE. Now default results match calculator developed Tarlow. tau_u(): Implemented continuity_correction (S-1 calculating Z)","code":""},{"path":"/news/index.html","id":"scan-0541","dir":"Changelog","previous_headings":"","what":"scan 0.54.1","title":"scan 0.54.1","text":"CRAN release: 2022-04-03","code":""},{"path":"/news/index.html","id":"bug-fixes-0-54-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"scan 0.54.1","text":"select_phases() now works phase variable “phase” estimate_design() broken fixed now. print() function sc_designfixed.","code":""},{"path":"/news/index.html","id":"scan-054","dir":"Changelog","previous_headings":"","what":"scan 0.54","title":"scan 0.54","text":"CRAN release: 2022-03-23","code":""},{"path":"/news/index.html","id":"new-functions-0-54","dir":"Changelog","previous_headings":"","what":"new functions","title":"scan 0.54","text":"transform(): Takes scdf calculates modifies variables case (transform(exampleAB, z_values = scale(values), t_values = 50 + z_values * 10)). smd() reporting various types standardized mean differences.","code":""},{"path":"/news/index.html","id":"reanmed-functions-old-functionnames-still-work-0-54","dir":"Changelog","previous_headings":"","what":"reanmed functions (old functionnames still work)","title":"scan 0.54","text":"readSC() -> read_scdf() writeSC() -> write_scdf() design_rSC() -> design() rSC() -> random_scdf()","code":""},{"path":"/news/index.html","id":"complete-rework---as-new-0-54","dir":"Changelog","previous_headings":"","what":"Complete rework - as new","title":"scan 0.54","text":"power_test() various extensions, optimizations, solved various bugs. rewrote print method, added argument duration print computation duration. Added 'n_trials' argument binomial distributions. Extended help page. design() print method. Extended help page. Rewrote algorithm ‘binomial’ distribution.","code":""},{"path":"/news/index.html","id":"extended-functions-0-54","dir":"Changelog","previous_headings":"","what":"Extended functions","title":"scan 0.54","text":"plm(): rewrote analysis function binomial tests. now need argument var_trials define number trials per measurement. dvar_percentage argument must set TRUE dependent variables percentages (family = 'binomal'). speed optimized random_scdf(). Rewrote algorithm ‘poisson’ distributed measures. Rewrote algorithm ‘binomial’ distribution. Extended help page. read_scdf(): extracts filetype file extension. read_scdf(): New yaml import options scdf files tau_u() #51: Added option confidence intervals tau_u output.","code":"Anna:   values:     A: [1, 3, 4, 5, 6, 7]     B: [8, 9, 10, 10, 11]  Toni:   values:     A: [2, 3, 4, 5, 6, 7]     B: [3, 9, 10, 10,11]   control_var: [1,2,3,4,5,6,7,8,1,2,3]"},{"path":"/news/index.html","id":"solved-error-in-functions-0-54","dir":"Changelog","previous_headings":"","what":"Solved error in functions","title":"scan 0.54","text":"describe(): solved wrong calculation Hedges G phase length differed. plm() solved #46: throws error, phase length 1. corrected_tau() solved #48: throws warning phase less three rows. solved #49: changes class tibble data.frame within scdf.","code":""},{"path":"/news/index.html","id":"scan-053","dir":"Changelog","previous_headings":"","what":"scan 0.53","title":"scan 0.53","text":"CRAN release: 2021-09-22","code":""},{"path":"/news/index.html","id":"major-changes-0-53","dir":"Changelog","previous_headings":"","what":"Major changes","title":"scan 0.53","text":"scdf files now allow combine studies different phase designs. Several functions adapted handle cases differing designs mutual analysis. %>% operator imported exported magrittr package. Now R 4.1 pipe operator, pipes seem become standard. compatibility older R Versions, stay %>% operator time switching |>. allow piping code, added several functions: add_l2, select_phases, select_cases, subset, set_vars, set_dvar, set_mvar, set_pvar.","code":""},{"path":"/news/index.html","id":"new-functions-0-53","dir":"Changelog","previous_headings":"Major changes","what":"New functions","title":"scan 0.53","text":"sample_names(): Returns character vector length n names randomly drawing name list: type = {“neutral”, “female”, “male”, “mixed”}. Useful anonymize scdf files -add_l2(): Adds variables second level 2 data frame scdf matched id variable (default case). select_phases(): selects recombines phases B phase (equivalent phases argument various functions, useful using %>% operators). set_vars(): change core variables scdf (arguments dvar dependent variable, pvar phase variable, mvar measurement-time variable). set_dvar(), set_mvar(), set_pvar(): Shortcuts set dvar, mvar, pvar piping script e.g. exmpleAB_add %>% set_dvar(\"depression\") %>% describe() .scdf(): Tests object type “scdf” . check_scdf(): Checks validity scdf object (mainly used internal tests) convert(): Creates scdf syntax file scdf object. cdc: Applies Conservative Dual-Criterion Method (CDC; Fisher, Kelley, & Lomas, 2003) scdf objects.","code":"names(exampleAB) <- sample_names(3) Leidig2018 %>%   add_l2(Leidig2018_l2) %>%   hplm(update.fixed = .~. + gender + migration + ITRF_TOTAL*phaseB,         slope = FALSE, random.slopes = FALSE, lr.test = FALSE) exampleA1B1A2B2 %>%    select_phases(A = c(1, 3), B = c(2, 4)) %>%   overlap() exampleAB_add %>%   set_vars(dv = \"depression\") %>%   overlap() # Create a syntax to code the scdf exampleAB and write it into an R file convert(exampleAB, file = \"cases.R\") cdc(Beretvas2008) cdc(exampleAB_decreasing, decreasing = TRUE, trend.method = \"bisplit\")"},{"path":"/news/index.html","id":"changes-in-functions-0-53","dir":"Changelog","previous_headings":"Major changes","what":"Changes in functions","title":"scan 0.53","text":"overlap(): Added Hedges-g. new trend lines added plot.scdf(): Koenig’s bi-split / quarter intersect (lines = “trendA_bisplit”) Tukey’s tri-split / Wald’s slope (lines = “trendA_trisplit”). plot.scdf(): Now allows multiple lines different line styles. tau_u(): Solved bug meta analysis #6. Reworked complete function clear accurate. Added method_meta switching fixed random-effect meta analyses. Reworked print function look nicer. export(): Reworked html output. Added basic output tau_u. Arguments caption footnote allow specify appearance (left NA object specific output generated.). booktab = TRUE now set default kable options.","code":"plot(exampleAB_50[8], lines = \"trendA_bisplit\") plot(example_A24, lines = \"trendA_trisplit\") plot(   exampleAB,    lines = list(     list(type = \"median\", col = \"red\", lwd = 0.5),     list(type = \"trend\", col = \"blue\", lty = \"dashed\", lwd = 2),     list(type = \"loreg\", f = 0.2, col = \"green\", lty = \"solid\", lwd = 1)   ) )"},{"path":"/news/index.html","id":"deleted-deprecated-functions-0-53","dir":"Changelog","previous_headings":"Major changes","what":"Deleted deprecated functions","title":"scan 0.53","text":"following functions deprecated since 2017 now removed scan: makesingleSC() makeSCDF(): Please use scdf instead. estimateSC(): Please use estimate_design() power.testSC(): Please use power_test()","code":""},{"path":"/news/index.html","id":"bugs-0-53","dir":"Changelog","previous_headings":"Major changes","what":"Bugs","title":"scan 0.53","text":"print.scdf() now prints cases variable names wider current screen .","code":""},{"path":[]},{"path":"/news/index.html","id":"major-changes-0-52","dir":"Changelog","previous_headings":"","what":"Major changes","title":"scan 0.52","text":"describe() new alias describeSC() plot.scdf(), style_plot(): New options style casenames: names takes list tag = value structure. Example: plot.scdf(), style_plot(): Different background colors different phases:","code":"new_style <- style_plot() new_style$names$side <- 3 new_style$names$line <- -1.7 new_style$names$col <- \"darkred\" new_style$names$cex <- 1.5 new_style$names$at <- 20 new_style$names$adj <- 1 new_style$names$font <- 3 plot(exampleAB_decreasing, style = new_style) new_style <- style_plot() new_style$fill.bg <- c(\"aliceblue\", \"mistyrose1\", \"honeydew\") new_style$lty.seperators <- 0 plot(exampleABC, style = new_style) plot(exampleABAB, style = c(\"default\", \"phase_shade\"))"},{"path":[]},{"path":"/news/index.html","id":"major-changes-0-50-5","dir":"Changelog","previous_headings":"","what":"Major changes","title":"scan 0.50.5","text":"fixed bug plot function","code":""},{"path":[]},{"path":"/news/index.html","id":"major-changes-0-50-4","dir":"Changelog","previous_headings":"","what":"Major changes","title":"scan 0.50.4","text":"New subset() function (method base subset() selecting variables, rows, cases. takes arguments subset, select, cases.","code":"subset(exampleAB, (values < 60 & phase == \"A\") | (values >= 60 & phase == \"B\")) subset(exampleAB_add, select = c(-cigarrets, -depression)) subset(exampleA1B1A2B2, phase %in% c(\"A1\", \"B2\"), cases = Pawel:Moritz)"},{"path":[]},{"path":"/news/index.html","id":"major-changes-0-50-2","dir":"Changelog","previous_headings":"","what":"Major changes","title":"scan 0.50.2","text":"New select_cases() function.","code":"select_cases(exampleAB, \"Johanna\", \"Karolina\") select_cases(exampleAB, 1,2) select_cases(exampleAB, \"-Johanna\")"},{"path":[]},{"path":"/news/index.html","id":"major-changes-0-50","dir":"Changelog","previous_headings":"","what":"Major changes","title":"scan 0.50","text":"Started dropping SC extension function names e.g. overlapSC() becomes overlap()","code":""},{"path":"/news/index.html","id":"scan-040","dir":"Changelog","previous_headings":"","what":"scan 0.40","title":"scan 0.40","text":"CRAN release: 2019-08-05 CRAN release 2019-08-11","code":""},{"path":"/news/index.html","id":"scan-020","dir":"Changelog","previous_headings":"","what":"scan 0.20","title":"scan 0.20","text":"CRAN release: 2016-10-14 CRAN release 2016-10-15","code":""}]
