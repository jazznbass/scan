
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "scplot"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('scplot')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_arrow")
> ### * add_arrow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_arrow
> ### Title: Add arrrows to an scplot
> ### Aliases: add_arrow
> 
> ### ** Examples
> 
> data(exampleAB, package = "scan")
> p1 <- scplot(exampleAB$Anja)  |>
+   add_arrow(case = 1, 2, 70, 6, 55, color = "darkred")
> 
> 
> 
> cleanEx()
> nameEx("add_grid")
> ### * add_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_grid
> ### Title: Add grid to an scplot
> ### Aliases: add_grid
> 
> ### ** Examples
> 
> data(exampleAB, package = "scan")
> p1 <- scplot(exampleAB$Anja)  |>
+   set_theme("minimal")  |>
+   add_grid(color = "grey70")
> 
> 
> 
> cleanEx()
> nameEx("add_marks")
> ### * add_marks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_marks
> ### Title: Add marks to an scplot
> ### Aliases: add_marks
> 
> ### ** Examples
> 
> library(scan)
[34mscan 0.60.0 (2023-08-08)
[31mFor information on citing scan, type citation("scan").
> p1 <- scplot(exampleA1B1A2B2$Moritz) |> add_marks(positions = c(1,5,10,14))
> p1 <- scplot(Huber2014) |> add_marks(positions = outlier(Huber2014))
> 
> 
> 
> cleanEx()

detaching â€˜package:scanâ€™

> nameEx("new_theme")
> ### * new_theme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: new_theme
> ### Title: Create a new scplot theme
> ### Aliases: new_theme extract_theme
> 
> ### ** Examples
> 
> data(exampleABC, package = "scan")
> my_theme <- new_theme() |>
+   set_panel(color = "red")  |>
+   set_base_text(size = 12, color = "blue")  |>
+   set_dataline(color = "darkred", linewidth = 2)
> p1 <- scplot(exampleABC)  |> set_theme(my_theme)
> 
> 
> 
> cleanEx()
> nameEx("set_background")
> ### * set_background
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_background
> ### Title: Set plot and panel background of an scplot
> ### Aliases: set_background set_panel
> 
> ### ** Examples
> 
> data(exampleAB, package = "scan")
> p1 <- scplot(exampleAB)  |>
+  set_background(fill = "lightblue", colour = "darkblue", linewidth = 1.5) |>
+  set_panel(fill = "deepskyblue", color = "darkblue", linewidth = 0.3)
> 
> 
> 
> cleanEx()
> nameEx("set_dataline")
> ### * set_dataline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_dataline
> ### Title: Set data lines of an scplot
> ### Aliases: set_dataline add_dataline
> 
> ### ** Examples
> 
> data(exampleAB_add, package = "scan")
> p1 <- scplot(exampleAB_add)  |>
+   set_dataline("depression", color = "darkblue")
> 
> 
> 
> cleanEx()
> nameEx("set_theme_element")
> ### * set_theme_element
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_theme_element
> ### Title: Set a theme element
> ### Aliases: set_theme_element
> 
> ### ** Examples
> 
> data(exampleABC, package = "scan")
> p1 <- scplot(exampleABC)  |>
+   set_theme_element(
+     axis.ticks.length = unit(0, "points"),
+     axis.line.y = element_line(color = "darkred", linewidth = 2),
+     panel.background = element_rect(color = "darkblue", linewidth = 1),
+     panel.spacing.y = unit(0, "points"),
+     phasenames = element_text(color = "#00000000")
+   )
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.271 0.027 0.297 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
